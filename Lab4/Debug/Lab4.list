
Lab4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035c8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  080036d4  080036d4  000136d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800375c  0800375c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800375c  0800375c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800375c  0800375c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800375c  0800375c  0001375c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003760  08003760  00013760  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003764  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000130  20000070  080037d4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a0  080037d4  000201a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ceaf  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020f0  00000000  00000000  0002cf48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cd8  00000000  00000000  0002f038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bf8  00000000  00000000  0002fd10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017f91  00000000  00000000  00030908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dc36  00000000  00000000  00048899  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088d57  00000000  00000000  000564cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000df226  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038b0  00000000  00000000  000df27c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080036bc 	.word	0x080036bc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080036bc 	.word	0x080036bc

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <initButton>:
//user definition input port and input pin
#define INPUT_PORT GPIOB
//uint16_t buttonPin[NO_OF_BUTTONS] = {0x0001};


void initButton(){
 800015c:	b480      	push	{r7}
 800015e:	b083      	sub	sp, #12
 8000160:	af00      	add	r7, sp, #0
	//clear all buffers, counters and flags
	for(unsigned char i = 0; i < NO_OF_BUTTONS; i++){
 8000162:	2300      	movs	r3, #0
 8000164:	71fb      	strb	r3, [r7, #7]
 8000166:	e020      	b.n	80001aa <initButton+0x4e>
		debounceButtonBuffer1[i] 		= BUTTON_IS_RELEASED;	//buffer level 1
 8000168:	79fb      	ldrb	r3, [r7, #7]
 800016a:	4a14      	ldr	r2, [pc, #80]	; (80001bc <initButton+0x60>)
 800016c:	2101      	movs	r1, #1
 800016e:	54d1      	strb	r1, [r2, r3]
		debounceButtonBuffer2[i] 		= BUTTON_IS_RELEASED;	//buffer level 2
 8000170:	79fb      	ldrb	r3, [r7, #7]
 8000172:	4a13      	ldr	r2, [pc, #76]	; (80001c0 <initButton+0x64>)
 8000174:	2101      	movs	r1, #1
 8000176:	54d1      	strb	r1, [r2, r3]
		debounceButtonBuffer3[i] 		= BUTTON_IS_RELEASED;	//buffer level 3
 8000178:	79fb      	ldrb	r3, [r7, #7]
 800017a:	4a12      	ldr	r2, [pc, #72]	; (80001c4 <initButton+0x68>)
 800017c:	2101      	movs	r1, #1
 800017e:	54d1      	strb	r1, [r2, r3]
		debounceButtonBuffer4[i] 		= BUTTON_IS_RELEASED;	//buffer level 4
 8000180:	79fb      	ldrb	r3, [r7, #7]
 8000182:	4a11      	ldr	r2, [pc, #68]	; (80001c8 <initButton+0x6c>)
 8000184:	2101      	movs	r1, #1
 8000186:	54d1      	strb	r1, [r2, r3]
		buttonFlags[i] 					= BUTTON_FLAG_CLEAR;	//button pressed flag
 8000188:	79fb      	ldrb	r3, [r7, #7]
 800018a:	4a10      	ldr	r2, [pc, #64]	; (80001cc <initButton+0x70>)
 800018c:	2100      	movs	r1, #0
 800018e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		flagForButtonPress1s[i] 		= BUTTON_FLAG_CLEAR;	//button hold flag
 8000192:	79fb      	ldrb	r3, [r7, #7]
 8000194:	4a0e      	ldr	r2, [pc, #56]	; (80001d0 <initButton+0x74>)
 8000196:	2100      	movs	r1, #0
 8000198:	54d1      	strb	r1, [r2, r3]
//		flagForButtonDoublePressed[i] 	= BUTTON_FLAG_CLEAR;	//button double pressed flag
//		TimeOutForKeyDoublePress[i]     = DOUBLE_PRESS_TIMEOUT;	//time interval double pressed
//		TimeOutForKeyPress[i]           = KEY_HOLD_TIMEOUT;
//		buttonWaitDoublePress[i]        = 0;					//button state wait for double pressed detection
		counterForButtonPress1s[i] 		= 0;					//counter for button hold detection
 800019a:	79fb      	ldrb	r3, [r7, #7]
 800019c:	4a0d      	ldr	r2, [pc, #52]	; (80001d4 <initButton+0x78>)
 800019e:	2100      	movs	r1, #0
 80001a0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(unsigned char i = 0; i < NO_OF_BUTTONS; i++){
 80001a4:	79fb      	ldrb	r3, [r7, #7]
 80001a6:	3301      	adds	r3, #1
 80001a8:	71fb      	strb	r3, [r7, #7]
 80001aa:	79fb      	ldrb	r3, [r7, #7]
 80001ac:	2b00      	cmp	r3, #0
 80001ae:	d0db      	beq.n	8000168 <initButton+0xc>
	}
}
 80001b0:	bf00      	nop
 80001b2:	bf00      	nop
 80001b4:	370c      	adds	r7, #12
 80001b6:	46bd      	mov	sp, r7
 80001b8:	bc80      	pop	{r7}
 80001ba:	4770      	bx	lr
 80001bc:	2000008c 	.word	0x2000008c
 80001c0:	20000090 	.word	0x20000090
 80001c4:	20000094 	.word	0x20000094
 80001c8:	20000098 	.word	0x20000098
 80001cc:	200000c0 	.word	0x200000c0
 80001d0:	2000009c 	.word	0x2000009c
 80001d4:	200000a0 	.word	0x200000a0

080001d8 <button_reading>:

void button_reading (void) {
 80001d8:	b590      	push	{r4, r7, lr}
 80001da:	b083      	sub	sp, #12
 80001dc:	af00      	add	r7, sp, #0
	//checking for button pressed, hold more than 1 second and double pressed
	for(unsigned char i = 0; i < NO_OF_BUTTONS; i++){
 80001de:	2300      	movs	r3, #0
 80001e0:	71fb      	strb	r3, [r7, #7]
 80001e2:	e06d      	b.n	80002c0 <button_reading+0xe8>
		//propagate buffer stage 2 to stage 3
		debounceButtonBuffer3[i] = debounceButtonBuffer2[i];
 80001e4:	79fa      	ldrb	r2, [r7, #7]
 80001e6:	79fb      	ldrb	r3, [r7, #7]
 80001e8:	4939      	ldr	r1, [pc, #228]	; (80002d0 <button_reading+0xf8>)
 80001ea:	5c89      	ldrb	r1, [r1, r2]
 80001ec:	4a39      	ldr	r2, [pc, #228]	; (80002d4 <button_reading+0xfc>)
 80001ee:	54d1      	strb	r1, [r2, r3]

		//propagate buffer stage 1 to stage 2
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 80001f0:	79fa      	ldrb	r2, [r7, #7]
 80001f2:	79fb      	ldrb	r3, [r7, #7]
 80001f4:	4938      	ldr	r1, [pc, #224]	; (80002d8 <button_reading+0x100>)
 80001f6:	5c89      	ldrb	r1, [r1, r2]
 80001f8:	4a35      	ldr	r2, [pc, #212]	; (80002d0 <button_reading+0xf8>)
 80001fa:	54d1      	strb	r1, [r2, r3]

		//update the lasted button state in buffer 1
		debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(Button_GPIO_Port, Button_Pin);
 80001fc:	79fc      	ldrb	r4, [r7, #7]
 80001fe:	2101      	movs	r1, #1
 8000200:	4836      	ldr	r0, [pc, #216]	; (80002dc <button_reading+0x104>)
 8000202:	f001 f8c1 	bl	8001388 <HAL_GPIO_ReadPin>
 8000206:	4603      	mov	r3, r0
 8000208:	461a      	mov	r2, r3
 800020a:	4b33      	ldr	r3, [pc, #204]	; (80002d8 <button_reading+0x100>)
 800020c:	551a      	strb	r2, [r3, r4]

		//if the button state hold straight for around 40ms
		if((debounceButtonBuffer2[i] == debounceButtonBuffer1[i]) && (debounceButtonBuffer2[i] == debounceButtonBuffer3[i]))
 800020e:	79fb      	ldrb	r3, [r7, #7]
 8000210:	4a2f      	ldr	r2, [pc, #188]	; (80002d0 <button_reading+0xf8>)
 8000212:	5cd2      	ldrb	r2, [r2, r3]
 8000214:	79fb      	ldrb	r3, [r7, #7]
 8000216:	4930      	ldr	r1, [pc, #192]	; (80002d8 <button_reading+0x100>)
 8000218:	5ccb      	ldrb	r3, [r1, r3]
 800021a:	429a      	cmp	r2, r3
 800021c:	d14d      	bne.n	80002ba <button_reading+0xe2>
 800021e:	79fb      	ldrb	r3, [r7, #7]
 8000220:	4a2b      	ldr	r2, [pc, #172]	; (80002d0 <button_reading+0xf8>)
 8000222:	5cd2      	ldrb	r2, [r2, r3]
 8000224:	79fb      	ldrb	r3, [r7, #7]
 8000226:	492b      	ldr	r1, [pc, #172]	; (80002d4 <button_reading+0xfc>)
 8000228:	5ccb      	ldrb	r3, [r1, r3]
 800022a:	429a      	cmp	r2, r3
 800022c:	d145      	bne.n	80002ba <button_reading+0xe2>
		{
			//check for update buffer level 4
			if(debounceButtonBuffer3[i] != debounceButtonBuffer4[i])
 800022e:	79fb      	ldrb	r3, [r7, #7]
 8000230:	4a28      	ldr	r2, [pc, #160]	; (80002d4 <button_reading+0xfc>)
 8000232:	5cd2      	ldrb	r2, [r2, r3]
 8000234:	79fb      	ldrb	r3, [r7, #7]
 8000236:	492a      	ldr	r1, [pc, #168]	; (80002e0 <button_reading+0x108>)
 8000238:	5ccb      	ldrb	r3, [r1, r3]
 800023a:	429a      	cmp	r2, r3
 800023c:	d020      	beq.n	8000280 <button_reading+0xa8>
						//clear counter for hold event to prevent unexpected hold button
						counterForButtonPress1s[i] = 0; //counting from 0 after double pressed for button hold event
					}
				}
#endif
				debounceButtonBuffer4[i] = debounceButtonBuffer3[i];
 800023e:	79fa      	ldrb	r2, [r7, #7]
 8000240:	79fb      	ldrb	r3, [r7, #7]
 8000242:	4924      	ldr	r1, [pc, #144]	; (80002d4 <button_reading+0xfc>)
 8000244:	5c89      	ldrb	r1, [r1, r2]
 8000246:	4a26      	ldr	r2, [pc, #152]	; (80002e0 <button_reading+0x108>)
 8000248:	54d1      	strb	r1, [r2, r3]
				if(debounceButtonBuffer4[i] == BUTTON_IS_PRESSED){
 800024a:	79fb      	ldrb	r3, [r7, #7]
 800024c:	4a24      	ldr	r2, [pc, #144]	; (80002e0 <button_reading+0x108>)
 800024e:	5cd3      	ldrb	r3, [r2, r3]
 8000250:	2b00      	cmp	r3, #0
 8000252:	d10b      	bne.n	800026c <button_reading+0x94>
					/* Button trigger on */
					//set button press flags
					buttonFlags[i] = BUTTON_FLAG_SET;
 8000254:	79fb      	ldrb	r3, [r7, #7]
 8000256:	4a23      	ldr	r2, [pc, #140]	; (80002e4 <button_reading+0x10c>)
 8000258:	2101      	movs	r1, #1
 800025a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					//ste the first hold time out for button hold flags
					counterForButtonPress1s[i] = BUTTON_HOLD_TIMEOUT;
 800025e:	79fb      	ldrb	r3, [r7, #7]
 8000260:	4a21      	ldr	r2, [pc, #132]	; (80002e8 <button_reading+0x110>)
 8000262:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000266:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800026a:	e026      	b.n	80002ba <button_reading+0xe2>

				}
				else {
					//button buffer level 4 update state to button release
					//clear the counter and button hold flags
					counterForButtonPress1s[i] = 0;
 800026c:	79fb      	ldrb	r3, [r7, #7]
 800026e:	4a1e      	ldr	r2, [pc, #120]	; (80002e8 <button_reading+0x110>)
 8000270:	2100      	movs	r1, #0
 8000272:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					flagForButtonPress1s[i] = BUTTON_FLAG_CLEAR;
 8000276:	79fb      	ldrb	r3, [r7, #7]
 8000278:	4a1c      	ldr	r2, [pc, #112]	; (80002ec <button_reading+0x114>)
 800027a:	2100      	movs	r1, #0
 800027c:	54d1      	strb	r1, [r2, r3]
 800027e:	e01c      	b.n	80002ba <button_reading+0xe2>
				}
			} else if(debounceButtonBuffer4[i] == BUTTON_IS_PRESSED){
 8000280:	79fb      	ldrb	r3, [r7, #7]
 8000282:	4a17      	ldr	r2, [pc, #92]	; (80002e0 <button_reading+0x108>)
 8000284:	5cd3      	ldrb	r3, [r2, r3]
 8000286:	2b00      	cmp	r3, #0
 8000288:	d117      	bne.n	80002ba <button_reading+0xe2>
				//buffer level 3 == buffer level 4 == BUTTON PRESSED

				//if button is still hold, increase counter
				counterForButtonPress1s[i]--;
 800028a:	79fb      	ldrb	r3, [r7, #7]
 800028c:	4a16      	ldr	r2, [pc, #88]	; (80002e8 <button_reading+0x110>)
 800028e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000292:	3a01      	subs	r2, #1
 8000294:	b291      	uxth	r1, r2
 8000296:	4a14      	ldr	r2, [pc, #80]	; (80002e8 <button_reading+0x110>)
 8000298:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				//if counter reach hold threshold, set hold 1s flag and continue counting
				//the counter only reset to 0 when the button is release;
				if (counterForButtonPress1s[i] == 0){
 800029c:	79fb      	ldrb	r3, [r7, #7]
 800029e:	4a12      	ldr	r2, [pc, #72]	; (80002e8 <button_reading+0x110>)
 80002a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d108      	bne.n	80002ba <button_reading+0xe2>
					flagForButtonPress1s[i] = BUTTON_FLAG_SET;
 80002a8:	79fb      	ldrb	r3, [r7, #7]
 80002aa:	4a10      	ldr	r2, [pc, #64]	; (80002ec <button_reading+0x114>)
 80002ac:	2101      	movs	r1, #1
 80002ae:	54d1      	strb	r1, [r2, r3]
					counterForButtonPress1s[i] = AUTO_REPEAT_RATE;
 80002b0:	79fb      	ldrb	r3, [r7, #7]
 80002b2:	4a0d      	ldr	r2, [pc, #52]	; (80002e8 <button_reading+0x110>)
 80002b4:	2164      	movs	r1, #100	; 0x64
 80002b6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(unsigned char i = 0; i < NO_OF_BUTTONS; i++){
 80002ba:	79fb      	ldrb	r3, [r7, #7]
 80002bc:	3301      	adds	r3, #1
 80002be:	71fb      	strb	r3, [r7, #7]
 80002c0:	79fb      	ldrb	r3, [r7, #7]
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d08e      	beq.n	80001e4 <button_reading+0xc>
				//between button pressed and button hold, so the button hold will the the failed trigger button pressed
			}
		}
#endif
	}
}
 80002c6:	bf00      	nop
 80002c8:	bf00      	nop
 80002ca:	370c      	adds	r7, #12
 80002cc:	46bd      	mov	sp, r7
 80002ce:	bd90      	pop	{r4, r7, pc}
 80002d0:	20000090 	.word	0x20000090
 80002d4:	20000094 	.word	0x20000094
 80002d8:	2000008c 	.word	0x2000008c
 80002dc:	40010c00 	.word	0x40010c00
 80002e0:	20000098 	.word	0x20000098
 80002e4:	200000c0 	.word	0x200000c0
 80002e8:	200000a0 	.word	0x200000a0
 80002ec:	2000009c 	.word	0x2000009c

080002f0 <isButtonPressed>:

unsigned char isButtonPressed(unsigned char index){
 80002f0:	b480      	push	{r7}
 80002f2:	b083      	sub	sp, #12
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	4603      	mov	r3, r0
 80002f8:	71fb      	strb	r3, [r7, #7]
	if(index >= NO_OF_BUTTONS) return 0;
 80002fa:	79fb      	ldrb	r3, [r7, #7]
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d001      	beq.n	8000304 <isButtonPressed+0x14>
 8000300:	2300      	movs	r3, #0
 8000302:	e00d      	b.n	8000320 <isButtonPressed+0x30>
		//clear button flags and return
		buttonFlags[index] = BUTTON_FLAG_CLEAR;
		return 1;
	} else return 0;
#else
	if(buttonFlags[index] == BUTTON_FLAG_SET){
 8000304:	79fb      	ldrb	r3, [r7, #7]
 8000306:	4a09      	ldr	r2, [pc, #36]	; (800032c <isButtonPressed+0x3c>)
 8000308:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800030c:	2b01      	cmp	r3, #1
 800030e:	d106      	bne.n	800031e <isButtonPressed+0x2e>
		//clear button flags and return
		buttonFlags[index] = BUTTON_FLAG_CLEAR;
 8000310:	79fb      	ldrb	r3, [r7, #7]
 8000312:	4a06      	ldr	r2, [pc, #24]	; (800032c <isButtonPressed+0x3c>)
 8000314:	2100      	movs	r1, #0
 8000316:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800031a:	2301      	movs	r3, #1
 800031c:	e000      	b.n	8000320 <isButtonPressed+0x30>
	} else return 0;
 800031e:	2300      	movs	r3, #0
#endif
}
 8000320:	4618      	mov	r0, r3
 8000322:	370c      	adds	r7, #12
 8000324:	46bd      	mov	sp, r7
 8000326:	bc80      	pop	{r7}
 8000328:	4770      	bx	lr
 800032a:	bf00      	nop
 800032c:	200000c0 	.word	0x200000c0

08000330 <toggleLedRed>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// task function
void toggleLedRed(){
 8000330:	b580      	push	{r7, lr}
 8000332:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8000334:	2108      	movs	r1, #8
 8000336:	4802      	ldr	r0, [pc, #8]	; (8000340 <toggleLedRed+0x10>)
 8000338:	f001 f855 	bl	80013e6 <HAL_GPIO_TogglePin>
}
 800033c:	bf00      	nop
 800033e:	bd80      	pop	{r7, pc}
 8000340:	40010800 	.word	0x40010800

08000344 <toggleLedYellow>:
void toggleLedYellow(){
 8000344:	b580      	push	{r7, lr}
 8000346:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin);
 8000348:	2110      	movs	r1, #16
 800034a:	4802      	ldr	r0, [pc, #8]	; (8000354 <toggleLedYellow+0x10>)
 800034c:	f001 f84b 	bl	80013e6 <HAL_GPIO_TogglePin>
}
 8000350:	bf00      	nop
 8000352:	bd80      	pop	{r7, pc}
 8000354:	40010800 	.word	0x40010800

08000358 <toggleLedGreen>:
void toggleLedGreen(){
 8000358:	b580      	push	{r7, lr}
 800035a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 800035c:	2120      	movs	r1, #32
 800035e:	4802      	ldr	r0, [pc, #8]	; (8000368 <toggleLedGreen+0x10>)
 8000360:	f001 f841 	bl	80013e6 <HAL_GPIO_TogglePin>
}
 8000364:	bf00      	nop
 8000366:	bd80      	pop	{r7, pc}
 8000368:	40010800 	.word	0x40010800

0800036c <toggleLedBlue>:
void toggleLedBlue(){
 800036c:	b580      	push	{r7, lr}
 800036e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 8000370:	2140      	movs	r1, #64	; 0x40
 8000372:	4802      	ldr	r0, [pc, #8]	; (800037c <toggleLedBlue+0x10>)
 8000374:	f001 f837 	bl	80013e6 <HAL_GPIO_TogglePin>
}
 8000378:	bf00      	nop
 800037a:	bd80      	pop	{r7, pc}
 800037c:	40010800 	.word	0x40010800

08000380 <toggleLedWhite>:
void toggleLedWhite(){
 8000380:	b580      	push	{r7, lr}
 8000382:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_WHITE_GPIO_Port, LED_WHITE_Pin);
 8000384:	2180      	movs	r1, #128	; 0x80
 8000386:	4802      	ldr	r0, [pc, #8]	; (8000390 <toggleLedWhite+0x10>)
 8000388:	f001 f82d 	bl	80013e6 <HAL_GPIO_TogglePin>
}
 800038c:	bf00      	nop
 800038e:	bd80      	pop	{r7, pc}
 8000390:	40010800 	.word	0x40010800

08000394 <toggleLedPurple>:
void toggleLedPurple(){
 8000394:	b580      	push	{r7, lr}
 8000396:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_PURPLE_GPIO_Port, LED_PURPLE_Pin);
 8000398:	f44f 7180 	mov.w	r1, #256	; 0x100
 800039c:	4802      	ldr	r0, [pc, #8]	; (80003a8 <toggleLedPurple+0x14>)
 800039e:	f001 f822 	bl	80013e6 <HAL_GPIO_TogglePin>
}
 80003a2:	bf00      	nop
 80003a4:	bd80      	pop	{r7, pc}
 80003a6:	bf00      	nop
 80003a8:	40010800 	.word	0x40010800

080003ac <writeMessage>:

// write to uart for debugging as well as print time stamp
void writeMessage(char * str){
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b082      	sub	sp, #8
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1 , (void *)str, strlen(str), 10);
 80003b4:	6878      	ldr	r0, [r7, #4]
 80003b6:	f7ff fec9 	bl	800014c <strlen>
 80003ba:	4603      	mov	r3, r0
 80003bc:	b29a      	uxth	r2, r3
 80003be:	230a      	movs	r3, #10
 80003c0:	6879      	ldr	r1, [r7, #4]
 80003c2:	4803      	ldr	r0, [pc, #12]	; (80003d0 <writeMessage+0x24>)
 80003c4:	f002 f873 	bl	80024ae <HAL_UART_Transmit>
}
 80003c8:	bf00      	nop
 80003ca:	3708      	adds	r7, #8
 80003cc:	46bd      	mov	sp, r7
 80003ce:	bd80      	pop	{r7, pc}
 80003d0:	200000c4 	.word	0x200000c4

080003d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003d8:	f000 fc3c 	bl	8000c54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003dc:	f000 f842 	bl	8000464 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003e0:	f000 f8f2 	bl	80005c8 <MX_GPIO_Init>
  MX_TIM2_Init();
 80003e4:	f000 f87a 	bl	80004dc <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80003e8:	f000 f8c4 	bl	8000574 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80003ec:	4816      	ldr	r0, [pc, #88]	; (8000448 <main+0x74>)
 80003ee:	f001 fc7d 	bl	8001cec <HAL_TIM_Base_Start_IT>
  schedulerInit();
 80003f2:	f000 f949 	bl	8000688 <schedulerInit>
  //add button control task
#ifdef scheduling_button
  schedulerAddTask(initButton, 0, 0); // one shot task
  schedulerAddTask(button_reading, 5, 1); // scan button every 10 ms
#else
  initButton();
 80003f6:	f7ff feb1 	bl	800015c <initButton>
#endif
  schedulerAddTask(toggleLedRed, 50, 50); // 50 * 10 ms = 500 ms second period
 80003fa:	2232      	movs	r2, #50	; 0x32
 80003fc:	2132      	movs	r1, #50	; 0x32
 80003fe:	4813      	ldr	r0, [pc, #76]	; (800044c <main+0x78>)
 8000400:	f000 fa66 	bl	80008d0 <schedulerAddTask>
  schedulerAddTask(toggleLedYellow, 51, 100); // 1 second period task
 8000404:	2264      	movs	r2, #100	; 0x64
 8000406:	2133      	movs	r1, #51	; 0x33
 8000408:	4811      	ldr	r0, [pc, #68]	; (8000450 <main+0x7c>)
 800040a:	f000 fa61 	bl	80008d0 <schedulerAddTask>
  schedulerAddTask(toggleLedGreen, 52, 150);	// 1.5 second period task
 800040e:	2296      	movs	r2, #150	; 0x96
 8000410:	2134      	movs	r1, #52	; 0x34
 8000412:	4810      	ldr	r0, [pc, #64]	; (8000454 <main+0x80>)
 8000414:	f000 fa5c 	bl	80008d0 <schedulerAddTask>
  schedulerAddTask(toggleLedBlue, 53, 200); // 2 second period task
 8000418:	22c8      	movs	r2, #200	; 0xc8
 800041a:	2135      	movs	r1, #53	; 0x35
 800041c:	480e      	ldr	r0, [pc, #56]	; (8000458 <main+0x84>)
 800041e:	f000 fa57 	bl	80008d0 <schedulerAddTask>
  schedulerAddTask(toggleLedWhite, 54, 250); // 2.5 second period task
 8000422:	22fa      	movs	r2, #250	; 0xfa
 8000424:	2136      	movs	r1, #54	; 0x36
 8000426:	480d      	ldr	r0, [pc, #52]	; (800045c <main+0x88>)
 8000428:	f000 fa52 	bl	80008d0 <schedulerAddTask>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  schedulerDispatcher();
 800042c:	f000 fa7e 	bl	800092c <schedulerDispatcher>
	  if(isButtonPressed(0)){
 8000430:	2000      	movs	r0, #0
 8000432:	f7ff ff5d 	bl	80002f0 <isButtonPressed>
 8000436:	4603      	mov	r3, r0
 8000438:	2b00      	cmp	r3, #0
 800043a:	d0f7      	beq.n	800042c <main+0x58>
		  schedulerAddTask(toggleLedPurple, 0, 0);
 800043c:	2200      	movs	r2, #0
 800043e:	2100      	movs	r1, #0
 8000440:	4807      	ldr	r0, [pc, #28]	; (8000460 <main+0x8c>)
 8000442:	f000 fa45 	bl	80008d0 <schedulerAddTask>
	  schedulerDispatcher();
 8000446:	e7f1      	b.n	800042c <main+0x58>
 8000448:	20000108 	.word	0x20000108
 800044c:	08000331 	.word	0x08000331
 8000450:	08000345 	.word	0x08000345
 8000454:	08000359 	.word	0x08000359
 8000458:	0800036d 	.word	0x0800036d
 800045c:	08000381 	.word	0x08000381
 8000460:	08000395 	.word	0x08000395

08000464 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b090      	sub	sp, #64	; 0x40
 8000468:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800046a:	f107 0318 	add.w	r3, r7, #24
 800046e:	2228      	movs	r2, #40	; 0x28
 8000470:	2100      	movs	r1, #0
 8000472:	4618      	mov	r0, r3
 8000474:	f002 fce0 	bl	8002e38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000478:	1d3b      	adds	r3, r7, #4
 800047a:	2200      	movs	r2, #0
 800047c:	601a      	str	r2, [r3, #0]
 800047e:	605a      	str	r2, [r3, #4]
 8000480:	609a      	str	r2, [r3, #8]
 8000482:	60da      	str	r2, [r3, #12]
 8000484:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000486:	2302      	movs	r3, #2
 8000488:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800048a:	2301      	movs	r3, #1
 800048c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800048e:	2310      	movs	r3, #16
 8000490:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000492:	2300      	movs	r3, #0
 8000494:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000496:	f107 0318 	add.w	r3, r7, #24
 800049a:	4618      	mov	r0, r3
 800049c:	f000 ffbc 	bl	8001418 <HAL_RCC_OscConfig>
 80004a0:	4603      	mov	r3, r0
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d001      	beq.n	80004aa <SystemClock_Config+0x46>
  {
    Error_Handler();
 80004a6:	f000 f8e9 	bl	800067c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004aa:	230f      	movs	r3, #15
 80004ac:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80004ae:	2300      	movs	r3, #0
 80004b0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004b2:	2300      	movs	r3, #0
 80004b4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004b6:	2300      	movs	r3, #0
 80004b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004ba:	2300      	movs	r3, #0
 80004bc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004be:	1d3b      	adds	r3, r7, #4
 80004c0:	2100      	movs	r1, #0
 80004c2:	4618      	mov	r0, r3
 80004c4:	f001 fa28 	bl	8001918 <HAL_RCC_ClockConfig>
 80004c8:	4603      	mov	r3, r0
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d001      	beq.n	80004d2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80004ce:	f000 f8d5 	bl	800067c <Error_Handler>
  }
}
 80004d2:	bf00      	nop
 80004d4:	3740      	adds	r7, #64	; 0x40
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bd80      	pop	{r7, pc}
	...

080004dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b086      	sub	sp, #24
 80004e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004e2:	f107 0308 	add.w	r3, r7, #8
 80004e6:	2200      	movs	r2, #0
 80004e8:	601a      	str	r2, [r3, #0]
 80004ea:	605a      	str	r2, [r3, #4]
 80004ec:	609a      	str	r2, [r3, #8]
 80004ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004f0:	463b      	mov	r3, r7
 80004f2:	2200      	movs	r2, #0
 80004f4:	601a      	str	r2, [r3, #0]
 80004f6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80004f8:	4b1d      	ldr	r3, [pc, #116]	; (8000570 <MX_TIM2_Init+0x94>)
 80004fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004fe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 799;
 8000500:	4b1b      	ldr	r3, [pc, #108]	; (8000570 <MX_TIM2_Init+0x94>)
 8000502:	f240 321f 	movw	r2, #799	; 0x31f
 8000506:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000508:	4b19      	ldr	r3, [pc, #100]	; (8000570 <MX_TIM2_Init+0x94>)
 800050a:	2200      	movs	r2, #0
 800050c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 800050e:	4b18      	ldr	r3, [pc, #96]	; (8000570 <MX_TIM2_Init+0x94>)
 8000510:	2263      	movs	r2, #99	; 0x63
 8000512:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000514:	4b16      	ldr	r3, [pc, #88]	; (8000570 <MX_TIM2_Init+0x94>)
 8000516:	2200      	movs	r2, #0
 8000518:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800051a:	4b15      	ldr	r3, [pc, #84]	; (8000570 <MX_TIM2_Init+0x94>)
 800051c:	2200      	movs	r2, #0
 800051e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000520:	4813      	ldr	r0, [pc, #76]	; (8000570 <MX_TIM2_Init+0x94>)
 8000522:	f001 fb93 	bl	8001c4c <HAL_TIM_Base_Init>
 8000526:	4603      	mov	r3, r0
 8000528:	2b00      	cmp	r3, #0
 800052a:	d001      	beq.n	8000530 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800052c:	f000 f8a6 	bl	800067c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000530:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000534:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000536:	f107 0308 	add.w	r3, r7, #8
 800053a:	4619      	mov	r1, r3
 800053c:	480c      	ldr	r0, [pc, #48]	; (8000570 <MX_TIM2_Init+0x94>)
 800053e:	f001 fd29 	bl	8001f94 <HAL_TIM_ConfigClockSource>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
 8000546:	d001      	beq.n	800054c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000548:	f000 f898 	bl	800067c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800054c:	2300      	movs	r3, #0
 800054e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000550:	2300      	movs	r3, #0
 8000552:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000554:	463b      	mov	r3, r7
 8000556:	4619      	mov	r1, r3
 8000558:	4805      	ldr	r0, [pc, #20]	; (8000570 <MX_TIM2_Init+0x94>)
 800055a:	f001 fef1 	bl	8002340 <HAL_TIMEx_MasterConfigSynchronization>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	d001      	beq.n	8000568 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000564:	f000 f88a 	bl	800067c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000568:	bf00      	nop
 800056a:	3718      	adds	r7, #24
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	20000108 	.word	0x20000108

08000574 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000578:	4b11      	ldr	r3, [pc, #68]	; (80005c0 <MX_USART1_UART_Init+0x4c>)
 800057a:	4a12      	ldr	r2, [pc, #72]	; (80005c4 <MX_USART1_UART_Init+0x50>)
 800057c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800057e:	4b10      	ldr	r3, [pc, #64]	; (80005c0 <MX_USART1_UART_Init+0x4c>)
 8000580:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000584:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000586:	4b0e      	ldr	r3, [pc, #56]	; (80005c0 <MX_USART1_UART_Init+0x4c>)
 8000588:	2200      	movs	r2, #0
 800058a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800058c:	4b0c      	ldr	r3, [pc, #48]	; (80005c0 <MX_USART1_UART_Init+0x4c>)
 800058e:	2200      	movs	r2, #0
 8000590:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000592:	4b0b      	ldr	r3, [pc, #44]	; (80005c0 <MX_USART1_UART_Init+0x4c>)
 8000594:	2200      	movs	r2, #0
 8000596:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000598:	4b09      	ldr	r3, [pc, #36]	; (80005c0 <MX_USART1_UART_Init+0x4c>)
 800059a:	220c      	movs	r2, #12
 800059c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800059e:	4b08      	ldr	r3, [pc, #32]	; (80005c0 <MX_USART1_UART_Init+0x4c>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80005a4:	4b06      	ldr	r3, [pc, #24]	; (80005c0 <MX_USART1_UART_Init+0x4c>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80005aa:	4805      	ldr	r0, [pc, #20]	; (80005c0 <MX_USART1_UART_Init+0x4c>)
 80005ac:	f001 ff32 	bl	8002414 <HAL_UART_Init>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80005b6:	f000 f861 	bl	800067c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80005ba:	bf00      	nop
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	200000c4 	.word	0x200000c4
 80005c4:	40013800 	.word	0x40013800

080005c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b086      	sub	sp, #24
 80005cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ce:	f107 0308 	add.w	r3, r7, #8
 80005d2:	2200      	movs	r2, #0
 80005d4:	601a      	str	r2, [r3, #0]
 80005d6:	605a      	str	r2, [r3, #4]
 80005d8:	609a      	str	r2, [r3, #8]
 80005da:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005dc:	4b1e      	ldr	r3, [pc, #120]	; (8000658 <MX_GPIO_Init+0x90>)
 80005de:	699b      	ldr	r3, [r3, #24]
 80005e0:	4a1d      	ldr	r2, [pc, #116]	; (8000658 <MX_GPIO_Init+0x90>)
 80005e2:	f043 0304 	orr.w	r3, r3, #4
 80005e6:	6193      	str	r3, [r2, #24]
 80005e8:	4b1b      	ldr	r3, [pc, #108]	; (8000658 <MX_GPIO_Init+0x90>)
 80005ea:	699b      	ldr	r3, [r3, #24]
 80005ec:	f003 0304 	and.w	r3, r3, #4
 80005f0:	607b      	str	r3, [r7, #4]
 80005f2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005f4:	4b18      	ldr	r3, [pc, #96]	; (8000658 <MX_GPIO_Init+0x90>)
 80005f6:	699b      	ldr	r3, [r3, #24]
 80005f8:	4a17      	ldr	r2, [pc, #92]	; (8000658 <MX_GPIO_Init+0x90>)
 80005fa:	f043 0308 	orr.w	r3, r3, #8
 80005fe:	6193      	str	r3, [r2, #24]
 8000600:	4b15      	ldr	r3, [pc, #84]	; (8000658 <MX_GPIO_Init+0x90>)
 8000602:	699b      	ldr	r3, [r3, #24]
 8000604:	f003 0308 	and.w	r3, r3, #8
 8000608:	603b      	str	r3, [r7, #0]
 800060a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_Pin|LED_YELLOW_Pin|LED_GREEN_Pin|LED_BLUE_Pin
 800060c:	2200      	movs	r2, #0
 800060e:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
 8000612:	4812      	ldr	r0, [pc, #72]	; (800065c <MX_GPIO_Init+0x94>)
 8000614:	f000 fecf 	bl	80013b6 <HAL_GPIO_WritePin>
                          |LED_WHITE_Pin|LED_PURPLE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_RED_Pin LED_YELLOW_Pin LED_GREEN_Pin LED_BLUE_Pin
                           LED_WHITE_Pin LED_PURPLE_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_YELLOW_Pin|LED_GREEN_Pin|LED_BLUE_Pin
 8000618:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 800061c:	60bb      	str	r3, [r7, #8]
                          |LED_WHITE_Pin|LED_PURPLE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800061e:	2301      	movs	r3, #1
 8000620:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000622:	2300      	movs	r3, #0
 8000624:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000626:	2302      	movs	r3, #2
 8000628:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800062a:	f107 0308 	add.w	r3, r7, #8
 800062e:	4619      	mov	r1, r3
 8000630:	480a      	ldr	r0, [pc, #40]	; (800065c <MX_GPIO_Init+0x94>)
 8000632:	f000 fd2f 	bl	8001094 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 8000636:	2301      	movs	r3, #1
 8000638:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800063a:	2300      	movs	r3, #0
 800063c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800063e:	2301      	movs	r3, #1
 8000640:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8000642:	f107 0308 	add.w	r3, r7, #8
 8000646:	4619      	mov	r1, r3
 8000648:	4805      	ldr	r0, [pc, #20]	; (8000660 <MX_GPIO_Init+0x98>)
 800064a:	f000 fd23 	bl	8001094 <HAL_GPIO_Init>

}
 800064e:	bf00      	nop
 8000650:	3718      	adds	r7, #24
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	40021000 	.word	0x40021000
 800065c:	40010800 	.word	0x40010800
 8000660:	40010c00 	.word	0x40010c00

08000664 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
	schedulerUpdate();
 800066c:	f000 f81a 	bl	80006a4 <schedulerUpdate>
#ifndef scheduling_button
	button_reading();
 8000670:	f7ff fdb2 	bl	80001d8 <button_reading>
#endif
}
 8000674:	bf00      	nop
 8000676:	3708      	adds	r7, #8
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}

0800067c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000680:	b672      	cpsid	i
}
 8000682:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000684:	e7fe      	b.n	8000684 <Error_Handler+0x8>
	...

08000688 <schedulerInit>:
ERROR_CODE ErrorCode = NO_ERROR;
ERROR_CODE LastErrorCode = NO_ERROR;

char str[50];

void schedulerInit(){
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
	TaskList.head = NULL;
 800068c:	4b04      	ldr	r3, [pc, #16]	; (80006a0 <schedulerInit+0x18>)
 800068e:	2200      	movs	r2, #0
 8000690:	601a      	str	r2, [r3, #0]
	TaskList.size = 0;
 8000692:	4b03      	ldr	r3, [pc, #12]	; (80006a0 <schedulerInit+0x18>)
 8000694:	2200      	movs	r2, #0
 8000696:	605a      	str	r2, [r3, #4]
}
 8000698:	bf00      	nop
 800069a:	46bd      	mov	sp, r7
 800069c:	bc80      	pop	{r7}
 800069e:	4770      	bx	lr
 80006a0:	20000150 	.word	0x20000150

080006a4 <schedulerUpdate>:

void schedulerUpdate(){
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
	// checking the head of task list, and decrease the delay time
	timestamp+=10;  // increase 10 ms each
 80006a8:	4b0b      	ldr	r3, [pc, #44]	; (80006d8 <schedulerUpdate+0x34>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	330a      	adds	r3, #10
 80006ae:	4a0a      	ldr	r2, [pc, #40]	; (80006d8 <schedulerUpdate+0x34>)
 80006b0:	6013      	str	r3, [r2, #0]
	// report back to uart channel the timestamp value
	if(TaskList.size && TaskList.head -> Delay > 0) TaskList.head -> Delay--;
 80006b2:	4b0a      	ldr	r3, [pc, #40]	; (80006dc <schedulerUpdate+0x38>)
 80006b4:	685b      	ldr	r3, [r3, #4]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d009      	beq.n	80006ce <schedulerUpdate+0x2a>
 80006ba:	4b08      	ldr	r3, [pc, #32]	; (80006dc <schedulerUpdate+0x38>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	689b      	ldr	r3, [r3, #8]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d004      	beq.n	80006ce <schedulerUpdate+0x2a>
 80006c4:	4b05      	ldr	r3, [pc, #20]	; (80006dc <schedulerUpdate+0x38>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	689a      	ldr	r2, [r3, #8]
 80006ca:	3a01      	subs	r2, #1
 80006cc:	609a      	str	r2, [r3, #8]
}
 80006ce:	bf00      	nop
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bc80      	pop	{r7}
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	200000a4 	.word	0x200000a4
 80006dc:	20000150 	.word	0x20000150

080006e0 <deleteTask>:

int deleteTask(uint32_t ID){
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b084      	sub	sp, #16
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
    if(TaskList.size == 0)
 80006e8:	4b3d      	ldr	r3, [pc, #244]	; (80007e0 <deleteTask+0x100>)
 80006ea:	685b      	ldr	r3, [r3, #4]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d101      	bne.n	80006f4 <deleteTask+0x14>
        // The list is empty, invalid operation
        return 1;
 80006f0:	2301      	movs	r3, #1
 80006f2:	e070      	b.n	80007d6 <deleteTask+0xf6>

    TaskControlBlock_t * curr = TaskList.head;
 80006f4:	4b3a      	ldr	r3, [pc, #232]	; (80007e0 <deleteTask+0x100>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	60fb      	str	r3, [r7, #12]
    TaskControlBlock_t * prev = NULL;
 80006fa:	2300      	movs	r3, #0
 80006fc:	60bb      	str	r3, [r7, #8]

    while(curr != NULL){
 80006fe:	e066      	b.n	80007ce <deleteTask+0xee>
        if(ID == curr -> TaskID){
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	685b      	ldr	r3, [r3, #4]
 8000704:	687a      	ldr	r2, [r7, #4]
 8000706:	429a      	cmp	r2, r3
 8000708:	d15c      	bne.n	80007c4 <deleteTask+0xe4>
            // found task
            if(prev == NULL && curr -> NextTask == NULL){
 800070a:	68bb      	ldr	r3, [r7, #8]
 800070c:	2b00      	cmp	r3, #0
 800070e:	d111      	bne.n	8000734 <deleteTask+0x54>
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	691b      	ldr	r3, [r3, #16]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d10d      	bne.n	8000734 <deleteTask+0x54>
                // delete at the head of the list only 1 element
                free(curr);
 8000718:	68f8      	ldr	r0, [r7, #12]
 800071a:	f002 fb85 	bl	8002e28 <free>
                TaskList.head = NULL;
 800071e:	4b30      	ldr	r3, [pc, #192]	; (80007e0 <deleteTask+0x100>)
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
                TaskList.size--;
 8000724:	4b2e      	ldr	r3, [pc, #184]	; (80007e0 <deleteTask+0x100>)
 8000726:	685b      	ldr	r3, [r3, #4]
 8000728:	3b01      	subs	r3, #1
 800072a:	4a2d      	ldr	r2, [pc, #180]	; (80007e0 <deleteTask+0x100>)
 800072c:	6053      	str	r3, [r2, #4]
                // after deletion, set curr to null pointer to exit the loop
				curr = NULL;
 800072e:	2300      	movs	r3, #0
 8000730:	60fb      	str	r3, [r7, #12]
 8000732:	e04c      	b.n	80007ce <deleteTask+0xee>
            } else if (prev == NULL){
 8000734:	68bb      	ldr	r3, [r7, #8]
 8000736:	2b00      	cmp	r3, #0
 8000738:	d117      	bne.n	800076a <deleteTask+0x8a>
                // delete at the head of the list has more than 1 elements
                curr -> NextTask -> Delay += curr -> Delay;
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	691b      	ldr	r3, [r3, #16]
 800073e:	6899      	ldr	r1, [r3, #8]
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	689a      	ldr	r2, [r3, #8]
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	691b      	ldr	r3, [r3, #16]
 8000748:	440a      	add	r2, r1
 800074a:	609a      	str	r2, [r3, #8]
                TaskList.head = curr -> NextTask;
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	691b      	ldr	r3, [r3, #16]
 8000750:	4a23      	ldr	r2, [pc, #140]	; (80007e0 <deleteTask+0x100>)
 8000752:	6013      	str	r3, [r2, #0]
                free(curr);
 8000754:	68f8      	ldr	r0, [r7, #12]
 8000756:	f002 fb67 	bl	8002e28 <free>
                TaskList.size--;
 800075a:	4b21      	ldr	r3, [pc, #132]	; (80007e0 <deleteTask+0x100>)
 800075c:	685b      	ldr	r3, [r3, #4]
 800075e:	3b01      	subs	r3, #1
 8000760:	4a1f      	ldr	r2, [pc, #124]	; (80007e0 <deleteTask+0x100>)
 8000762:	6053      	str	r3, [r2, #4]
                // after deletion, set curr to null pointer to exit the loop
				curr = NULL;
 8000764:	2300      	movs	r3, #0
 8000766:	60fb      	str	r3, [r7, #12]
 8000768:	e031      	b.n	80007ce <deleteTask+0xee>
            } else if (curr -> NextTask == NULL){
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	691b      	ldr	r3, [r3, #16]
 800076e:	2b00      	cmp	r3, #0
 8000770:	d10d      	bne.n	800078e <deleteTask+0xae>
                // delete at the end of the list
                free(curr);
 8000772:	68f8      	ldr	r0, [r7, #12]
 8000774:	f002 fb58 	bl	8002e28 <free>
                prev -> NextTask = NULL;
 8000778:	68bb      	ldr	r3, [r7, #8]
 800077a:	2200      	movs	r2, #0
 800077c:	611a      	str	r2, [r3, #16]
                TaskList.size--;
 800077e:	4b18      	ldr	r3, [pc, #96]	; (80007e0 <deleteTask+0x100>)
 8000780:	685b      	ldr	r3, [r3, #4]
 8000782:	3b01      	subs	r3, #1
 8000784:	4a16      	ldr	r2, [pc, #88]	; (80007e0 <deleteTask+0x100>)
 8000786:	6053      	str	r3, [r2, #4]
                // after deletion, set curr to null pointer to exit the loop
				curr = NULL;
 8000788:	2300      	movs	r3, #0
 800078a:	60fb      	str	r3, [r7, #12]
 800078c:	e01f      	b.n	80007ce <deleteTask+0xee>
            } else {
                // delete in the middle of the list
                curr -> NextTask -> Delay += curr -> Delay;
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	691b      	ldr	r3, [r3, #16]
 8000792:	6899      	ldr	r1, [r3, #8]
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	689a      	ldr	r2, [r3, #8]
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	691b      	ldr	r3, [r3, #16]
 800079c:	440a      	add	r2, r1
 800079e:	609a      	str	r2, [r3, #8]
                prev -> NextTask = curr -> NextTask;
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	691a      	ldr	r2, [r3, #16]
 80007a4:	68bb      	ldr	r3, [r7, #8]
 80007a6:	611a      	str	r2, [r3, #16]
                curr -> NextTask = NULL;
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	2200      	movs	r2, #0
 80007ac:	611a      	str	r2, [r3, #16]
                free(curr);
 80007ae:	68f8      	ldr	r0, [r7, #12]
 80007b0:	f002 fb3a 	bl	8002e28 <free>
                TaskList.size--;
 80007b4:	4b0a      	ldr	r3, [pc, #40]	; (80007e0 <deleteTask+0x100>)
 80007b6:	685b      	ldr	r3, [r3, #4]
 80007b8:	3b01      	subs	r3, #1
 80007ba:	4a09      	ldr	r2, [pc, #36]	; (80007e0 <deleteTask+0x100>)
 80007bc:	6053      	str	r3, [r2, #4]
                // after deletion, set curr to null pointer to exit the loop
				curr = NULL;
 80007be:	2300      	movs	r3, #0
 80007c0:	60fb      	str	r3, [r7, #12]
 80007c2:	e004      	b.n	80007ce <deleteTask+0xee>
            }

        } else {
            // update current and previous pointer
            prev = curr;
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	60bb      	str	r3, [r7, #8]
            curr = curr -> NextTask;
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	691b      	ldr	r3, [r3, #16]
 80007cc:	60fb      	str	r3, [r7, #12]
    while(curr != NULL){
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d195      	bne.n	8000700 <deleteTask+0x20>
        }
    }

    // No task found
    return 0;
 80007d4:	2300      	movs	r3, #0
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	3710      	adds	r7, #16
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	20000150 	.word	0x20000150

080007e4 <schedulerDeleteTask>:

RETURN_CODE schedulerDeleteTask(const unsigned char TaskID){
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b084      	sub	sp, #16
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	4603      	mov	r3, r0
 80007ec:	71fb      	strb	r3, [r7, #7]
	RETURN_CODE returnCode;
	if(deleteTask(TaskID))
 80007ee:	79fb      	ldrb	r3, [r7, #7]
 80007f0:	4618      	mov	r0, r3
 80007f2:	f7ff ff75 	bl	80006e0 <deleteTask>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d002      	beq.n	8000802 <schedulerDeleteTask+0x1e>
		// no task found or the task list is empty
		returnCode = ERROR_SCH_CANNOT_DELETE_TASK;
 80007fc:	2302      	movs	r3, #2
 80007fe:	73fb      	strb	r3, [r7, #15]
 8000800:	e001      	b.n	8000806 <schedulerDeleteTask+0x22>
	else
		// deletion operate normally
		returnCode = NO_ERROR;
 8000802:	2300      	movs	r3, #0
 8000804:	73fb      	strb	r3, [r7, #15]
	return returnCode;
 8000806:	7bfb      	ldrb	r3, [r7, #15]
}
 8000808:	4618      	mov	r0, r3
 800080a:	3710      	adds	r7, #16
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}

08000810 <addTask>:

int addTask(TaskControlBlock_t * task){
 8000810:	b480      	push	{r7}
 8000812:	b087      	sub	sp, #28
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
    if(TaskList.size >= SCH_MAX_TASKS)
 8000818:	4b2c      	ldr	r3, [pc, #176]	; (80008cc <addTask+0xbc>)
 800081a:	685b      	ldr	r3, [r3, #4]
 800081c:	2b1f      	cmp	r3, #31
 800081e:	dd01      	ble.n	8000824 <addTask+0x14>
        // the task list is full
        return 1;
 8000820:	2301      	movs	r3, #1
 8000822:	e04d      	b.n	80008c0 <addTask+0xb0>
    if(TaskList.size == 0){
 8000824:	4b29      	ldr	r3, [pc, #164]	; (80008cc <addTask+0xbc>)
 8000826:	685b      	ldr	r3, [r3, #4]
 8000828:	2b00      	cmp	r3, #0
 800082a:	d109      	bne.n	8000840 <addTask+0x30>
        // the task list is empty
        TaskList.head = task;
 800082c:	4a27      	ldr	r2, [pc, #156]	; (80008cc <addTask+0xbc>)
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	6013      	str	r3, [r2, #0]
        TaskList.size++;
 8000832:	4b26      	ldr	r3, [pc, #152]	; (80008cc <addTask+0xbc>)
 8000834:	685b      	ldr	r3, [r3, #4]
 8000836:	3301      	adds	r3, #1
 8000838:	4a24      	ldr	r2, [pc, #144]	; (80008cc <addTask+0xbc>)
 800083a:	6053      	str	r3, [r2, #4]
        return 0;
 800083c:	2300      	movs	r3, #0
 800083e:	e03f      	b.n	80008c0 <addTask+0xb0>
    }

    TaskControlBlock_t * curr = TaskList.head;
 8000840:	4b22      	ldr	r3, [pc, #136]	; (80008cc <addTask+0xbc>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	617b      	str	r3, [r7, #20]
    TaskControlBlock_t * prev = NULL;
 8000846:	2300      	movs	r3, #0
 8000848:	613b      	str	r3, [r7, #16]
    int found = 0;
 800084a:	2300      	movs	r3, #0
 800084c:	60fb      	str	r3, [r7, #12]
    while(!found){
 800084e:	e033      	b.n	80008b8 <addTask+0xa8>
        // Using greater or equal mean that new task will be insert after the task that have the same delay time
        if(curr != NULL && task-> Delay >= curr-> Delay){
 8000850:	697b      	ldr	r3, [r7, #20]
 8000852:	2b00      	cmp	r3, #0
 8000854:	d012      	beq.n	800087c <addTask+0x6c>
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	689a      	ldr	r2, [r3, #8]
 800085a:	697b      	ldr	r3, [r7, #20]
 800085c:	689b      	ldr	r3, [r3, #8]
 800085e:	429a      	cmp	r2, r3
 8000860:	d30c      	bcc.n	800087c <addTask+0x6c>
            // decrease task starting time stamp
            task -> Delay -= curr -> Delay;
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	689a      	ldr	r2, [r3, #8]
 8000866:	697b      	ldr	r3, [r7, #20]
 8000868:	689b      	ldr	r3, [r3, #8]
 800086a:	1ad2      	subs	r2, r2, r3
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	609a      	str	r2, [r3, #8]
            // update current and previous pointer
            prev = curr;
 8000870:	697b      	ldr	r3, [r7, #20]
 8000872:	613b      	str	r3, [r7, #16]
            curr = curr -> NextTask;
 8000874:	697b      	ldr	r3, [r7, #20]
 8000876:	691b      	ldr	r3, [r3, #16]
 8000878:	617b      	str	r3, [r7, #20]
 800087a:	e01d      	b.n	80008b8 <addTask+0xa8>
             *
             *  head            prev         curr
             *
             *  task_0 -> ... task_prev -> task_curr -> task_next -> ... -> NULL;
             */
            task -> NextTask = curr;
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	697a      	ldr	r2, [r7, #20]
 8000880:	611a      	str	r2, [r3, #16]
            // Check if prev is not NULL, if null the the insertion is at the head of the list
            if(prev != NULL) prev -> NextTask = task;
 8000882:	693b      	ldr	r3, [r7, #16]
 8000884:	2b00      	cmp	r3, #0
 8000886:	d003      	beq.n	8000890 <addTask+0x80>
 8000888:	693b      	ldr	r3, [r7, #16]
 800088a:	687a      	ldr	r2, [r7, #4]
 800088c:	611a      	str	r2, [r3, #16]
 800088e:	e002      	b.n	8000896 <addTask+0x86>
            else TaskList.head = task;
 8000890:	4a0e      	ldr	r2, [pc, #56]	; (80008cc <addTask+0xbc>)
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	6013      	str	r3, [r2, #0]

            // at this point, task -> delay must be less than curr -> Delay,
            // if curr != NULL, we update delay time for curr task
            if(curr != NULL) curr -> Delay -= task -> Delay;
 8000896:	697b      	ldr	r3, [r7, #20]
 8000898:	2b00      	cmp	r3, #0
 800089a:	d006      	beq.n	80008aa <addTask+0x9a>
 800089c:	697b      	ldr	r3, [r7, #20]
 800089e:	689a      	ldr	r2, [r3, #8]
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	689b      	ldr	r3, [r3, #8]
 80008a4:	1ad2      	subs	r2, r2, r3
 80008a6:	697b      	ldr	r3, [r7, #20]
 80008a8:	609a      	str	r2, [r3, #8]
            TaskList.size++;
 80008aa:	4b08      	ldr	r3, [pc, #32]	; (80008cc <addTask+0xbc>)
 80008ac:	685b      	ldr	r3, [r3, #4]
 80008ae:	3301      	adds	r3, #1
 80008b0:	4a06      	ldr	r2, [pc, #24]	; (80008cc <addTask+0xbc>)
 80008b2:	6053      	str	r3, [r2, #4]
            found = 1;
 80008b4:	2301      	movs	r3, #1
 80008b6:	60fb      	str	r3, [r7, #12]
    while(!found){
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d0c8      	beq.n	8000850 <addTask+0x40>
        }
    }
    return 0;
 80008be:	2300      	movs	r3, #0
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	371c      	adds	r7, #28
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bc80      	pop	{r7}
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop
 80008cc:	20000150 	.word	0x20000150

080008d0 <schedulerAddTask>:

unsigned char schedulerAddTask(void (*functionPointer)(), unsigned int DELAY, unsigned int PERIOD){
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b086      	sub	sp, #24
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	60f8      	str	r0, [r7, #12]
 80008d8:	60b9      	str	r1, [r7, #8]
 80008da:	607a      	str	r2, [r7, #4]
	// allocate a new memory chunk to store task control block
	TaskControlBlock_t * task = (TaskControlBlock_t *)malloc(sizeof(TaskControlBlock_t));
 80008dc:	2014      	movs	r0, #20
 80008de:	f002 fa9b 	bl	8002e18 <malloc>
 80008e2:	4603      	mov	r3, r0
 80008e4:	617b      	str	r3, [r7, #20]

	// copy task parameter
	task -> Delay 		= DELAY;
 80008e6:	697b      	ldr	r3, [r7, #20]
 80008e8:	68ba      	ldr	r2, [r7, #8]
 80008ea:	609a      	str	r2, [r3, #8]
	task -> Period 		= PERIOD;
 80008ec:	697b      	ldr	r3, [r7, #20]
 80008ee:	687a      	ldr	r2, [r7, #4]
 80008f0:	60da      	str	r2, [r3, #12]
	task -> TaskID 		= (++TaskIDCounter)%256;
 80008f2:	4b0d      	ldr	r3, [pc, #52]	; (8000928 <schedulerAddTask+0x58>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	3301      	adds	r3, #1
 80008f8:	4a0b      	ldr	r2, [pc, #44]	; (8000928 <schedulerAddTask+0x58>)
 80008fa:	6013      	str	r3, [r2, #0]
 80008fc:	4b0a      	ldr	r3, [pc, #40]	; (8000928 <schedulerAddTask+0x58>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	b2da      	uxtb	r2, r3
 8000902:	697b      	ldr	r3, [r7, #20]
 8000904:	605a      	str	r2, [r3, #4]
	task -> TaskPointer = functionPointer;
 8000906:	697b      	ldr	r3, [r7, #20]
 8000908:	68fa      	ldr	r2, [r7, #12]
 800090a:	601a      	str	r2, [r3, #0]
	task -> NextTask 	= NULL;
 800090c:	697b      	ldr	r3, [r7, #20]
 800090e:	2200      	movs	r2, #0
 8000910:	611a      	str	r2, [r3, #16]

	// currently we dont check add task exit code
	addTask(task);
 8000912:	6978      	ldr	r0, [r7, #20]
 8000914:	f7ff ff7c 	bl	8000810 <addTask>

	return task -> TaskID;
 8000918:	697b      	ldr	r3, [r7, #20]
 800091a:	685b      	ldr	r3, [r3, #4]
 800091c:	b2db      	uxtb	r3, r3
}
 800091e:	4618      	mov	r0, r3
 8000920:	3718      	adds	r7, #24
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	200000a8 	.word	0x200000a8

0800092c <schedulerDispatcher>:

void schedulerDispatcher(){
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
	while(TaskList.size != 0 &&TaskList.head -> Delay == 0){
 8000932:	e029      	b.n	8000988 <schedulerDispatcher+0x5c>
		// report timeout task
		uint32_t time_point = timestamp;
 8000934:	4b1c      	ldr	r3, [pc, #112]	; (80009a8 <schedulerDispatcher+0x7c>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	607b      	str	r3, [r7, #4]
		sprintf(str, "TaskID: %ld timeout at timestamp: %ld ms\r\n", TaskList.head -> TaskID, time_point);
 800093a:	4b1c      	ldr	r3, [pc, #112]	; (80009ac <schedulerDispatcher+0x80>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	685a      	ldr	r2, [r3, #4]
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	491b      	ldr	r1, [pc, #108]	; (80009b0 <schedulerDispatcher+0x84>)
 8000944:	481b      	ldr	r0, [pc, #108]	; (80009b4 <schedulerDispatcher+0x88>)
 8000946:	f002 fb35 	bl	8002fb4 <siprintf>
		writeMessage(str);
 800094a:	481a      	ldr	r0, [pc, #104]	; (80009b4 <schedulerDispatcher+0x88>)
 800094c:	f7ff fd2e 	bl	80003ac <writeMessage>
		// execute all task timed out
		(*TaskList.head -> TaskPointer)();
 8000950:	4b16      	ldr	r3, [pc, #88]	; (80009ac <schedulerDispatcher+0x80>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	4798      	blx	r3
		// add the task back to task list if the task is periodic
		if(TaskList.head -> Period) schedulerAddTask(TaskList.head -> TaskPointer, TaskList.head -> Period, TaskList.head -> Period);
 8000958:	4b14      	ldr	r3, [pc, #80]	; (80009ac <schedulerDispatcher+0x80>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	68db      	ldr	r3, [r3, #12]
 800095e:	2b00      	cmp	r3, #0
 8000960:	d00b      	beq.n	800097a <schedulerDispatcher+0x4e>
 8000962:	4b12      	ldr	r3, [pc, #72]	; (80009ac <schedulerDispatcher+0x80>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	6818      	ldr	r0, [r3, #0]
 8000968:	4b10      	ldr	r3, [pc, #64]	; (80009ac <schedulerDispatcher+0x80>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	68d9      	ldr	r1, [r3, #12]
 800096e:	4b0f      	ldr	r3, [pc, #60]	; (80009ac <schedulerDispatcher+0x80>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	68db      	ldr	r3, [r3, #12]
 8000974:	461a      	mov	r2, r3
 8000976:	f7ff ffab 	bl	80008d0 <schedulerAddTask>
		// delete complete task
		schedulerDeleteTask(TaskList.head -> TaskID);
 800097a:	4b0c      	ldr	r3, [pc, #48]	; (80009ac <schedulerDispatcher+0x80>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	685b      	ldr	r3, [r3, #4]
 8000980:	b2db      	uxtb	r3, r3
 8000982:	4618      	mov	r0, r3
 8000984:	f7ff ff2e 	bl	80007e4 <schedulerDeleteTask>
	while(TaskList.size != 0 &&TaskList.head -> Delay == 0){
 8000988:	4b08      	ldr	r3, [pc, #32]	; (80009ac <schedulerDispatcher+0x80>)
 800098a:	685b      	ldr	r3, [r3, #4]
 800098c:	2b00      	cmp	r3, #0
 800098e:	d004      	beq.n	800099a <schedulerDispatcher+0x6e>
 8000990:	4b06      	ldr	r3, [pc, #24]	; (80009ac <schedulerDispatcher+0x80>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	689b      	ldr	r3, [r3, #8]
 8000996:	2b00      	cmp	r3, #0
 8000998:	d0cc      	beq.n	8000934 <schedulerDispatcher+0x8>
	}
	schedulerReportStatus();
 800099a:	f000 f80d 	bl	80009b8 <schedulerReportStatus>
	//schedulerSleep();
}
 800099e:	bf00      	nop
 80009a0:	3708      	adds	r7, #8
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	200000a4 	.word	0x200000a4
 80009ac:	20000150 	.word	0x20000150
 80009b0:	080036d4 	.word	0x080036d4
 80009b4:	20000158 	.word	0x20000158

080009b8 <schedulerReportStatus>:

int ErrorTickCount = 0;
void schedulerReportStatus(){
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
				ErrorCode = 0; //reset error code
			}
		}
	}
#endif
};
 80009bc:	bf00      	nop
 80009be:	46bd      	mov	sp, r7
 80009c0:	bc80      	pop	{r7}
 80009c2:	4770      	bx	lr

080009c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b085      	sub	sp, #20
 80009c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80009ca:	4b15      	ldr	r3, [pc, #84]	; (8000a20 <HAL_MspInit+0x5c>)
 80009cc:	699b      	ldr	r3, [r3, #24]
 80009ce:	4a14      	ldr	r2, [pc, #80]	; (8000a20 <HAL_MspInit+0x5c>)
 80009d0:	f043 0301 	orr.w	r3, r3, #1
 80009d4:	6193      	str	r3, [r2, #24]
 80009d6:	4b12      	ldr	r3, [pc, #72]	; (8000a20 <HAL_MspInit+0x5c>)
 80009d8:	699b      	ldr	r3, [r3, #24]
 80009da:	f003 0301 	and.w	r3, r3, #1
 80009de:	60bb      	str	r3, [r7, #8]
 80009e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009e2:	4b0f      	ldr	r3, [pc, #60]	; (8000a20 <HAL_MspInit+0x5c>)
 80009e4:	69db      	ldr	r3, [r3, #28]
 80009e6:	4a0e      	ldr	r2, [pc, #56]	; (8000a20 <HAL_MspInit+0x5c>)
 80009e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009ec:	61d3      	str	r3, [r2, #28]
 80009ee:	4b0c      	ldr	r3, [pc, #48]	; (8000a20 <HAL_MspInit+0x5c>)
 80009f0:	69db      	ldr	r3, [r3, #28]
 80009f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009f6:	607b      	str	r3, [r7, #4]
 80009f8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80009fa:	4b0a      	ldr	r3, [pc, #40]	; (8000a24 <HAL_MspInit+0x60>)
 80009fc:	685b      	ldr	r3, [r3, #4]
 80009fe:	60fb      	str	r3, [r7, #12]
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000a06:	60fb      	str	r3, [r7, #12]
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000a0e:	60fb      	str	r3, [r7, #12]
 8000a10:	4a04      	ldr	r2, [pc, #16]	; (8000a24 <HAL_MspInit+0x60>)
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a16:	bf00      	nop
 8000a18:	3714      	adds	r7, #20
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bc80      	pop	{r7}
 8000a1e:	4770      	bx	lr
 8000a20:	40021000 	.word	0x40021000
 8000a24:	40010000 	.word	0x40010000

08000a28 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b084      	sub	sp, #16
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a38:	d113      	bne.n	8000a62 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a3a:	4b0c      	ldr	r3, [pc, #48]	; (8000a6c <HAL_TIM_Base_MspInit+0x44>)
 8000a3c:	69db      	ldr	r3, [r3, #28]
 8000a3e:	4a0b      	ldr	r2, [pc, #44]	; (8000a6c <HAL_TIM_Base_MspInit+0x44>)
 8000a40:	f043 0301 	orr.w	r3, r3, #1
 8000a44:	61d3      	str	r3, [r2, #28]
 8000a46:	4b09      	ldr	r3, [pc, #36]	; (8000a6c <HAL_TIM_Base_MspInit+0x44>)
 8000a48:	69db      	ldr	r3, [r3, #28]
 8000a4a:	f003 0301 	and.w	r3, r3, #1
 8000a4e:	60fb      	str	r3, [r7, #12]
 8000a50:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000a52:	2200      	movs	r2, #0
 8000a54:	2100      	movs	r1, #0
 8000a56:	201c      	movs	r0, #28
 8000a58:	f000 fa35 	bl	8000ec6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a5c:	201c      	movs	r0, #28
 8000a5e:	f000 fa4e 	bl	8000efe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000a62:	bf00      	nop
 8000a64:	3710      	adds	r7, #16
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	40021000 	.word	0x40021000

08000a70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b088      	sub	sp, #32
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a78:	f107 0310 	add.w	r3, r7, #16
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	605a      	str	r2, [r3, #4]
 8000a82:	609a      	str	r2, [r3, #8]
 8000a84:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	4a20      	ldr	r2, [pc, #128]	; (8000b0c <HAL_UART_MspInit+0x9c>)
 8000a8c:	4293      	cmp	r3, r2
 8000a8e:	d139      	bne.n	8000b04 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a90:	4b1f      	ldr	r3, [pc, #124]	; (8000b10 <HAL_UART_MspInit+0xa0>)
 8000a92:	699b      	ldr	r3, [r3, #24]
 8000a94:	4a1e      	ldr	r2, [pc, #120]	; (8000b10 <HAL_UART_MspInit+0xa0>)
 8000a96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a9a:	6193      	str	r3, [r2, #24]
 8000a9c:	4b1c      	ldr	r3, [pc, #112]	; (8000b10 <HAL_UART_MspInit+0xa0>)
 8000a9e:	699b      	ldr	r3, [r3, #24]
 8000aa0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aa4:	60fb      	str	r3, [r7, #12]
 8000aa6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa8:	4b19      	ldr	r3, [pc, #100]	; (8000b10 <HAL_UART_MspInit+0xa0>)
 8000aaa:	699b      	ldr	r3, [r3, #24]
 8000aac:	4a18      	ldr	r2, [pc, #96]	; (8000b10 <HAL_UART_MspInit+0xa0>)
 8000aae:	f043 0304 	orr.w	r3, r3, #4
 8000ab2:	6193      	str	r3, [r2, #24]
 8000ab4:	4b16      	ldr	r3, [pc, #88]	; (8000b10 <HAL_UART_MspInit+0xa0>)
 8000ab6:	699b      	ldr	r3, [r3, #24]
 8000ab8:	f003 0304 	and.w	r3, r3, #4
 8000abc:	60bb      	str	r3, [r7, #8]
 8000abe:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ac0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ac4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000aca:	2303      	movs	r3, #3
 8000acc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ace:	f107 0310 	add.w	r3, r7, #16
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	480f      	ldr	r0, [pc, #60]	; (8000b14 <HAL_UART_MspInit+0xa4>)
 8000ad6:	f000 fadd 	bl	8001094 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ada:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ade:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae8:	f107 0310 	add.w	r3, r7, #16
 8000aec:	4619      	mov	r1, r3
 8000aee:	4809      	ldr	r0, [pc, #36]	; (8000b14 <HAL_UART_MspInit+0xa4>)
 8000af0:	f000 fad0 	bl	8001094 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000af4:	2200      	movs	r2, #0
 8000af6:	2100      	movs	r1, #0
 8000af8:	2025      	movs	r0, #37	; 0x25
 8000afa:	f000 f9e4 	bl	8000ec6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000afe:	2025      	movs	r0, #37	; 0x25
 8000b00:	f000 f9fd 	bl	8000efe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000b04:	bf00      	nop
 8000b06:	3720      	adds	r7, #32
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	40013800 	.word	0x40013800
 8000b10:	40021000 	.word	0x40021000
 8000b14:	40010800 	.word	0x40010800

08000b18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b1c:	e7fe      	b.n	8000b1c <NMI_Handler+0x4>

08000b1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b1e:	b480      	push	{r7}
 8000b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b22:	e7fe      	b.n	8000b22 <HardFault_Handler+0x4>

08000b24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b28:	e7fe      	b.n	8000b28 <MemManage_Handler+0x4>

08000b2a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b2a:	b480      	push	{r7}
 8000b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b2e:	e7fe      	b.n	8000b2e <BusFault_Handler+0x4>

08000b30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b34:	e7fe      	b.n	8000b34 <UsageFault_Handler+0x4>

08000b36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b36:	b480      	push	{r7}
 8000b38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b3a:	bf00      	nop
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bc80      	pop	{r7}
 8000b40:	4770      	bx	lr

08000b42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b42:	b480      	push	{r7}
 8000b44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b46:	bf00      	nop
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bc80      	pop	{r7}
 8000b4c:	4770      	bx	lr

08000b4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b4e:	b480      	push	{r7}
 8000b50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b52:	bf00      	nop
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bc80      	pop	{r7}
 8000b58:	4770      	bx	lr

08000b5a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b5a:	b580      	push	{r7, lr}
 8000b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b5e:	f000 f8bf 	bl	8000ce0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b62:	bf00      	nop
 8000b64:	bd80      	pop	{r7, pc}
	...

08000b68 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000b6c:	4802      	ldr	r0, [pc, #8]	; (8000b78 <TIM2_IRQHandler+0x10>)
 8000b6e:	f001 f909 	bl	8001d84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000b72:	bf00      	nop
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	20000108 	.word	0x20000108

08000b7c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000b80:	4802      	ldr	r0, [pc, #8]	; (8000b8c <USART1_IRQHandler+0x10>)
 8000b82:	f001 fd27 	bl	80025d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000b86:	bf00      	nop
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	200000c4 	.word	0x200000c4

08000b90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b086      	sub	sp, #24
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b98:	4a14      	ldr	r2, [pc, #80]	; (8000bec <_sbrk+0x5c>)
 8000b9a:	4b15      	ldr	r3, [pc, #84]	; (8000bf0 <_sbrk+0x60>)
 8000b9c:	1ad3      	subs	r3, r2, r3
 8000b9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ba4:	4b13      	ldr	r3, [pc, #76]	; (8000bf4 <_sbrk+0x64>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d102      	bne.n	8000bb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bac:	4b11      	ldr	r3, [pc, #68]	; (8000bf4 <_sbrk+0x64>)
 8000bae:	4a12      	ldr	r2, [pc, #72]	; (8000bf8 <_sbrk+0x68>)
 8000bb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bb2:	4b10      	ldr	r3, [pc, #64]	; (8000bf4 <_sbrk+0x64>)
 8000bb4:	681a      	ldr	r2, [r3, #0]
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	4413      	add	r3, r2
 8000bba:	693a      	ldr	r2, [r7, #16]
 8000bbc:	429a      	cmp	r2, r3
 8000bbe:	d207      	bcs.n	8000bd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bc0:	f002 f900 	bl	8002dc4 <__errno>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	220c      	movs	r2, #12
 8000bc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bca:	f04f 33ff 	mov.w	r3, #4294967295
 8000bce:	e009      	b.n	8000be4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bd0:	4b08      	ldr	r3, [pc, #32]	; (8000bf4 <_sbrk+0x64>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bd6:	4b07      	ldr	r3, [pc, #28]	; (8000bf4 <_sbrk+0x64>)
 8000bd8:	681a      	ldr	r2, [r3, #0]
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	4413      	add	r3, r2
 8000bde:	4a05      	ldr	r2, [pc, #20]	; (8000bf4 <_sbrk+0x64>)
 8000be0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000be2:	68fb      	ldr	r3, [r7, #12]
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	3718      	adds	r7, #24
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	20002800 	.word	0x20002800
 8000bf0:	00000400 	.word	0x00000400
 8000bf4:	200000ac 	.word	0x200000ac
 8000bf8:	200001a0 	.word	0x200001a0

08000bfc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c00:	bf00      	nop
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bc80      	pop	{r7}
 8000c06:	4770      	bx	lr

08000c08 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c08:	480c      	ldr	r0, [pc, #48]	; (8000c3c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c0a:	490d      	ldr	r1, [pc, #52]	; (8000c40 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c0c:	4a0d      	ldr	r2, [pc, #52]	; (8000c44 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c10:	e002      	b.n	8000c18 <LoopCopyDataInit>

08000c12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c16:	3304      	adds	r3, #4

08000c18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c1c:	d3f9      	bcc.n	8000c12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c1e:	4a0a      	ldr	r2, [pc, #40]	; (8000c48 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c20:	4c0a      	ldr	r4, [pc, #40]	; (8000c4c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c24:	e001      	b.n	8000c2a <LoopFillZerobss>

08000c26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c28:	3204      	adds	r2, #4

08000c2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c2c:	d3fb      	bcc.n	8000c26 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000c2e:	f7ff ffe5 	bl	8000bfc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c32:	f002 f8cd 	bl	8002dd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c36:	f7ff fbcd 	bl	80003d4 <main>
  bx lr
 8000c3a:	4770      	bx	lr
  ldr r0, =_sdata
 8000c3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c40:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000c44:	08003764 	.word	0x08003764
  ldr r2, =_sbss
 8000c48:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000c4c:	200001a0 	.word	0x200001a0

08000c50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c50:	e7fe      	b.n	8000c50 <ADC1_2_IRQHandler>
	...

08000c54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c58:	4b08      	ldr	r3, [pc, #32]	; (8000c7c <HAL_Init+0x28>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a07      	ldr	r2, [pc, #28]	; (8000c7c <HAL_Init+0x28>)
 8000c5e:	f043 0310 	orr.w	r3, r3, #16
 8000c62:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c64:	2003      	movs	r0, #3
 8000c66:	f000 f923 	bl	8000eb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c6a:	200f      	movs	r0, #15
 8000c6c:	f000 f808 	bl	8000c80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c70:	f7ff fea8 	bl	80009c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c74:	2300      	movs	r3, #0
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	40022000 	.word	0x40022000

08000c80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c88:	4b12      	ldr	r3, [pc, #72]	; (8000cd4 <HAL_InitTick+0x54>)
 8000c8a:	681a      	ldr	r2, [r3, #0]
 8000c8c:	4b12      	ldr	r3, [pc, #72]	; (8000cd8 <HAL_InitTick+0x58>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	4619      	mov	r1, r3
 8000c92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c96:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f000 f93b 	bl	8000f1a <HAL_SYSTICK_Config>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000caa:	2301      	movs	r3, #1
 8000cac:	e00e      	b.n	8000ccc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	2b0f      	cmp	r3, #15
 8000cb2:	d80a      	bhi.n	8000cca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	6879      	ldr	r1, [r7, #4]
 8000cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cbc:	f000 f903 	bl	8000ec6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cc0:	4a06      	ldr	r2, [pc, #24]	; (8000cdc <HAL_InitTick+0x5c>)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	e000      	b.n	8000ccc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cca:	2301      	movs	r3, #1
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	3708      	adds	r7, #8
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	20000000 	.word	0x20000000
 8000cd8:	20000008 	.word	0x20000008
 8000cdc:	20000004 	.word	0x20000004

08000ce0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ce4:	4b05      	ldr	r3, [pc, #20]	; (8000cfc <HAL_IncTick+0x1c>)
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	461a      	mov	r2, r3
 8000cea:	4b05      	ldr	r3, [pc, #20]	; (8000d00 <HAL_IncTick+0x20>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	4413      	add	r3, r2
 8000cf0:	4a03      	ldr	r2, [pc, #12]	; (8000d00 <HAL_IncTick+0x20>)
 8000cf2:	6013      	str	r3, [r2, #0]
}
 8000cf4:	bf00      	nop
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bc80      	pop	{r7}
 8000cfa:	4770      	bx	lr
 8000cfc:	20000008 	.word	0x20000008
 8000d00:	2000018c 	.word	0x2000018c

08000d04 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  return uwTick;
 8000d08:	4b02      	ldr	r3, [pc, #8]	; (8000d14 <HAL_GetTick+0x10>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bc80      	pop	{r7}
 8000d12:	4770      	bx	lr
 8000d14:	2000018c 	.word	0x2000018c

08000d18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b085      	sub	sp, #20
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	f003 0307 	and.w	r3, r3, #7
 8000d26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d28:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__NVIC_SetPriorityGrouping+0x44>)
 8000d2a:	68db      	ldr	r3, [r3, #12]
 8000d2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d2e:	68ba      	ldr	r2, [r7, #8]
 8000d30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d34:	4013      	ands	r3, r2
 8000d36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d4a:	4a04      	ldr	r2, [pc, #16]	; (8000d5c <__NVIC_SetPriorityGrouping+0x44>)
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	60d3      	str	r3, [r2, #12]
}
 8000d50:	bf00      	nop
 8000d52:	3714      	adds	r7, #20
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bc80      	pop	{r7}
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	e000ed00 	.word	0xe000ed00

08000d60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d64:	4b04      	ldr	r3, [pc, #16]	; (8000d78 <__NVIC_GetPriorityGrouping+0x18>)
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	0a1b      	lsrs	r3, r3, #8
 8000d6a:	f003 0307 	and.w	r3, r3, #7
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bc80      	pop	{r7}
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	e000ed00 	.word	0xe000ed00

08000d7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	4603      	mov	r3, r0
 8000d84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	db0b      	blt.n	8000da6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d8e:	79fb      	ldrb	r3, [r7, #7]
 8000d90:	f003 021f 	and.w	r2, r3, #31
 8000d94:	4906      	ldr	r1, [pc, #24]	; (8000db0 <__NVIC_EnableIRQ+0x34>)
 8000d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9a:	095b      	lsrs	r3, r3, #5
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	fa00 f202 	lsl.w	r2, r0, r2
 8000da2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000da6:	bf00      	nop
 8000da8:	370c      	adds	r7, #12
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bc80      	pop	{r7}
 8000dae:	4770      	bx	lr
 8000db0:	e000e100 	.word	0xe000e100

08000db4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b083      	sub	sp, #12
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	4603      	mov	r3, r0
 8000dbc:	6039      	str	r1, [r7, #0]
 8000dbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	db0a      	blt.n	8000dde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	b2da      	uxtb	r2, r3
 8000dcc:	490c      	ldr	r1, [pc, #48]	; (8000e00 <__NVIC_SetPriority+0x4c>)
 8000dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd2:	0112      	lsls	r2, r2, #4
 8000dd4:	b2d2      	uxtb	r2, r2
 8000dd6:	440b      	add	r3, r1
 8000dd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ddc:	e00a      	b.n	8000df4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	b2da      	uxtb	r2, r3
 8000de2:	4908      	ldr	r1, [pc, #32]	; (8000e04 <__NVIC_SetPriority+0x50>)
 8000de4:	79fb      	ldrb	r3, [r7, #7]
 8000de6:	f003 030f 	and.w	r3, r3, #15
 8000dea:	3b04      	subs	r3, #4
 8000dec:	0112      	lsls	r2, r2, #4
 8000dee:	b2d2      	uxtb	r2, r2
 8000df0:	440b      	add	r3, r1
 8000df2:	761a      	strb	r2, [r3, #24]
}
 8000df4:	bf00      	nop
 8000df6:	370c      	adds	r7, #12
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bc80      	pop	{r7}
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	e000e100 	.word	0xe000e100
 8000e04:	e000ed00 	.word	0xe000ed00

08000e08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b089      	sub	sp, #36	; 0x24
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	60f8      	str	r0, [r7, #12]
 8000e10:	60b9      	str	r1, [r7, #8]
 8000e12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	f003 0307 	and.w	r3, r3, #7
 8000e1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e1c:	69fb      	ldr	r3, [r7, #28]
 8000e1e:	f1c3 0307 	rsb	r3, r3, #7
 8000e22:	2b04      	cmp	r3, #4
 8000e24:	bf28      	it	cs
 8000e26:	2304      	movcs	r3, #4
 8000e28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	3304      	adds	r3, #4
 8000e2e:	2b06      	cmp	r3, #6
 8000e30:	d902      	bls.n	8000e38 <NVIC_EncodePriority+0x30>
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	3b03      	subs	r3, #3
 8000e36:	e000      	b.n	8000e3a <NVIC_EncodePriority+0x32>
 8000e38:	2300      	movs	r3, #0
 8000e3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e3c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e40:	69bb      	ldr	r3, [r7, #24]
 8000e42:	fa02 f303 	lsl.w	r3, r2, r3
 8000e46:	43da      	mvns	r2, r3
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	401a      	ands	r2, r3
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e50:	f04f 31ff 	mov.w	r1, #4294967295
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	fa01 f303 	lsl.w	r3, r1, r3
 8000e5a:	43d9      	mvns	r1, r3
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e60:	4313      	orrs	r3, r2
         );
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	3724      	adds	r7, #36	; 0x24
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bc80      	pop	{r7}
 8000e6a:	4770      	bx	lr

08000e6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	3b01      	subs	r3, #1
 8000e78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e7c:	d301      	bcc.n	8000e82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e7e:	2301      	movs	r3, #1
 8000e80:	e00f      	b.n	8000ea2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e82:	4a0a      	ldr	r2, [pc, #40]	; (8000eac <SysTick_Config+0x40>)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	3b01      	subs	r3, #1
 8000e88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e8a:	210f      	movs	r1, #15
 8000e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e90:	f7ff ff90 	bl	8000db4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e94:	4b05      	ldr	r3, [pc, #20]	; (8000eac <SysTick_Config+0x40>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e9a:	4b04      	ldr	r3, [pc, #16]	; (8000eac <SysTick_Config+0x40>)
 8000e9c:	2207      	movs	r2, #7
 8000e9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ea0:	2300      	movs	r3, #0
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	e000e010 	.word	0xe000e010

08000eb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eb8:	6878      	ldr	r0, [r7, #4]
 8000eba:	f7ff ff2d 	bl	8000d18 <__NVIC_SetPriorityGrouping>
}
 8000ebe:	bf00      	nop
 8000ec0:	3708      	adds	r7, #8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}

08000ec6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ec6:	b580      	push	{r7, lr}
 8000ec8:	b086      	sub	sp, #24
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	4603      	mov	r3, r0
 8000ece:	60b9      	str	r1, [r7, #8]
 8000ed0:	607a      	str	r2, [r7, #4]
 8000ed2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ed8:	f7ff ff42 	bl	8000d60 <__NVIC_GetPriorityGrouping>
 8000edc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ede:	687a      	ldr	r2, [r7, #4]
 8000ee0:	68b9      	ldr	r1, [r7, #8]
 8000ee2:	6978      	ldr	r0, [r7, #20]
 8000ee4:	f7ff ff90 	bl	8000e08 <NVIC_EncodePriority>
 8000ee8:	4602      	mov	r2, r0
 8000eea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eee:	4611      	mov	r1, r2
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f7ff ff5f 	bl	8000db4 <__NVIC_SetPriority>
}
 8000ef6:	bf00      	nop
 8000ef8:	3718      	adds	r7, #24
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}

08000efe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000efe:	b580      	push	{r7, lr}
 8000f00:	b082      	sub	sp, #8
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	4603      	mov	r3, r0
 8000f06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f7ff ff35 	bl	8000d7c <__NVIC_EnableIRQ>
}
 8000f12:	bf00      	nop
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}

08000f1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f1a:	b580      	push	{r7, lr}
 8000f1c:	b082      	sub	sp, #8
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f22:	6878      	ldr	r0, [r7, #4]
 8000f24:	f7ff ffa2 	bl	8000e6c <SysTick_Config>
 8000f28:	4603      	mov	r3, r0
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}

08000f32 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f32:	b480      	push	{r7}
 8000f34:	b085      	sub	sp, #20
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000f44:	2b02      	cmp	r3, #2
 8000f46:	d008      	beq.n	8000f5a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2204      	movs	r2, #4
 8000f4c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2200      	movs	r2, #0
 8000f52:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000f56:	2301      	movs	r3, #1
 8000f58:	e020      	b.n	8000f9c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	681a      	ldr	r2, [r3, #0]
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f022 020e 	bic.w	r2, r2, #14
 8000f68:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	681a      	ldr	r2, [r3, #0]
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f022 0201 	bic.w	r2, r2, #1
 8000f78:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f82:	2101      	movs	r1, #1
 8000f84:	fa01 f202 	lsl.w	r2, r1, r2
 8000f88:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2200      	movs	r2, #0
 8000f96:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000f9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	3714      	adds	r7, #20
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bc80      	pop	{r7}
 8000fa4:	4770      	bx	lr
	...

08000fa8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000fba:	2b02      	cmp	r3, #2
 8000fbc:	d005      	beq.n	8000fca <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2204      	movs	r2, #4
 8000fc2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	73fb      	strb	r3, [r7, #15]
 8000fc8:	e051      	b.n	800106e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f022 020e 	bic.w	r2, r2, #14
 8000fd8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f022 0201 	bic.w	r2, r2, #1
 8000fe8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4a22      	ldr	r2, [pc, #136]	; (8001078 <HAL_DMA_Abort_IT+0xd0>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d029      	beq.n	8001048 <HAL_DMA_Abort_IT+0xa0>
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a20      	ldr	r2, [pc, #128]	; (800107c <HAL_DMA_Abort_IT+0xd4>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d022      	beq.n	8001044 <HAL_DMA_Abort_IT+0x9c>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4a1f      	ldr	r2, [pc, #124]	; (8001080 <HAL_DMA_Abort_IT+0xd8>)
 8001004:	4293      	cmp	r3, r2
 8001006:	d01a      	beq.n	800103e <HAL_DMA_Abort_IT+0x96>
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a1d      	ldr	r2, [pc, #116]	; (8001084 <HAL_DMA_Abort_IT+0xdc>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d012      	beq.n	8001038 <HAL_DMA_Abort_IT+0x90>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a1c      	ldr	r2, [pc, #112]	; (8001088 <HAL_DMA_Abort_IT+0xe0>)
 8001018:	4293      	cmp	r3, r2
 800101a:	d00a      	beq.n	8001032 <HAL_DMA_Abort_IT+0x8a>
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a1a      	ldr	r2, [pc, #104]	; (800108c <HAL_DMA_Abort_IT+0xe4>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d102      	bne.n	800102c <HAL_DMA_Abort_IT+0x84>
 8001026:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800102a:	e00e      	b.n	800104a <HAL_DMA_Abort_IT+0xa2>
 800102c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001030:	e00b      	b.n	800104a <HAL_DMA_Abort_IT+0xa2>
 8001032:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001036:	e008      	b.n	800104a <HAL_DMA_Abort_IT+0xa2>
 8001038:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800103c:	e005      	b.n	800104a <HAL_DMA_Abort_IT+0xa2>
 800103e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001042:	e002      	b.n	800104a <HAL_DMA_Abort_IT+0xa2>
 8001044:	2310      	movs	r3, #16
 8001046:	e000      	b.n	800104a <HAL_DMA_Abort_IT+0xa2>
 8001048:	2301      	movs	r3, #1
 800104a:	4a11      	ldr	r2, [pc, #68]	; (8001090 <HAL_DMA_Abort_IT+0xe8>)
 800104c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2201      	movs	r2, #1
 8001052:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2200      	movs	r2, #0
 800105a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001062:	2b00      	cmp	r3, #0
 8001064:	d003      	beq.n	800106e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	4798      	blx	r3
    } 
  }
  return status;
 800106e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001070:	4618      	mov	r0, r3
 8001072:	3710      	adds	r7, #16
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	40020008 	.word	0x40020008
 800107c:	4002001c 	.word	0x4002001c
 8001080:	40020030 	.word	0x40020030
 8001084:	40020044 	.word	0x40020044
 8001088:	40020058 	.word	0x40020058
 800108c:	4002006c 	.word	0x4002006c
 8001090:	40020000 	.word	0x40020000

08001094 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001094:	b480      	push	{r7}
 8001096:	b08b      	sub	sp, #44	; 0x2c
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800109e:	2300      	movs	r3, #0
 80010a0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80010a2:	2300      	movs	r3, #0
 80010a4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010a6:	e148      	b.n	800133a <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80010a8:	2201      	movs	r2, #1
 80010aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ac:	fa02 f303 	lsl.w	r3, r2, r3
 80010b0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	69fa      	ldr	r2, [r7, #28]
 80010b8:	4013      	ands	r3, r2
 80010ba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	429a      	cmp	r2, r3
 80010c2:	f040 8137 	bne.w	8001334 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	4aa3      	ldr	r2, [pc, #652]	; (8001358 <HAL_GPIO_Init+0x2c4>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d05e      	beq.n	800118e <HAL_GPIO_Init+0xfa>
 80010d0:	4aa1      	ldr	r2, [pc, #644]	; (8001358 <HAL_GPIO_Init+0x2c4>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d875      	bhi.n	80011c2 <HAL_GPIO_Init+0x12e>
 80010d6:	4aa1      	ldr	r2, [pc, #644]	; (800135c <HAL_GPIO_Init+0x2c8>)
 80010d8:	4293      	cmp	r3, r2
 80010da:	d058      	beq.n	800118e <HAL_GPIO_Init+0xfa>
 80010dc:	4a9f      	ldr	r2, [pc, #636]	; (800135c <HAL_GPIO_Init+0x2c8>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d86f      	bhi.n	80011c2 <HAL_GPIO_Init+0x12e>
 80010e2:	4a9f      	ldr	r2, [pc, #636]	; (8001360 <HAL_GPIO_Init+0x2cc>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d052      	beq.n	800118e <HAL_GPIO_Init+0xfa>
 80010e8:	4a9d      	ldr	r2, [pc, #628]	; (8001360 <HAL_GPIO_Init+0x2cc>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d869      	bhi.n	80011c2 <HAL_GPIO_Init+0x12e>
 80010ee:	4a9d      	ldr	r2, [pc, #628]	; (8001364 <HAL_GPIO_Init+0x2d0>)
 80010f0:	4293      	cmp	r3, r2
 80010f2:	d04c      	beq.n	800118e <HAL_GPIO_Init+0xfa>
 80010f4:	4a9b      	ldr	r2, [pc, #620]	; (8001364 <HAL_GPIO_Init+0x2d0>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d863      	bhi.n	80011c2 <HAL_GPIO_Init+0x12e>
 80010fa:	4a9b      	ldr	r2, [pc, #620]	; (8001368 <HAL_GPIO_Init+0x2d4>)
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d046      	beq.n	800118e <HAL_GPIO_Init+0xfa>
 8001100:	4a99      	ldr	r2, [pc, #612]	; (8001368 <HAL_GPIO_Init+0x2d4>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d85d      	bhi.n	80011c2 <HAL_GPIO_Init+0x12e>
 8001106:	2b12      	cmp	r3, #18
 8001108:	d82a      	bhi.n	8001160 <HAL_GPIO_Init+0xcc>
 800110a:	2b12      	cmp	r3, #18
 800110c:	d859      	bhi.n	80011c2 <HAL_GPIO_Init+0x12e>
 800110e:	a201      	add	r2, pc, #4	; (adr r2, 8001114 <HAL_GPIO_Init+0x80>)
 8001110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001114:	0800118f 	.word	0x0800118f
 8001118:	08001169 	.word	0x08001169
 800111c:	0800117b 	.word	0x0800117b
 8001120:	080011bd 	.word	0x080011bd
 8001124:	080011c3 	.word	0x080011c3
 8001128:	080011c3 	.word	0x080011c3
 800112c:	080011c3 	.word	0x080011c3
 8001130:	080011c3 	.word	0x080011c3
 8001134:	080011c3 	.word	0x080011c3
 8001138:	080011c3 	.word	0x080011c3
 800113c:	080011c3 	.word	0x080011c3
 8001140:	080011c3 	.word	0x080011c3
 8001144:	080011c3 	.word	0x080011c3
 8001148:	080011c3 	.word	0x080011c3
 800114c:	080011c3 	.word	0x080011c3
 8001150:	080011c3 	.word	0x080011c3
 8001154:	080011c3 	.word	0x080011c3
 8001158:	08001171 	.word	0x08001171
 800115c:	08001185 	.word	0x08001185
 8001160:	4a82      	ldr	r2, [pc, #520]	; (800136c <HAL_GPIO_Init+0x2d8>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d013      	beq.n	800118e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001166:	e02c      	b.n	80011c2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	623b      	str	r3, [r7, #32]
          break;
 800116e:	e029      	b.n	80011c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	3304      	adds	r3, #4
 8001176:	623b      	str	r3, [r7, #32]
          break;
 8001178:	e024      	b.n	80011c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	68db      	ldr	r3, [r3, #12]
 800117e:	3308      	adds	r3, #8
 8001180:	623b      	str	r3, [r7, #32]
          break;
 8001182:	e01f      	b.n	80011c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	68db      	ldr	r3, [r3, #12]
 8001188:	330c      	adds	r3, #12
 800118a:	623b      	str	r3, [r7, #32]
          break;
 800118c:	e01a      	b.n	80011c4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d102      	bne.n	800119c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001196:	2304      	movs	r3, #4
 8001198:	623b      	str	r3, [r7, #32]
          break;
 800119a:	e013      	b.n	80011c4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	689b      	ldr	r3, [r3, #8]
 80011a0:	2b01      	cmp	r3, #1
 80011a2:	d105      	bne.n	80011b0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011a4:	2308      	movs	r3, #8
 80011a6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	69fa      	ldr	r2, [r7, #28]
 80011ac:	611a      	str	r2, [r3, #16]
          break;
 80011ae:	e009      	b.n	80011c4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011b0:	2308      	movs	r3, #8
 80011b2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	69fa      	ldr	r2, [r7, #28]
 80011b8:	615a      	str	r2, [r3, #20]
          break;
 80011ba:	e003      	b.n	80011c4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80011bc:	2300      	movs	r3, #0
 80011be:	623b      	str	r3, [r7, #32]
          break;
 80011c0:	e000      	b.n	80011c4 <HAL_GPIO_Init+0x130>
          break;
 80011c2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80011c4:	69bb      	ldr	r3, [r7, #24]
 80011c6:	2bff      	cmp	r3, #255	; 0xff
 80011c8:	d801      	bhi.n	80011ce <HAL_GPIO_Init+0x13a>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	e001      	b.n	80011d2 <HAL_GPIO_Init+0x13e>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	3304      	adds	r3, #4
 80011d2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80011d4:	69bb      	ldr	r3, [r7, #24]
 80011d6:	2bff      	cmp	r3, #255	; 0xff
 80011d8:	d802      	bhi.n	80011e0 <HAL_GPIO_Init+0x14c>
 80011da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	e002      	b.n	80011e6 <HAL_GPIO_Init+0x152>
 80011e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e2:	3b08      	subs	r3, #8
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	210f      	movs	r1, #15
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	fa01 f303 	lsl.w	r3, r1, r3
 80011f4:	43db      	mvns	r3, r3
 80011f6:	401a      	ands	r2, r3
 80011f8:	6a39      	ldr	r1, [r7, #32]
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001200:	431a      	orrs	r2, r3
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800120e:	2b00      	cmp	r3, #0
 8001210:	f000 8090 	beq.w	8001334 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001214:	4b56      	ldr	r3, [pc, #344]	; (8001370 <HAL_GPIO_Init+0x2dc>)
 8001216:	699b      	ldr	r3, [r3, #24]
 8001218:	4a55      	ldr	r2, [pc, #340]	; (8001370 <HAL_GPIO_Init+0x2dc>)
 800121a:	f043 0301 	orr.w	r3, r3, #1
 800121e:	6193      	str	r3, [r2, #24]
 8001220:	4b53      	ldr	r3, [pc, #332]	; (8001370 <HAL_GPIO_Init+0x2dc>)
 8001222:	699b      	ldr	r3, [r3, #24]
 8001224:	f003 0301 	and.w	r3, r3, #1
 8001228:	60bb      	str	r3, [r7, #8]
 800122a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800122c:	4a51      	ldr	r2, [pc, #324]	; (8001374 <HAL_GPIO_Init+0x2e0>)
 800122e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001230:	089b      	lsrs	r3, r3, #2
 8001232:	3302      	adds	r3, #2
 8001234:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001238:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800123a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800123c:	f003 0303 	and.w	r3, r3, #3
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	220f      	movs	r2, #15
 8001244:	fa02 f303 	lsl.w	r3, r2, r3
 8001248:	43db      	mvns	r3, r3
 800124a:	68fa      	ldr	r2, [r7, #12]
 800124c:	4013      	ands	r3, r2
 800124e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	4a49      	ldr	r2, [pc, #292]	; (8001378 <HAL_GPIO_Init+0x2e4>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d00d      	beq.n	8001274 <HAL_GPIO_Init+0x1e0>
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	4a48      	ldr	r2, [pc, #288]	; (800137c <HAL_GPIO_Init+0x2e8>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d007      	beq.n	8001270 <HAL_GPIO_Init+0x1dc>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	4a47      	ldr	r2, [pc, #284]	; (8001380 <HAL_GPIO_Init+0x2ec>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d101      	bne.n	800126c <HAL_GPIO_Init+0x1d8>
 8001268:	2302      	movs	r3, #2
 800126a:	e004      	b.n	8001276 <HAL_GPIO_Init+0x1e2>
 800126c:	2303      	movs	r3, #3
 800126e:	e002      	b.n	8001276 <HAL_GPIO_Init+0x1e2>
 8001270:	2301      	movs	r3, #1
 8001272:	e000      	b.n	8001276 <HAL_GPIO_Init+0x1e2>
 8001274:	2300      	movs	r3, #0
 8001276:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001278:	f002 0203 	and.w	r2, r2, #3
 800127c:	0092      	lsls	r2, r2, #2
 800127e:	4093      	lsls	r3, r2
 8001280:	68fa      	ldr	r2, [r7, #12]
 8001282:	4313      	orrs	r3, r2
 8001284:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001286:	493b      	ldr	r1, [pc, #236]	; (8001374 <HAL_GPIO_Init+0x2e0>)
 8001288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800128a:	089b      	lsrs	r3, r3, #2
 800128c:	3302      	adds	r3, #2
 800128e:	68fa      	ldr	r2, [r7, #12]
 8001290:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800129c:	2b00      	cmp	r3, #0
 800129e:	d006      	beq.n	80012ae <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80012a0:	4b38      	ldr	r3, [pc, #224]	; (8001384 <HAL_GPIO_Init+0x2f0>)
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	4937      	ldr	r1, [pc, #220]	; (8001384 <HAL_GPIO_Init+0x2f0>)
 80012a6:	69bb      	ldr	r3, [r7, #24]
 80012a8:	4313      	orrs	r3, r2
 80012aa:	600b      	str	r3, [r1, #0]
 80012ac:	e006      	b.n	80012bc <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80012ae:	4b35      	ldr	r3, [pc, #212]	; (8001384 <HAL_GPIO_Init+0x2f0>)
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	69bb      	ldr	r3, [r7, #24]
 80012b4:	43db      	mvns	r3, r3
 80012b6:	4933      	ldr	r1, [pc, #204]	; (8001384 <HAL_GPIO_Init+0x2f0>)
 80012b8:	4013      	ands	r3, r2
 80012ba:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d006      	beq.n	80012d6 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80012c8:	4b2e      	ldr	r3, [pc, #184]	; (8001384 <HAL_GPIO_Init+0x2f0>)
 80012ca:	685a      	ldr	r2, [r3, #4]
 80012cc:	492d      	ldr	r1, [pc, #180]	; (8001384 <HAL_GPIO_Init+0x2f0>)
 80012ce:	69bb      	ldr	r3, [r7, #24]
 80012d0:	4313      	orrs	r3, r2
 80012d2:	604b      	str	r3, [r1, #4]
 80012d4:	e006      	b.n	80012e4 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80012d6:	4b2b      	ldr	r3, [pc, #172]	; (8001384 <HAL_GPIO_Init+0x2f0>)
 80012d8:	685a      	ldr	r2, [r3, #4]
 80012da:	69bb      	ldr	r3, [r7, #24]
 80012dc:	43db      	mvns	r3, r3
 80012de:	4929      	ldr	r1, [pc, #164]	; (8001384 <HAL_GPIO_Init+0x2f0>)
 80012e0:	4013      	ands	r3, r2
 80012e2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d006      	beq.n	80012fe <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80012f0:	4b24      	ldr	r3, [pc, #144]	; (8001384 <HAL_GPIO_Init+0x2f0>)
 80012f2:	689a      	ldr	r2, [r3, #8]
 80012f4:	4923      	ldr	r1, [pc, #140]	; (8001384 <HAL_GPIO_Init+0x2f0>)
 80012f6:	69bb      	ldr	r3, [r7, #24]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	608b      	str	r3, [r1, #8]
 80012fc:	e006      	b.n	800130c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80012fe:	4b21      	ldr	r3, [pc, #132]	; (8001384 <HAL_GPIO_Init+0x2f0>)
 8001300:	689a      	ldr	r2, [r3, #8]
 8001302:	69bb      	ldr	r3, [r7, #24]
 8001304:	43db      	mvns	r3, r3
 8001306:	491f      	ldr	r1, [pc, #124]	; (8001384 <HAL_GPIO_Init+0x2f0>)
 8001308:	4013      	ands	r3, r2
 800130a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001314:	2b00      	cmp	r3, #0
 8001316:	d006      	beq.n	8001326 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001318:	4b1a      	ldr	r3, [pc, #104]	; (8001384 <HAL_GPIO_Init+0x2f0>)
 800131a:	68da      	ldr	r2, [r3, #12]
 800131c:	4919      	ldr	r1, [pc, #100]	; (8001384 <HAL_GPIO_Init+0x2f0>)
 800131e:	69bb      	ldr	r3, [r7, #24]
 8001320:	4313      	orrs	r3, r2
 8001322:	60cb      	str	r3, [r1, #12]
 8001324:	e006      	b.n	8001334 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001326:	4b17      	ldr	r3, [pc, #92]	; (8001384 <HAL_GPIO_Init+0x2f0>)
 8001328:	68da      	ldr	r2, [r3, #12]
 800132a:	69bb      	ldr	r3, [r7, #24]
 800132c:	43db      	mvns	r3, r3
 800132e:	4915      	ldr	r1, [pc, #84]	; (8001384 <HAL_GPIO_Init+0x2f0>)
 8001330:	4013      	ands	r3, r2
 8001332:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001336:	3301      	adds	r3, #1
 8001338:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001340:	fa22 f303 	lsr.w	r3, r2, r3
 8001344:	2b00      	cmp	r3, #0
 8001346:	f47f aeaf 	bne.w	80010a8 <HAL_GPIO_Init+0x14>
  }
}
 800134a:	bf00      	nop
 800134c:	bf00      	nop
 800134e:	372c      	adds	r7, #44	; 0x2c
 8001350:	46bd      	mov	sp, r7
 8001352:	bc80      	pop	{r7}
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	10320000 	.word	0x10320000
 800135c:	10310000 	.word	0x10310000
 8001360:	10220000 	.word	0x10220000
 8001364:	10210000 	.word	0x10210000
 8001368:	10120000 	.word	0x10120000
 800136c:	10110000 	.word	0x10110000
 8001370:	40021000 	.word	0x40021000
 8001374:	40010000 	.word	0x40010000
 8001378:	40010800 	.word	0x40010800
 800137c:	40010c00 	.word	0x40010c00
 8001380:	40011000 	.word	0x40011000
 8001384:	40010400 	.word	0x40010400

08001388 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001388:	b480      	push	{r7}
 800138a:	b085      	sub	sp, #20
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	460b      	mov	r3, r1
 8001392:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	689a      	ldr	r2, [r3, #8]
 8001398:	887b      	ldrh	r3, [r7, #2]
 800139a:	4013      	ands	r3, r2
 800139c:	2b00      	cmp	r3, #0
 800139e:	d002      	beq.n	80013a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80013a0:	2301      	movs	r3, #1
 80013a2:	73fb      	strb	r3, [r7, #15]
 80013a4:	e001      	b.n	80013aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80013a6:	2300      	movs	r3, #0
 80013a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80013aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	3714      	adds	r7, #20
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bc80      	pop	{r7}
 80013b4:	4770      	bx	lr

080013b6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013b6:	b480      	push	{r7}
 80013b8:	b083      	sub	sp, #12
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]
 80013be:	460b      	mov	r3, r1
 80013c0:	807b      	strh	r3, [r7, #2]
 80013c2:	4613      	mov	r3, r2
 80013c4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013c6:	787b      	ldrb	r3, [r7, #1]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d003      	beq.n	80013d4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013cc:	887a      	ldrh	r2, [r7, #2]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80013d2:	e003      	b.n	80013dc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80013d4:	887b      	ldrh	r3, [r7, #2]
 80013d6:	041a      	lsls	r2, r3, #16
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	611a      	str	r2, [r3, #16]
}
 80013dc:	bf00      	nop
 80013de:	370c      	adds	r7, #12
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bc80      	pop	{r7}
 80013e4:	4770      	bx	lr

080013e6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80013e6:	b480      	push	{r7}
 80013e8:	b085      	sub	sp, #20
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	6078      	str	r0, [r7, #4]
 80013ee:	460b      	mov	r3, r1
 80013f0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	68db      	ldr	r3, [r3, #12]
 80013f6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013f8:	887a      	ldrh	r2, [r7, #2]
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	4013      	ands	r3, r2
 80013fe:	041a      	lsls	r2, r3, #16
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	43d9      	mvns	r1, r3
 8001404:	887b      	ldrh	r3, [r7, #2]
 8001406:	400b      	ands	r3, r1
 8001408:	431a      	orrs	r2, r3
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	611a      	str	r2, [r3, #16]
}
 800140e:	bf00      	nop
 8001410:	3714      	adds	r7, #20
 8001412:	46bd      	mov	sp, r7
 8001414:	bc80      	pop	{r7}
 8001416:	4770      	bx	lr

08001418 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b086      	sub	sp, #24
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d101      	bne.n	800142a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e26c      	b.n	8001904 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f003 0301 	and.w	r3, r3, #1
 8001432:	2b00      	cmp	r3, #0
 8001434:	f000 8087 	beq.w	8001546 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001438:	4b92      	ldr	r3, [pc, #584]	; (8001684 <HAL_RCC_OscConfig+0x26c>)
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f003 030c 	and.w	r3, r3, #12
 8001440:	2b04      	cmp	r3, #4
 8001442:	d00c      	beq.n	800145e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001444:	4b8f      	ldr	r3, [pc, #572]	; (8001684 <HAL_RCC_OscConfig+0x26c>)
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f003 030c 	and.w	r3, r3, #12
 800144c:	2b08      	cmp	r3, #8
 800144e:	d112      	bne.n	8001476 <HAL_RCC_OscConfig+0x5e>
 8001450:	4b8c      	ldr	r3, [pc, #560]	; (8001684 <HAL_RCC_OscConfig+0x26c>)
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001458:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800145c:	d10b      	bne.n	8001476 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800145e:	4b89      	ldr	r3, [pc, #548]	; (8001684 <HAL_RCC_OscConfig+0x26c>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001466:	2b00      	cmp	r3, #0
 8001468:	d06c      	beq.n	8001544 <HAL_RCC_OscConfig+0x12c>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d168      	bne.n	8001544 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001472:	2301      	movs	r3, #1
 8001474:	e246      	b.n	8001904 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800147e:	d106      	bne.n	800148e <HAL_RCC_OscConfig+0x76>
 8001480:	4b80      	ldr	r3, [pc, #512]	; (8001684 <HAL_RCC_OscConfig+0x26c>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a7f      	ldr	r2, [pc, #508]	; (8001684 <HAL_RCC_OscConfig+0x26c>)
 8001486:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800148a:	6013      	str	r3, [r2, #0]
 800148c:	e02e      	b.n	80014ec <HAL_RCC_OscConfig+0xd4>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d10c      	bne.n	80014b0 <HAL_RCC_OscConfig+0x98>
 8001496:	4b7b      	ldr	r3, [pc, #492]	; (8001684 <HAL_RCC_OscConfig+0x26c>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a7a      	ldr	r2, [pc, #488]	; (8001684 <HAL_RCC_OscConfig+0x26c>)
 800149c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014a0:	6013      	str	r3, [r2, #0]
 80014a2:	4b78      	ldr	r3, [pc, #480]	; (8001684 <HAL_RCC_OscConfig+0x26c>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a77      	ldr	r2, [pc, #476]	; (8001684 <HAL_RCC_OscConfig+0x26c>)
 80014a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014ac:	6013      	str	r3, [r2, #0]
 80014ae:	e01d      	b.n	80014ec <HAL_RCC_OscConfig+0xd4>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014b8:	d10c      	bne.n	80014d4 <HAL_RCC_OscConfig+0xbc>
 80014ba:	4b72      	ldr	r3, [pc, #456]	; (8001684 <HAL_RCC_OscConfig+0x26c>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a71      	ldr	r2, [pc, #452]	; (8001684 <HAL_RCC_OscConfig+0x26c>)
 80014c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014c4:	6013      	str	r3, [r2, #0]
 80014c6:	4b6f      	ldr	r3, [pc, #444]	; (8001684 <HAL_RCC_OscConfig+0x26c>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a6e      	ldr	r2, [pc, #440]	; (8001684 <HAL_RCC_OscConfig+0x26c>)
 80014cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014d0:	6013      	str	r3, [r2, #0]
 80014d2:	e00b      	b.n	80014ec <HAL_RCC_OscConfig+0xd4>
 80014d4:	4b6b      	ldr	r3, [pc, #428]	; (8001684 <HAL_RCC_OscConfig+0x26c>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a6a      	ldr	r2, [pc, #424]	; (8001684 <HAL_RCC_OscConfig+0x26c>)
 80014da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014de:	6013      	str	r3, [r2, #0]
 80014e0:	4b68      	ldr	r3, [pc, #416]	; (8001684 <HAL_RCC_OscConfig+0x26c>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a67      	ldr	r2, [pc, #412]	; (8001684 <HAL_RCC_OscConfig+0x26c>)
 80014e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014ea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d013      	beq.n	800151c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014f4:	f7ff fc06 	bl	8000d04 <HAL_GetTick>
 80014f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014fa:	e008      	b.n	800150e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014fc:	f7ff fc02 	bl	8000d04 <HAL_GetTick>
 8001500:	4602      	mov	r2, r0
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	2b64      	cmp	r3, #100	; 0x64
 8001508:	d901      	bls.n	800150e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800150a:	2303      	movs	r3, #3
 800150c:	e1fa      	b.n	8001904 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800150e:	4b5d      	ldr	r3, [pc, #372]	; (8001684 <HAL_RCC_OscConfig+0x26c>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001516:	2b00      	cmp	r3, #0
 8001518:	d0f0      	beq.n	80014fc <HAL_RCC_OscConfig+0xe4>
 800151a:	e014      	b.n	8001546 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800151c:	f7ff fbf2 	bl	8000d04 <HAL_GetTick>
 8001520:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001522:	e008      	b.n	8001536 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001524:	f7ff fbee 	bl	8000d04 <HAL_GetTick>
 8001528:	4602      	mov	r2, r0
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	2b64      	cmp	r3, #100	; 0x64
 8001530:	d901      	bls.n	8001536 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001532:	2303      	movs	r3, #3
 8001534:	e1e6      	b.n	8001904 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001536:	4b53      	ldr	r3, [pc, #332]	; (8001684 <HAL_RCC_OscConfig+0x26c>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800153e:	2b00      	cmp	r3, #0
 8001540:	d1f0      	bne.n	8001524 <HAL_RCC_OscConfig+0x10c>
 8001542:	e000      	b.n	8001546 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001544:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 0302 	and.w	r3, r3, #2
 800154e:	2b00      	cmp	r3, #0
 8001550:	d063      	beq.n	800161a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001552:	4b4c      	ldr	r3, [pc, #304]	; (8001684 <HAL_RCC_OscConfig+0x26c>)
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	f003 030c 	and.w	r3, r3, #12
 800155a:	2b00      	cmp	r3, #0
 800155c:	d00b      	beq.n	8001576 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800155e:	4b49      	ldr	r3, [pc, #292]	; (8001684 <HAL_RCC_OscConfig+0x26c>)
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	f003 030c 	and.w	r3, r3, #12
 8001566:	2b08      	cmp	r3, #8
 8001568:	d11c      	bne.n	80015a4 <HAL_RCC_OscConfig+0x18c>
 800156a:	4b46      	ldr	r3, [pc, #280]	; (8001684 <HAL_RCC_OscConfig+0x26c>)
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001572:	2b00      	cmp	r3, #0
 8001574:	d116      	bne.n	80015a4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001576:	4b43      	ldr	r3, [pc, #268]	; (8001684 <HAL_RCC_OscConfig+0x26c>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f003 0302 	and.w	r3, r3, #2
 800157e:	2b00      	cmp	r3, #0
 8001580:	d005      	beq.n	800158e <HAL_RCC_OscConfig+0x176>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	691b      	ldr	r3, [r3, #16]
 8001586:	2b01      	cmp	r3, #1
 8001588:	d001      	beq.n	800158e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	e1ba      	b.n	8001904 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800158e:	4b3d      	ldr	r3, [pc, #244]	; (8001684 <HAL_RCC_OscConfig+0x26c>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	695b      	ldr	r3, [r3, #20]
 800159a:	00db      	lsls	r3, r3, #3
 800159c:	4939      	ldr	r1, [pc, #228]	; (8001684 <HAL_RCC_OscConfig+0x26c>)
 800159e:	4313      	orrs	r3, r2
 80015a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015a2:	e03a      	b.n	800161a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	691b      	ldr	r3, [r3, #16]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d020      	beq.n	80015ee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015ac:	4b36      	ldr	r3, [pc, #216]	; (8001688 <HAL_RCC_OscConfig+0x270>)
 80015ae:	2201      	movs	r2, #1
 80015b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b2:	f7ff fba7 	bl	8000d04 <HAL_GetTick>
 80015b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015b8:	e008      	b.n	80015cc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015ba:	f7ff fba3 	bl	8000d04 <HAL_GetTick>
 80015be:	4602      	mov	r2, r0
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	2b02      	cmp	r3, #2
 80015c6:	d901      	bls.n	80015cc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80015c8:	2303      	movs	r3, #3
 80015ca:	e19b      	b.n	8001904 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015cc:	4b2d      	ldr	r3, [pc, #180]	; (8001684 <HAL_RCC_OscConfig+0x26c>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f003 0302 	and.w	r3, r3, #2
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d0f0      	beq.n	80015ba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015d8:	4b2a      	ldr	r3, [pc, #168]	; (8001684 <HAL_RCC_OscConfig+0x26c>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	695b      	ldr	r3, [r3, #20]
 80015e4:	00db      	lsls	r3, r3, #3
 80015e6:	4927      	ldr	r1, [pc, #156]	; (8001684 <HAL_RCC_OscConfig+0x26c>)
 80015e8:	4313      	orrs	r3, r2
 80015ea:	600b      	str	r3, [r1, #0]
 80015ec:	e015      	b.n	800161a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015ee:	4b26      	ldr	r3, [pc, #152]	; (8001688 <HAL_RCC_OscConfig+0x270>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f4:	f7ff fb86 	bl	8000d04 <HAL_GetTick>
 80015f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015fa:	e008      	b.n	800160e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015fc:	f7ff fb82 	bl	8000d04 <HAL_GetTick>
 8001600:	4602      	mov	r2, r0
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	2b02      	cmp	r3, #2
 8001608:	d901      	bls.n	800160e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800160a:	2303      	movs	r3, #3
 800160c:	e17a      	b.n	8001904 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800160e:	4b1d      	ldr	r3, [pc, #116]	; (8001684 <HAL_RCC_OscConfig+0x26c>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 0302 	and.w	r3, r3, #2
 8001616:	2b00      	cmp	r3, #0
 8001618:	d1f0      	bne.n	80015fc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f003 0308 	and.w	r3, r3, #8
 8001622:	2b00      	cmp	r3, #0
 8001624:	d03a      	beq.n	800169c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	699b      	ldr	r3, [r3, #24]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d019      	beq.n	8001662 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800162e:	4b17      	ldr	r3, [pc, #92]	; (800168c <HAL_RCC_OscConfig+0x274>)
 8001630:	2201      	movs	r2, #1
 8001632:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001634:	f7ff fb66 	bl	8000d04 <HAL_GetTick>
 8001638:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800163a:	e008      	b.n	800164e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800163c:	f7ff fb62 	bl	8000d04 <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	2b02      	cmp	r3, #2
 8001648:	d901      	bls.n	800164e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800164a:	2303      	movs	r3, #3
 800164c:	e15a      	b.n	8001904 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800164e:	4b0d      	ldr	r3, [pc, #52]	; (8001684 <HAL_RCC_OscConfig+0x26c>)
 8001650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001652:	f003 0302 	and.w	r3, r3, #2
 8001656:	2b00      	cmp	r3, #0
 8001658:	d0f0      	beq.n	800163c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800165a:	2001      	movs	r0, #1
 800165c:	f000 fad8 	bl	8001c10 <RCC_Delay>
 8001660:	e01c      	b.n	800169c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001662:	4b0a      	ldr	r3, [pc, #40]	; (800168c <HAL_RCC_OscConfig+0x274>)
 8001664:	2200      	movs	r2, #0
 8001666:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001668:	f7ff fb4c 	bl	8000d04 <HAL_GetTick>
 800166c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800166e:	e00f      	b.n	8001690 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001670:	f7ff fb48 	bl	8000d04 <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	2b02      	cmp	r3, #2
 800167c:	d908      	bls.n	8001690 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800167e:	2303      	movs	r3, #3
 8001680:	e140      	b.n	8001904 <HAL_RCC_OscConfig+0x4ec>
 8001682:	bf00      	nop
 8001684:	40021000 	.word	0x40021000
 8001688:	42420000 	.word	0x42420000
 800168c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001690:	4b9e      	ldr	r3, [pc, #632]	; (800190c <HAL_RCC_OscConfig+0x4f4>)
 8001692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001694:	f003 0302 	and.w	r3, r3, #2
 8001698:	2b00      	cmp	r3, #0
 800169a:	d1e9      	bne.n	8001670 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f003 0304 	and.w	r3, r3, #4
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	f000 80a6 	beq.w	80017f6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016aa:	2300      	movs	r3, #0
 80016ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016ae:	4b97      	ldr	r3, [pc, #604]	; (800190c <HAL_RCC_OscConfig+0x4f4>)
 80016b0:	69db      	ldr	r3, [r3, #28]
 80016b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d10d      	bne.n	80016d6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016ba:	4b94      	ldr	r3, [pc, #592]	; (800190c <HAL_RCC_OscConfig+0x4f4>)
 80016bc:	69db      	ldr	r3, [r3, #28]
 80016be:	4a93      	ldr	r2, [pc, #588]	; (800190c <HAL_RCC_OscConfig+0x4f4>)
 80016c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016c4:	61d3      	str	r3, [r2, #28]
 80016c6:	4b91      	ldr	r3, [pc, #580]	; (800190c <HAL_RCC_OscConfig+0x4f4>)
 80016c8:	69db      	ldr	r3, [r3, #28]
 80016ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ce:	60bb      	str	r3, [r7, #8]
 80016d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016d2:	2301      	movs	r3, #1
 80016d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016d6:	4b8e      	ldr	r3, [pc, #568]	; (8001910 <HAL_RCC_OscConfig+0x4f8>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d118      	bne.n	8001714 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016e2:	4b8b      	ldr	r3, [pc, #556]	; (8001910 <HAL_RCC_OscConfig+0x4f8>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a8a      	ldr	r2, [pc, #552]	; (8001910 <HAL_RCC_OscConfig+0x4f8>)
 80016e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016ee:	f7ff fb09 	bl	8000d04 <HAL_GetTick>
 80016f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016f4:	e008      	b.n	8001708 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016f6:	f7ff fb05 	bl	8000d04 <HAL_GetTick>
 80016fa:	4602      	mov	r2, r0
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	2b64      	cmp	r3, #100	; 0x64
 8001702:	d901      	bls.n	8001708 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001704:	2303      	movs	r3, #3
 8001706:	e0fd      	b.n	8001904 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001708:	4b81      	ldr	r3, [pc, #516]	; (8001910 <HAL_RCC_OscConfig+0x4f8>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001710:	2b00      	cmp	r3, #0
 8001712:	d0f0      	beq.n	80016f6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	2b01      	cmp	r3, #1
 800171a:	d106      	bne.n	800172a <HAL_RCC_OscConfig+0x312>
 800171c:	4b7b      	ldr	r3, [pc, #492]	; (800190c <HAL_RCC_OscConfig+0x4f4>)
 800171e:	6a1b      	ldr	r3, [r3, #32]
 8001720:	4a7a      	ldr	r2, [pc, #488]	; (800190c <HAL_RCC_OscConfig+0x4f4>)
 8001722:	f043 0301 	orr.w	r3, r3, #1
 8001726:	6213      	str	r3, [r2, #32]
 8001728:	e02d      	b.n	8001786 <HAL_RCC_OscConfig+0x36e>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	68db      	ldr	r3, [r3, #12]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d10c      	bne.n	800174c <HAL_RCC_OscConfig+0x334>
 8001732:	4b76      	ldr	r3, [pc, #472]	; (800190c <HAL_RCC_OscConfig+0x4f4>)
 8001734:	6a1b      	ldr	r3, [r3, #32]
 8001736:	4a75      	ldr	r2, [pc, #468]	; (800190c <HAL_RCC_OscConfig+0x4f4>)
 8001738:	f023 0301 	bic.w	r3, r3, #1
 800173c:	6213      	str	r3, [r2, #32]
 800173e:	4b73      	ldr	r3, [pc, #460]	; (800190c <HAL_RCC_OscConfig+0x4f4>)
 8001740:	6a1b      	ldr	r3, [r3, #32]
 8001742:	4a72      	ldr	r2, [pc, #456]	; (800190c <HAL_RCC_OscConfig+0x4f4>)
 8001744:	f023 0304 	bic.w	r3, r3, #4
 8001748:	6213      	str	r3, [r2, #32]
 800174a:	e01c      	b.n	8001786 <HAL_RCC_OscConfig+0x36e>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	2b05      	cmp	r3, #5
 8001752:	d10c      	bne.n	800176e <HAL_RCC_OscConfig+0x356>
 8001754:	4b6d      	ldr	r3, [pc, #436]	; (800190c <HAL_RCC_OscConfig+0x4f4>)
 8001756:	6a1b      	ldr	r3, [r3, #32]
 8001758:	4a6c      	ldr	r2, [pc, #432]	; (800190c <HAL_RCC_OscConfig+0x4f4>)
 800175a:	f043 0304 	orr.w	r3, r3, #4
 800175e:	6213      	str	r3, [r2, #32]
 8001760:	4b6a      	ldr	r3, [pc, #424]	; (800190c <HAL_RCC_OscConfig+0x4f4>)
 8001762:	6a1b      	ldr	r3, [r3, #32]
 8001764:	4a69      	ldr	r2, [pc, #420]	; (800190c <HAL_RCC_OscConfig+0x4f4>)
 8001766:	f043 0301 	orr.w	r3, r3, #1
 800176a:	6213      	str	r3, [r2, #32]
 800176c:	e00b      	b.n	8001786 <HAL_RCC_OscConfig+0x36e>
 800176e:	4b67      	ldr	r3, [pc, #412]	; (800190c <HAL_RCC_OscConfig+0x4f4>)
 8001770:	6a1b      	ldr	r3, [r3, #32]
 8001772:	4a66      	ldr	r2, [pc, #408]	; (800190c <HAL_RCC_OscConfig+0x4f4>)
 8001774:	f023 0301 	bic.w	r3, r3, #1
 8001778:	6213      	str	r3, [r2, #32]
 800177a:	4b64      	ldr	r3, [pc, #400]	; (800190c <HAL_RCC_OscConfig+0x4f4>)
 800177c:	6a1b      	ldr	r3, [r3, #32]
 800177e:	4a63      	ldr	r2, [pc, #396]	; (800190c <HAL_RCC_OscConfig+0x4f4>)
 8001780:	f023 0304 	bic.w	r3, r3, #4
 8001784:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	68db      	ldr	r3, [r3, #12]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d015      	beq.n	80017ba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800178e:	f7ff fab9 	bl	8000d04 <HAL_GetTick>
 8001792:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001794:	e00a      	b.n	80017ac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001796:	f7ff fab5 	bl	8000d04 <HAL_GetTick>
 800179a:	4602      	mov	r2, r0
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	1ad3      	subs	r3, r2, r3
 80017a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d901      	bls.n	80017ac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80017a8:	2303      	movs	r3, #3
 80017aa:	e0ab      	b.n	8001904 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017ac:	4b57      	ldr	r3, [pc, #348]	; (800190c <HAL_RCC_OscConfig+0x4f4>)
 80017ae:	6a1b      	ldr	r3, [r3, #32]
 80017b0:	f003 0302 	and.w	r3, r3, #2
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d0ee      	beq.n	8001796 <HAL_RCC_OscConfig+0x37e>
 80017b8:	e014      	b.n	80017e4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017ba:	f7ff faa3 	bl	8000d04 <HAL_GetTick>
 80017be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017c0:	e00a      	b.n	80017d8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017c2:	f7ff fa9f 	bl	8000d04 <HAL_GetTick>
 80017c6:	4602      	mov	r2, r0
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d901      	bls.n	80017d8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80017d4:	2303      	movs	r3, #3
 80017d6:	e095      	b.n	8001904 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017d8:	4b4c      	ldr	r3, [pc, #304]	; (800190c <HAL_RCC_OscConfig+0x4f4>)
 80017da:	6a1b      	ldr	r3, [r3, #32]
 80017dc:	f003 0302 	and.w	r3, r3, #2
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d1ee      	bne.n	80017c2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80017e4:	7dfb      	ldrb	r3, [r7, #23]
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d105      	bne.n	80017f6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017ea:	4b48      	ldr	r3, [pc, #288]	; (800190c <HAL_RCC_OscConfig+0x4f4>)
 80017ec:	69db      	ldr	r3, [r3, #28]
 80017ee:	4a47      	ldr	r2, [pc, #284]	; (800190c <HAL_RCC_OscConfig+0x4f4>)
 80017f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017f4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	69db      	ldr	r3, [r3, #28]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	f000 8081 	beq.w	8001902 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001800:	4b42      	ldr	r3, [pc, #264]	; (800190c <HAL_RCC_OscConfig+0x4f4>)
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	f003 030c 	and.w	r3, r3, #12
 8001808:	2b08      	cmp	r3, #8
 800180a:	d061      	beq.n	80018d0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	69db      	ldr	r3, [r3, #28]
 8001810:	2b02      	cmp	r3, #2
 8001812:	d146      	bne.n	80018a2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001814:	4b3f      	ldr	r3, [pc, #252]	; (8001914 <HAL_RCC_OscConfig+0x4fc>)
 8001816:	2200      	movs	r2, #0
 8001818:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800181a:	f7ff fa73 	bl	8000d04 <HAL_GetTick>
 800181e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001820:	e008      	b.n	8001834 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001822:	f7ff fa6f 	bl	8000d04 <HAL_GetTick>
 8001826:	4602      	mov	r2, r0
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	1ad3      	subs	r3, r2, r3
 800182c:	2b02      	cmp	r3, #2
 800182e:	d901      	bls.n	8001834 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001830:	2303      	movs	r3, #3
 8001832:	e067      	b.n	8001904 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001834:	4b35      	ldr	r3, [pc, #212]	; (800190c <HAL_RCC_OscConfig+0x4f4>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800183c:	2b00      	cmp	r3, #0
 800183e:	d1f0      	bne.n	8001822 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6a1b      	ldr	r3, [r3, #32]
 8001844:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001848:	d108      	bne.n	800185c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800184a:	4b30      	ldr	r3, [pc, #192]	; (800190c <HAL_RCC_OscConfig+0x4f4>)
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	492d      	ldr	r1, [pc, #180]	; (800190c <HAL_RCC_OscConfig+0x4f4>)
 8001858:	4313      	orrs	r3, r2
 800185a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800185c:	4b2b      	ldr	r3, [pc, #172]	; (800190c <HAL_RCC_OscConfig+0x4f4>)
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6a19      	ldr	r1, [r3, #32]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800186c:	430b      	orrs	r3, r1
 800186e:	4927      	ldr	r1, [pc, #156]	; (800190c <HAL_RCC_OscConfig+0x4f4>)
 8001870:	4313      	orrs	r3, r2
 8001872:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001874:	4b27      	ldr	r3, [pc, #156]	; (8001914 <HAL_RCC_OscConfig+0x4fc>)
 8001876:	2201      	movs	r2, #1
 8001878:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800187a:	f7ff fa43 	bl	8000d04 <HAL_GetTick>
 800187e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001880:	e008      	b.n	8001894 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001882:	f7ff fa3f 	bl	8000d04 <HAL_GetTick>
 8001886:	4602      	mov	r2, r0
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	2b02      	cmp	r3, #2
 800188e:	d901      	bls.n	8001894 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001890:	2303      	movs	r3, #3
 8001892:	e037      	b.n	8001904 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001894:	4b1d      	ldr	r3, [pc, #116]	; (800190c <HAL_RCC_OscConfig+0x4f4>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800189c:	2b00      	cmp	r3, #0
 800189e:	d0f0      	beq.n	8001882 <HAL_RCC_OscConfig+0x46a>
 80018a0:	e02f      	b.n	8001902 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018a2:	4b1c      	ldr	r3, [pc, #112]	; (8001914 <HAL_RCC_OscConfig+0x4fc>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018a8:	f7ff fa2c 	bl	8000d04 <HAL_GetTick>
 80018ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018ae:	e008      	b.n	80018c2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018b0:	f7ff fa28 	bl	8000d04 <HAL_GetTick>
 80018b4:	4602      	mov	r2, r0
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	2b02      	cmp	r3, #2
 80018bc:	d901      	bls.n	80018c2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80018be:	2303      	movs	r3, #3
 80018c0:	e020      	b.n	8001904 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018c2:	4b12      	ldr	r3, [pc, #72]	; (800190c <HAL_RCC_OscConfig+0x4f4>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d1f0      	bne.n	80018b0 <HAL_RCC_OscConfig+0x498>
 80018ce:	e018      	b.n	8001902 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	69db      	ldr	r3, [r3, #28]
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d101      	bne.n	80018dc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80018d8:	2301      	movs	r3, #1
 80018da:	e013      	b.n	8001904 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80018dc:	4b0b      	ldr	r3, [pc, #44]	; (800190c <HAL_RCC_OscConfig+0x4f4>)
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6a1b      	ldr	r3, [r3, #32]
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d106      	bne.n	80018fe <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d001      	beq.n	8001902 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e000      	b.n	8001904 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001902:	2300      	movs	r3, #0
}
 8001904:	4618      	mov	r0, r3
 8001906:	3718      	adds	r7, #24
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	40021000 	.word	0x40021000
 8001910:	40007000 	.word	0x40007000
 8001914:	42420060 	.word	0x42420060

08001918 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d101      	bne.n	800192c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	e0d0      	b.n	8001ace <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800192c:	4b6a      	ldr	r3, [pc, #424]	; (8001ad8 <HAL_RCC_ClockConfig+0x1c0>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 0307 	and.w	r3, r3, #7
 8001934:	683a      	ldr	r2, [r7, #0]
 8001936:	429a      	cmp	r2, r3
 8001938:	d910      	bls.n	800195c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800193a:	4b67      	ldr	r3, [pc, #412]	; (8001ad8 <HAL_RCC_ClockConfig+0x1c0>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f023 0207 	bic.w	r2, r3, #7
 8001942:	4965      	ldr	r1, [pc, #404]	; (8001ad8 <HAL_RCC_ClockConfig+0x1c0>)
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	4313      	orrs	r3, r2
 8001948:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800194a:	4b63      	ldr	r3, [pc, #396]	; (8001ad8 <HAL_RCC_ClockConfig+0x1c0>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 0307 	and.w	r3, r3, #7
 8001952:	683a      	ldr	r2, [r7, #0]
 8001954:	429a      	cmp	r2, r3
 8001956:	d001      	beq.n	800195c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	e0b8      	b.n	8001ace <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 0302 	and.w	r3, r3, #2
 8001964:	2b00      	cmp	r3, #0
 8001966:	d020      	beq.n	80019aa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f003 0304 	and.w	r3, r3, #4
 8001970:	2b00      	cmp	r3, #0
 8001972:	d005      	beq.n	8001980 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001974:	4b59      	ldr	r3, [pc, #356]	; (8001adc <HAL_RCC_ClockConfig+0x1c4>)
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	4a58      	ldr	r2, [pc, #352]	; (8001adc <HAL_RCC_ClockConfig+0x1c4>)
 800197a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800197e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 0308 	and.w	r3, r3, #8
 8001988:	2b00      	cmp	r3, #0
 800198a:	d005      	beq.n	8001998 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800198c:	4b53      	ldr	r3, [pc, #332]	; (8001adc <HAL_RCC_ClockConfig+0x1c4>)
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	4a52      	ldr	r2, [pc, #328]	; (8001adc <HAL_RCC_ClockConfig+0x1c4>)
 8001992:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001996:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001998:	4b50      	ldr	r3, [pc, #320]	; (8001adc <HAL_RCC_ClockConfig+0x1c4>)
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	494d      	ldr	r1, [pc, #308]	; (8001adc <HAL_RCC_ClockConfig+0x1c4>)
 80019a6:	4313      	orrs	r3, r2
 80019a8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 0301 	and.w	r3, r3, #1
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d040      	beq.n	8001a38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d107      	bne.n	80019ce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019be:	4b47      	ldr	r3, [pc, #284]	; (8001adc <HAL_RCC_ClockConfig+0x1c4>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d115      	bne.n	80019f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e07f      	b.n	8001ace <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d107      	bne.n	80019e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019d6:	4b41      	ldr	r3, [pc, #260]	; (8001adc <HAL_RCC_ClockConfig+0x1c4>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d109      	bne.n	80019f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e073      	b.n	8001ace <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019e6:	4b3d      	ldr	r3, [pc, #244]	; (8001adc <HAL_RCC_ClockConfig+0x1c4>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0302 	and.w	r3, r3, #2
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d101      	bne.n	80019f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e06b      	b.n	8001ace <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019f6:	4b39      	ldr	r3, [pc, #228]	; (8001adc <HAL_RCC_ClockConfig+0x1c4>)
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	f023 0203 	bic.w	r2, r3, #3
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	4936      	ldr	r1, [pc, #216]	; (8001adc <HAL_RCC_ClockConfig+0x1c4>)
 8001a04:	4313      	orrs	r3, r2
 8001a06:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a08:	f7ff f97c 	bl	8000d04 <HAL_GetTick>
 8001a0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a0e:	e00a      	b.n	8001a26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a10:	f7ff f978 	bl	8000d04 <HAL_GetTick>
 8001a14:	4602      	mov	r2, r0
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d901      	bls.n	8001a26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e053      	b.n	8001ace <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a26:	4b2d      	ldr	r3, [pc, #180]	; (8001adc <HAL_RCC_ClockConfig+0x1c4>)
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	f003 020c 	and.w	r2, r3, #12
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d1eb      	bne.n	8001a10 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a38:	4b27      	ldr	r3, [pc, #156]	; (8001ad8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 0307 	and.w	r3, r3, #7
 8001a40:	683a      	ldr	r2, [r7, #0]
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d210      	bcs.n	8001a68 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a46:	4b24      	ldr	r3, [pc, #144]	; (8001ad8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f023 0207 	bic.w	r2, r3, #7
 8001a4e:	4922      	ldr	r1, [pc, #136]	; (8001ad8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	4313      	orrs	r3, r2
 8001a54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a56:	4b20      	ldr	r3, [pc, #128]	; (8001ad8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0307 	and.w	r3, r3, #7
 8001a5e:	683a      	ldr	r2, [r7, #0]
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d001      	beq.n	8001a68 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	e032      	b.n	8001ace <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0304 	and.w	r3, r3, #4
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d008      	beq.n	8001a86 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a74:	4b19      	ldr	r3, [pc, #100]	; (8001adc <HAL_RCC_ClockConfig+0x1c4>)
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	4916      	ldr	r1, [pc, #88]	; (8001adc <HAL_RCC_ClockConfig+0x1c4>)
 8001a82:	4313      	orrs	r3, r2
 8001a84:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0308 	and.w	r3, r3, #8
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d009      	beq.n	8001aa6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a92:	4b12      	ldr	r3, [pc, #72]	; (8001adc <HAL_RCC_ClockConfig+0x1c4>)
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	691b      	ldr	r3, [r3, #16]
 8001a9e:	00db      	lsls	r3, r3, #3
 8001aa0:	490e      	ldr	r1, [pc, #56]	; (8001adc <HAL_RCC_ClockConfig+0x1c4>)
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001aa6:	f000 f821 	bl	8001aec <HAL_RCC_GetSysClockFreq>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	4b0b      	ldr	r3, [pc, #44]	; (8001adc <HAL_RCC_ClockConfig+0x1c4>)
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	091b      	lsrs	r3, r3, #4
 8001ab2:	f003 030f 	and.w	r3, r3, #15
 8001ab6:	490a      	ldr	r1, [pc, #40]	; (8001ae0 <HAL_RCC_ClockConfig+0x1c8>)
 8001ab8:	5ccb      	ldrb	r3, [r1, r3]
 8001aba:	fa22 f303 	lsr.w	r3, r2, r3
 8001abe:	4a09      	ldr	r2, [pc, #36]	; (8001ae4 <HAL_RCC_ClockConfig+0x1cc>)
 8001ac0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001ac2:	4b09      	ldr	r3, [pc, #36]	; (8001ae8 <HAL_RCC_ClockConfig+0x1d0>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f7ff f8da 	bl	8000c80 <HAL_InitTick>

  return HAL_OK;
 8001acc:	2300      	movs	r3, #0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3710      	adds	r7, #16
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	40022000 	.word	0x40022000
 8001adc:	40021000 	.word	0x40021000
 8001ae0:	08003710 	.word	0x08003710
 8001ae4:	20000000 	.word	0x20000000
 8001ae8:	20000004 	.word	0x20000004

08001aec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001aec:	b490      	push	{r4, r7}
 8001aee:	b08a      	sub	sp, #40	; 0x28
 8001af0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001af2:	4b2a      	ldr	r3, [pc, #168]	; (8001b9c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001af4:	1d3c      	adds	r4, r7, #4
 8001af6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001af8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001afc:	f240 2301 	movw	r3, #513	; 0x201
 8001b00:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b02:	2300      	movs	r3, #0
 8001b04:	61fb      	str	r3, [r7, #28]
 8001b06:	2300      	movs	r3, #0
 8001b08:	61bb      	str	r3, [r7, #24]
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	627b      	str	r3, [r7, #36]	; 0x24
 8001b0e:	2300      	movs	r3, #0
 8001b10:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001b12:	2300      	movs	r3, #0
 8001b14:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001b16:	4b22      	ldr	r3, [pc, #136]	; (8001ba0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	f003 030c 	and.w	r3, r3, #12
 8001b22:	2b04      	cmp	r3, #4
 8001b24:	d002      	beq.n	8001b2c <HAL_RCC_GetSysClockFreq+0x40>
 8001b26:	2b08      	cmp	r3, #8
 8001b28:	d003      	beq.n	8001b32 <HAL_RCC_GetSysClockFreq+0x46>
 8001b2a:	e02d      	b.n	8001b88 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b2c:	4b1d      	ldr	r3, [pc, #116]	; (8001ba4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b2e:	623b      	str	r3, [r7, #32]
      break;
 8001b30:	e02d      	b.n	8001b8e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	0c9b      	lsrs	r3, r3, #18
 8001b36:	f003 030f 	and.w	r3, r3, #15
 8001b3a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001b3e:	4413      	add	r3, r2
 8001b40:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001b44:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d013      	beq.n	8001b78 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b50:	4b13      	ldr	r3, [pc, #76]	; (8001ba0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	0c5b      	lsrs	r3, r3, #17
 8001b56:	f003 0301 	and.w	r3, r3, #1
 8001b5a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001b5e:	4413      	add	r3, r2
 8001b60:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001b64:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	4a0e      	ldr	r2, [pc, #56]	; (8001ba4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b6a:	fb02 f203 	mul.w	r2, r2, r3
 8001b6e:	69bb      	ldr	r3, [r7, #24]
 8001b70:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b74:	627b      	str	r3, [r7, #36]	; 0x24
 8001b76:	e004      	b.n	8001b82 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	4a0b      	ldr	r2, [pc, #44]	; (8001ba8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001b7c:	fb02 f303 	mul.w	r3, r2, r3
 8001b80:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b84:	623b      	str	r3, [r7, #32]
      break;
 8001b86:	e002      	b.n	8001b8e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b88:	4b06      	ldr	r3, [pc, #24]	; (8001ba4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b8a:	623b      	str	r3, [r7, #32]
      break;
 8001b8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b8e:	6a3b      	ldr	r3, [r7, #32]
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3728      	adds	r7, #40	; 0x28
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bc90      	pop	{r4, r7}
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	08003700 	.word	0x08003700
 8001ba0:	40021000 	.word	0x40021000
 8001ba4:	007a1200 	.word	0x007a1200
 8001ba8:	003d0900 	.word	0x003d0900

08001bac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bb0:	4b02      	ldr	r3, [pc, #8]	; (8001bbc <HAL_RCC_GetHCLKFreq+0x10>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bc80      	pop	{r7}
 8001bba:	4770      	bx	lr
 8001bbc:	20000000 	.word	0x20000000

08001bc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001bc4:	f7ff fff2 	bl	8001bac <HAL_RCC_GetHCLKFreq>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	4b05      	ldr	r3, [pc, #20]	; (8001be0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	0a1b      	lsrs	r3, r3, #8
 8001bd0:	f003 0307 	and.w	r3, r3, #7
 8001bd4:	4903      	ldr	r1, [pc, #12]	; (8001be4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bd6:	5ccb      	ldrb	r3, [r1, r3]
 8001bd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	40021000 	.word	0x40021000
 8001be4:	08003720 	.word	0x08003720

08001be8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001bec:	f7ff ffde 	bl	8001bac <HAL_RCC_GetHCLKFreq>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	4b05      	ldr	r3, [pc, #20]	; (8001c08 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	0adb      	lsrs	r3, r3, #11
 8001bf8:	f003 0307 	and.w	r3, r3, #7
 8001bfc:	4903      	ldr	r1, [pc, #12]	; (8001c0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001bfe:	5ccb      	ldrb	r3, [r1, r3]
 8001c00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	40021000 	.word	0x40021000
 8001c0c:	08003720 	.word	0x08003720

08001c10 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b085      	sub	sp, #20
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001c18:	4b0a      	ldr	r3, [pc, #40]	; (8001c44 <RCC_Delay+0x34>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a0a      	ldr	r2, [pc, #40]	; (8001c48 <RCC_Delay+0x38>)
 8001c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c22:	0a5b      	lsrs	r3, r3, #9
 8001c24:	687a      	ldr	r2, [r7, #4]
 8001c26:	fb02 f303 	mul.w	r3, r2, r3
 8001c2a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001c2c:	bf00      	nop
  }
  while (Delay --);
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	1e5a      	subs	r2, r3, #1
 8001c32:	60fa      	str	r2, [r7, #12]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d1f9      	bne.n	8001c2c <RCC_Delay+0x1c>
}
 8001c38:	bf00      	nop
 8001c3a:	bf00      	nop
 8001c3c:	3714      	adds	r7, #20
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bc80      	pop	{r7}
 8001c42:	4770      	bx	lr
 8001c44:	20000000 	.word	0x20000000
 8001c48:	10624dd3 	.word	0x10624dd3

08001c4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d101      	bne.n	8001c5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e041      	b.n	8001ce2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d106      	bne.n	8001c78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f7fe fed8 	bl	8000a28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2202      	movs	r2, #2
 8001c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	3304      	adds	r3, #4
 8001c88:	4619      	mov	r1, r3
 8001c8a:	4610      	mov	r0, r2
 8001c8c:	f000 fa6a 	bl	8002164 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2201      	movs	r2, #1
 8001c94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2201      	movs	r2, #1
 8001cac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2201      	movs	r2, #1
 8001cbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2201      	movs	r2, #1
 8001ccc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2201      	movs	r2, #1
 8001cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ce0:	2300      	movs	r3, #0
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3708      	adds	r7, #8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
	...

08001cec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b085      	sub	sp, #20
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d001      	beq.n	8001d04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e035      	b.n	8001d70 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2202      	movs	r2, #2
 8001d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	68da      	ldr	r2, [r3, #12]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f042 0201 	orr.w	r2, r2, #1
 8001d1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a16      	ldr	r2, [pc, #88]	; (8001d7c <HAL_TIM_Base_Start_IT+0x90>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d009      	beq.n	8001d3a <HAL_TIM_Base_Start_IT+0x4e>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d2e:	d004      	beq.n	8001d3a <HAL_TIM_Base_Start_IT+0x4e>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a12      	ldr	r2, [pc, #72]	; (8001d80 <HAL_TIM_Base_Start_IT+0x94>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d111      	bne.n	8001d5e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	f003 0307 	and.w	r3, r3, #7
 8001d44:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	2b06      	cmp	r3, #6
 8001d4a:	d010      	beq.n	8001d6e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f042 0201 	orr.w	r2, r2, #1
 8001d5a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d5c:	e007      	b.n	8001d6e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f042 0201 	orr.w	r2, r2, #1
 8001d6c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d6e:	2300      	movs	r3, #0
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3714      	adds	r7, #20
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bc80      	pop	{r7}
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	40012c00 	.word	0x40012c00
 8001d80:	40000400 	.word	0x40000400

08001d84 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	691b      	ldr	r3, [r3, #16]
 8001d92:	f003 0302 	and.w	r3, r3, #2
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d122      	bne.n	8001de0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	f003 0302 	and.w	r3, r3, #2
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	d11b      	bne.n	8001de0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f06f 0202 	mvn.w	r2, #2
 8001db0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2201      	movs	r2, #1
 8001db6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	699b      	ldr	r3, [r3, #24]
 8001dbe:	f003 0303 	and.w	r3, r3, #3
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d003      	beq.n	8001dce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f000 f9b1 	bl	800212e <HAL_TIM_IC_CaptureCallback>
 8001dcc:	e005      	b.n	8001dda <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f000 f9a4 	bl	800211c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f000 f9b3 	bl	8002140 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	691b      	ldr	r3, [r3, #16]
 8001de6:	f003 0304 	and.w	r3, r3, #4
 8001dea:	2b04      	cmp	r3, #4
 8001dec:	d122      	bne.n	8001e34 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	f003 0304 	and.w	r3, r3, #4
 8001df8:	2b04      	cmp	r3, #4
 8001dfa:	d11b      	bne.n	8001e34 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f06f 0204 	mvn.w	r2, #4
 8001e04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2202      	movs	r2, #2
 8001e0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	699b      	ldr	r3, [r3, #24]
 8001e12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d003      	beq.n	8001e22 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f000 f987 	bl	800212e <HAL_TIM_IC_CaptureCallback>
 8001e20:	e005      	b.n	8001e2e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f000 f97a 	bl	800211c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f000 f989 	bl	8002140 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2200      	movs	r2, #0
 8001e32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	691b      	ldr	r3, [r3, #16]
 8001e3a:	f003 0308 	and.w	r3, r3, #8
 8001e3e:	2b08      	cmp	r3, #8
 8001e40:	d122      	bne.n	8001e88 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	f003 0308 	and.w	r3, r3, #8
 8001e4c:	2b08      	cmp	r3, #8
 8001e4e:	d11b      	bne.n	8001e88 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f06f 0208 	mvn.w	r2, #8
 8001e58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2204      	movs	r2, #4
 8001e5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	69db      	ldr	r3, [r3, #28]
 8001e66:	f003 0303 	and.w	r3, r3, #3
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d003      	beq.n	8001e76 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f000 f95d 	bl	800212e <HAL_TIM_IC_CaptureCallback>
 8001e74:	e005      	b.n	8001e82 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f000 f950 	bl	800211c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e7c:	6878      	ldr	r0, [r7, #4]
 8001e7e:	f000 f95f 	bl	8002140 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2200      	movs	r2, #0
 8001e86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	691b      	ldr	r3, [r3, #16]
 8001e8e:	f003 0310 	and.w	r3, r3, #16
 8001e92:	2b10      	cmp	r3, #16
 8001e94:	d122      	bne.n	8001edc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	f003 0310 	and.w	r3, r3, #16
 8001ea0:	2b10      	cmp	r3, #16
 8001ea2:	d11b      	bne.n	8001edc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f06f 0210 	mvn.w	r2, #16
 8001eac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2208      	movs	r2, #8
 8001eb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	69db      	ldr	r3, [r3, #28]
 8001eba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d003      	beq.n	8001eca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f000 f933 	bl	800212e <HAL_TIM_IC_CaptureCallback>
 8001ec8:	e005      	b.n	8001ed6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f000 f926 	bl	800211c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	f000 f935 	bl	8002140 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	691b      	ldr	r3, [r3, #16]
 8001ee2:	f003 0301 	and.w	r3, r3, #1
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d10e      	bne.n	8001f08 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	f003 0301 	and.w	r3, r3, #1
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d107      	bne.n	8001f08 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f06f 0201 	mvn.w	r2, #1
 8001f00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f7fe fbae 	bl	8000664 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	691b      	ldr	r3, [r3, #16]
 8001f0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f12:	2b80      	cmp	r3, #128	; 0x80
 8001f14:	d10e      	bne.n	8001f34 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f20:	2b80      	cmp	r3, #128	; 0x80
 8001f22:	d107      	bne.n	8001f34 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f000 fa67 	bl	8002402 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	691b      	ldr	r3, [r3, #16]
 8001f3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f3e:	2b40      	cmp	r3, #64	; 0x40
 8001f40:	d10e      	bne.n	8001f60 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f4c:	2b40      	cmp	r3, #64	; 0x40
 8001f4e:	d107      	bne.n	8001f60 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f000 f8f9 	bl	8002152 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	691b      	ldr	r3, [r3, #16]
 8001f66:	f003 0320 	and.w	r3, r3, #32
 8001f6a:	2b20      	cmp	r3, #32
 8001f6c:	d10e      	bne.n	8001f8c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	f003 0320 	and.w	r3, r3, #32
 8001f78:	2b20      	cmp	r3, #32
 8001f7a:	d107      	bne.n	8001f8c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f06f 0220 	mvn.w	r2, #32
 8001f84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f000 fa32 	bl	80023f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f8c:	bf00      	nop
 8001f8e:	3708      	adds	r7, #8
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}

08001f94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b084      	sub	sp, #16
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d101      	bne.n	8001fac <HAL_TIM_ConfigClockSource+0x18>
 8001fa8:	2302      	movs	r3, #2
 8001faa:	e0b3      	b.n	8002114 <HAL_TIM_ConfigClockSource+0x180>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2201      	movs	r2, #1
 8001fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2202      	movs	r2, #2
 8001fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001fca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001fd2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	68fa      	ldr	r2, [r7, #12]
 8001fda:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001fe4:	d03e      	beq.n	8002064 <HAL_TIM_ConfigClockSource+0xd0>
 8001fe6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001fea:	f200 8087 	bhi.w	80020fc <HAL_TIM_ConfigClockSource+0x168>
 8001fee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ff2:	f000 8085 	beq.w	8002100 <HAL_TIM_ConfigClockSource+0x16c>
 8001ff6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ffa:	d87f      	bhi.n	80020fc <HAL_TIM_ConfigClockSource+0x168>
 8001ffc:	2b70      	cmp	r3, #112	; 0x70
 8001ffe:	d01a      	beq.n	8002036 <HAL_TIM_ConfigClockSource+0xa2>
 8002000:	2b70      	cmp	r3, #112	; 0x70
 8002002:	d87b      	bhi.n	80020fc <HAL_TIM_ConfigClockSource+0x168>
 8002004:	2b60      	cmp	r3, #96	; 0x60
 8002006:	d050      	beq.n	80020aa <HAL_TIM_ConfigClockSource+0x116>
 8002008:	2b60      	cmp	r3, #96	; 0x60
 800200a:	d877      	bhi.n	80020fc <HAL_TIM_ConfigClockSource+0x168>
 800200c:	2b50      	cmp	r3, #80	; 0x50
 800200e:	d03c      	beq.n	800208a <HAL_TIM_ConfigClockSource+0xf6>
 8002010:	2b50      	cmp	r3, #80	; 0x50
 8002012:	d873      	bhi.n	80020fc <HAL_TIM_ConfigClockSource+0x168>
 8002014:	2b40      	cmp	r3, #64	; 0x40
 8002016:	d058      	beq.n	80020ca <HAL_TIM_ConfigClockSource+0x136>
 8002018:	2b40      	cmp	r3, #64	; 0x40
 800201a:	d86f      	bhi.n	80020fc <HAL_TIM_ConfigClockSource+0x168>
 800201c:	2b30      	cmp	r3, #48	; 0x30
 800201e:	d064      	beq.n	80020ea <HAL_TIM_ConfigClockSource+0x156>
 8002020:	2b30      	cmp	r3, #48	; 0x30
 8002022:	d86b      	bhi.n	80020fc <HAL_TIM_ConfigClockSource+0x168>
 8002024:	2b20      	cmp	r3, #32
 8002026:	d060      	beq.n	80020ea <HAL_TIM_ConfigClockSource+0x156>
 8002028:	2b20      	cmp	r3, #32
 800202a:	d867      	bhi.n	80020fc <HAL_TIM_ConfigClockSource+0x168>
 800202c:	2b00      	cmp	r3, #0
 800202e:	d05c      	beq.n	80020ea <HAL_TIM_ConfigClockSource+0x156>
 8002030:	2b10      	cmp	r3, #16
 8002032:	d05a      	beq.n	80020ea <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002034:	e062      	b.n	80020fc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6818      	ldr	r0, [r3, #0]
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	6899      	ldr	r1, [r3, #8]
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	685a      	ldr	r2, [r3, #4]
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	68db      	ldr	r3, [r3, #12]
 8002046:	f000 f95c 	bl	8002302 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002058:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	68fa      	ldr	r2, [r7, #12]
 8002060:	609a      	str	r2, [r3, #8]
      break;
 8002062:	e04e      	b.n	8002102 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6818      	ldr	r0, [r3, #0]
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	6899      	ldr	r1, [r3, #8]
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	685a      	ldr	r2, [r3, #4]
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	f000 f945 	bl	8002302 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	689a      	ldr	r2, [r3, #8]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002086:	609a      	str	r2, [r3, #8]
      break;
 8002088:	e03b      	b.n	8002102 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6818      	ldr	r0, [r3, #0]
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	6859      	ldr	r1, [r3, #4]
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	68db      	ldr	r3, [r3, #12]
 8002096:	461a      	mov	r2, r3
 8002098:	f000 f8bc 	bl	8002214 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	2150      	movs	r1, #80	; 0x50
 80020a2:	4618      	mov	r0, r3
 80020a4:	f000 f913 	bl	80022ce <TIM_ITRx_SetConfig>
      break;
 80020a8:	e02b      	b.n	8002102 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6818      	ldr	r0, [r3, #0]
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	6859      	ldr	r1, [r3, #4]
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	68db      	ldr	r3, [r3, #12]
 80020b6:	461a      	mov	r2, r3
 80020b8:	f000 f8da 	bl	8002270 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	2160      	movs	r1, #96	; 0x60
 80020c2:	4618      	mov	r0, r3
 80020c4:	f000 f903 	bl	80022ce <TIM_ITRx_SetConfig>
      break;
 80020c8:	e01b      	b.n	8002102 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6818      	ldr	r0, [r3, #0]
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	6859      	ldr	r1, [r3, #4]
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	68db      	ldr	r3, [r3, #12]
 80020d6:	461a      	mov	r2, r3
 80020d8:	f000 f89c 	bl	8002214 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	2140      	movs	r1, #64	; 0x40
 80020e2:	4618      	mov	r0, r3
 80020e4:	f000 f8f3 	bl	80022ce <TIM_ITRx_SetConfig>
      break;
 80020e8:	e00b      	b.n	8002102 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4619      	mov	r1, r3
 80020f4:	4610      	mov	r0, r2
 80020f6:	f000 f8ea 	bl	80022ce <TIM_ITRx_SetConfig>
        break;
 80020fa:	e002      	b.n	8002102 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80020fc:	bf00      	nop
 80020fe:	e000      	b.n	8002102 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002100:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2201      	movs	r2, #1
 8002106:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2200      	movs	r2, #0
 800210e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002112:	2300      	movs	r3, #0
}
 8002114:	4618      	mov	r0, r3
 8002116:	3710      	adds	r7, #16
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}

0800211c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002124:	bf00      	nop
 8002126:	370c      	adds	r7, #12
 8002128:	46bd      	mov	sp, r7
 800212a:	bc80      	pop	{r7}
 800212c:	4770      	bx	lr

0800212e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800212e:	b480      	push	{r7}
 8002130:	b083      	sub	sp, #12
 8002132:	af00      	add	r7, sp, #0
 8002134:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002136:	bf00      	nop
 8002138:	370c      	adds	r7, #12
 800213a:	46bd      	mov	sp, r7
 800213c:	bc80      	pop	{r7}
 800213e:	4770      	bx	lr

08002140 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002148:	bf00      	nop
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	bc80      	pop	{r7}
 8002150:	4770      	bx	lr

08002152 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002152:	b480      	push	{r7}
 8002154:	b083      	sub	sp, #12
 8002156:	af00      	add	r7, sp, #0
 8002158:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800215a:	bf00      	nop
 800215c:	370c      	adds	r7, #12
 800215e:	46bd      	mov	sp, r7
 8002160:	bc80      	pop	{r7}
 8002162:	4770      	bx	lr

08002164 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002164:	b480      	push	{r7}
 8002166:	b085      	sub	sp, #20
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	4a25      	ldr	r2, [pc, #148]	; (800220c <TIM_Base_SetConfig+0xa8>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d007      	beq.n	800218c <TIM_Base_SetConfig+0x28>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002182:	d003      	beq.n	800218c <TIM_Base_SetConfig+0x28>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	4a22      	ldr	r2, [pc, #136]	; (8002210 <TIM_Base_SetConfig+0xac>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d108      	bne.n	800219e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002192:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	68fa      	ldr	r2, [r7, #12]
 800219a:	4313      	orrs	r3, r2
 800219c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a1a      	ldr	r2, [pc, #104]	; (800220c <TIM_Base_SetConfig+0xa8>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d007      	beq.n	80021b6 <TIM_Base_SetConfig+0x52>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021ac:	d003      	beq.n	80021b6 <TIM_Base_SetConfig+0x52>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a17      	ldr	r2, [pc, #92]	; (8002210 <TIM_Base_SetConfig+0xac>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d108      	bne.n	80021c8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	68db      	ldr	r3, [r3, #12]
 80021c2:	68fa      	ldr	r2, [r7, #12]
 80021c4:	4313      	orrs	r3, r2
 80021c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	695b      	ldr	r3, [r3, #20]
 80021d2:	4313      	orrs	r3, r2
 80021d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	68fa      	ldr	r2, [r7, #12]
 80021da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	689a      	ldr	r2, [r3, #8]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	4a07      	ldr	r2, [pc, #28]	; (800220c <TIM_Base_SetConfig+0xa8>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d103      	bne.n	80021fc <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	691a      	ldr	r2, [r3, #16]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2201      	movs	r2, #1
 8002200:	615a      	str	r2, [r3, #20]
}
 8002202:	bf00      	nop
 8002204:	3714      	adds	r7, #20
 8002206:	46bd      	mov	sp, r7
 8002208:	bc80      	pop	{r7}
 800220a:	4770      	bx	lr
 800220c:	40012c00 	.word	0x40012c00
 8002210:	40000400 	.word	0x40000400

08002214 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002214:	b480      	push	{r7}
 8002216:	b087      	sub	sp, #28
 8002218:	af00      	add	r7, sp, #0
 800221a:	60f8      	str	r0, [r7, #12]
 800221c:	60b9      	str	r1, [r7, #8]
 800221e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	6a1b      	ldr	r3, [r3, #32]
 8002224:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	6a1b      	ldr	r3, [r3, #32]
 800222a:	f023 0201 	bic.w	r2, r3, #1
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	699b      	ldr	r3, [r3, #24]
 8002236:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800223e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	011b      	lsls	r3, r3, #4
 8002244:	693a      	ldr	r2, [r7, #16]
 8002246:	4313      	orrs	r3, r2
 8002248:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	f023 030a 	bic.w	r3, r3, #10
 8002250:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002252:	697a      	ldr	r2, [r7, #20]
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	4313      	orrs	r3, r2
 8002258:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	693a      	ldr	r2, [r7, #16]
 800225e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	697a      	ldr	r2, [r7, #20]
 8002264:	621a      	str	r2, [r3, #32]
}
 8002266:	bf00      	nop
 8002268:	371c      	adds	r7, #28
 800226a:	46bd      	mov	sp, r7
 800226c:	bc80      	pop	{r7}
 800226e:	4770      	bx	lr

08002270 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002270:	b480      	push	{r7}
 8002272:	b087      	sub	sp, #28
 8002274:	af00      	add	r7, sp, #0
 8002276:	60f8      	str	r0, [r7, #12]
 8002278:	60b9      	str	r1, [r7, #8]
 800227a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	6a1b      	ldr	r3, [r3, #32]
 8002280:	f023 0210 	bic.w	r2, r3, #16
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	699b      	ldr	r3, [r3, #24]
 800228c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	6a1b      	ldr	r3, [r3, #32]
 8002292:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800229a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	031b      	lsls	r3, r3, #12
 80022a0:	697a      	ldr	r2, [r7, #20]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80022ac:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	011b      	lsls	r3, r3, #4
 80022b2:	693a      	ldr	r2, [r7, #16]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	697a      	ldr	r2, [r7, #20]
 80022bc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	693a      	ldr	r2, [r7, #16]
 80022c2:	621a      	str	r2, [r3, #32]
}
 80022c4:	bf00      	nop
 80022c6:	371c      	adds	r7, #28
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bc80      	pop	{r7}
 80022cc:	4770      	bx	lr

080022ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80022ce:	b480      	push	{r7}
 80022d0:	b085      	sub	sp, #20
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]
 80022d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80022e6:	683a      	ldr	r2, [r7, #0]
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	4313      	orrs	r3, r2
 80022ec:	f043 0307 	orr.w	r3, r3, #7
 80022f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	68fa      	ldr	r2, [r7, #12]
 80022f6:	609a      	str	r2, [r3, #8]
}
 80022f8:	bf00      	nop
 80022fa:	3714      	adds	r7, #20
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bc80      	pop	{r7}
 8002300:	4770      	bx	lr

08002302 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002302:	b480      	push	{r7}
 8002304:	b087      	sub	sp, #28
 8002306:	af00      	add	r7, sp, #0
 8002308:	60f8      	str	r0, [r7, #12]
 800230a:	60b9      	str	r1, [r7, #8]
 800230c:	607a      	str	r2, [r7, #4]
 800230e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800231c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	021a      	lsls	r2, r3, #8
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	431a      	orrs	r2, r3
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	4313      	orrs	r3, r2
 800232a:	697a      	ldr	r2, [r7, #20]
 800232c:	4313      	orrs	r3, r2
 800232e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	697a      	ldr	r2, [r7, #20]
 8002334:	609a      	str	r2, [r3, #8]
}
 8002336:	bf00      	nop
 8002338:	371c      	adds	r7, #28
 800233a:	46bd      	mov	sp, r7
 800233c:	bc80      	pop	{r7}
 800233e:	4770      	bx	lr

08002340 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002340:	b480      	push	{r7}
 8002342:	b085      	sub	sp, #20
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002350:	2b01      	cmp	r3, #1
 8002352:	d101      	bne.n	8002358 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002354:	2302      	movs	r3, #2
 8002356:	e041      	b.n	80023dc <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2201      	movs	r2, #1
 800235c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2202      	movs	r2, #2
 8002364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800237e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	68fa      	ldr	r2, [r7, #12]
 8002386:	4313      	orrs	r3, r2
 8002388:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	68fa      	ldr	r2, [r7, #12]
 8002390:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a14      	ldr	r2, [pc, #80]	; (80023e8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d009      	beq.n	80023b0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023a4:	d004      	beq.n	80023b0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a10      	ldr	r2, [pc, #64]	; (80023ec <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d10c      	bne.n	80023ca <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80023b6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	68ba      	ldr	r2, [r7, #8]
 80023be:	4313      	orrs	r3, r2
 80023c0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	68ba      	ldr	r2, [r7, #8]
 80023c8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2201      	movs	r2, #1
 80023ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2200      	movs	r2, #0
 80023d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80023da:	2300      	movs	r3, #0
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3714      	adds	r7, #20
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bc80      	pop	{r7}
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop
 80023e8:	40012c00 	.word	0x40012c00
 80023ec:	40000400 	.word	0x40000400

080023f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80023f8:	bf00      	nop
 80023fa:	370c      	adds	r7, #12
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bc80      	pop	{r7}
 8002400:	4770      	bx	lr

08002402 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002402:	b480      	push	{r7}
 8002404:	b083      	sub	sp, #12
 8002406:	af00      	add	r7, sp, #0
 8002408:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800240a:	bf00      	nop
 800240c:	370c      	adds	r7, #12
 800240e:	46bd      	mov	sp, r7
 8002410:	bc80      	pop	{r7}
 8002412:	4770      	bx	lr

08002414 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d101      	bne.n	8002426 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e03f      	b.n	80024a6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800242c:	b2db      	uxtb	r3, r3
 800242e:	2b00      	cmp	r3, #0
 8002430:	d106      	bne.n	8002440 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2200      	movs	r2, #0
 8002436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f7fe fb18 	bl	8000a70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2224      	movs	r2, #36	; 0x24
 8002444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	68da      	ldr	r2, [r3, #12]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002456:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f000 fc25 	bl	8002ca8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	691a      	ldr	r2, [r3, #16]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800246c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	695a      	ldr	r2, [r3, #20]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800247c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	68da      	ldr	r2, [r3, #12]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800248c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2200      	movs	r2, #0
 8002492:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2220      	movs	r2, #32
 8002498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2220      	movs	r2, #32
 80024a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80024a4:	2300      	movs	r3, #0
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3708      	adds	r7, #8
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}

080024ae <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024ae:	b580      	push	{r7, lr}
 80024b0:	b08a      	sub	sp, #40	; 0x28
 80024b2:	af02      	add	r7, sp, #8
 80024b4:	60f8      	str	r0, [r7, #12]
 80024b6:	60b9      	str	r1, [r7, #8]
 80024b8:	603b      	str	r3, [r7, #0]
 80024ba:	4613      	mov	r3, r2
 80024bc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80024be:	2300      	movs	r3, #0
 80024c0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	2b20      	cmp	r3, #32
 80024cc:	d17c      	bne.n	80025c8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d002      	beq.n	80024da <HAL_UART_Transmit+0x2c>
 80024d4:	88fb      	ldrh	r3, [r7, #6]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d101      	bne.n	80024de <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e075      	b.n	80025ca <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d101      	bne.n	80024ec <HAL_UART_Transmit+0x3e>
 80024e8:	2302      	movs	r3, #2
 80024ea:	e06e      	b.n	80025ca <HAL_UART_Transmit+0x11c>
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2201      	movs	r2, #1
 80024f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2200      	movs	r2, #0
 80024f8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2221      	movs	r2, #33	; 0x21
 80024fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002502:	f7fe fbff 	bl	8000d04 <HAL_GetTick>
 8002506:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	88fa      	ldrh	r2, [r7, #6]
 800250c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	88fa      	ldrh	r2, [r7, #6]
 8002512:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800251c:	d108      	bne.n	8002530 <HAL_UART_Transmit+0x82>
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	691b      	ldr	r3, [r3, #16]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d104      	bne.n	8002530 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002526:	2300      	movs	r3, #0
 8002528:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	61bb      	str	r3, [r7, #24]
 800252e:	e003      	b.n	8002538 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002534:	2300      	movs	r3, #0
 8002536:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2200      	movs	r2, #0
 800253c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002540:	e02a      	b.n	8002598 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	9300      	str	r3, [sp, #0]
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	2200      	movs	r2, #0
 800254a:	2180      	movs	r1, #128	; 0x80
 800254c:	68f8      	ldr	r0, [r7, #12]
 800254e:	f000 fa11 	bl	8002974 <UART_WaitOnFlagUntilTimeout>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d001      	beq.n	800255c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002558:	2303      	movs	r3, #3
 800255a:	e036      	b.n	80025ca <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d10b      	bne.n	800257a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002562:	69bb      	ldr	r3, [r7, #24]
 8002564:	881b      	ldrh	r3, [r3, #0]
 8002566:	461a      	mov	r2, r3
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002570:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002572:	69bb      	ldr	r3, [r7, #24]
 8002574:	3302      	adds	r3, #2
 8002576:	61bb      	str	r3, [r7, #24]
 8002578:	e007      	b.n	800258a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	781a      	ldrb	r2, [r3, #0]
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	3301      	adds	r3, #1
 8002588:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800258e:	b29b      	uxth	r3, r3
 8002590:	3b01      	subs	r3, #1
 8002592:	b29a      	uxth	r2, r3
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800259c:	b29b      	uxth	r3, r3
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d1cf      	bne.n	8002542 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	9300      	str	r3, [sp, #0]
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	2200      	movs	r2, #0
 80025aa:	2140      	movs	r1, #64	; 0x40
 80025ac:	68f8      	ldr	r0, [r7, #12]
 80025ae:	f000 f9e1 	bl	8002974 <UART_WaitOnFlagUntilTimeout>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d001      	beq.n	80025bc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80025b8:	2303      	movs	r3, #3
 80025ba:	e006      	b.n	80025ca <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2220      	movs	r2, #32
 80025c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80025c4:	2300      	movs	r3, #0
 80025c6:	e000      	b.n	80025ca <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80025c8:	2302      	movs	r3, #2
  }
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3720      	adds	r7, #32
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
	...

080025d4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b08a      	sub	sp, #40	; 0x28
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	695b      	ldr	r3, [r3, #20]
 80025f2:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80025f4:	2300      	movs	r3, #0
 80025f6:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80025f8:	2300      	movs	r3, #0
 80025fa:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80025fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fe:	f003 030f 	and.w	r3, r3, #15
 8002602:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002604:	69bb      	ldr	r3, [r7, #24]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d10d      	bne.n	8002626 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800260a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260c:	f003 0320 	and.w	r3, r3, #32
 8002610:	2b00      	cmp	r3, #0
 8002612:	d008      	beq.n	8002626 <HAL_UART_IRQHandler+0x52>
 8002614:	6a3b      	ldr	r3, [r7, #32]
 8002616:	f003 0320 	and.w	r3, r3, #32
 800261a:	2b00      	cmp	r3, #0
 800261c:	d003      	beq.n	8002626 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f000 fa99 	bl	8002b56 <UART_Receive_IT>
      return;
 8002624:	e17b      	b.n	800291e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002626:	69bb      	ldr	r3, [r7, #24]
 8002628:	2b00      	cmp	r3, #0
 800262a:	f000 80b1 	beq.w	8002790 <HAL_UART_IRQHandler+0x1bc>
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	f003 0301 	and.w	r3, r3, #1
 8002634:	2b00      	cmp	r3, #0
 8002636:	d105      	bne.n	8002644 <HAL_UART_IRQHandler+0x70>
 8002638:	6a3b      	ldr	r3, [r7, #32]
 800263a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800263e:	2b00      	cmp	r3, #0
 8002640:	f000 80a6 	beq.w	8002790 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002646:	f003 0301 	and.w	r3, r3, #1
 800264a:	2b00      	cmp	r3, #0
 800264c:	d00a      	beq.n	8002664 <HAL_UART_IRQHandler+0x90>
 800264e:	6a3b      	ldr	r3, [r7, #32]
 8002650:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002654:	2b00      	cmp	r3, #0
 8002656:	d005      	beq.n	8002664 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265c:	f043 0201 	orr.w	r2, r3, #1
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002666:	f003 0304 	and.w	r3, r3, #4
 800266a:	2b00      	cmp	r3, #0
 800266c:	d00a      	beq.n	8002684 <HAL_UART_IRQHandler+0xb0>
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	f003 0301 	and.w	r3, r3, #1
 8002674:	2b00      	cmp	r3, #0
 8002676:	d005      	beq.n	8002684 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267c:	f043 0202 	orr.w	r2, r3, #2
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002686:	f003 0302 	and.w	r3, r3, #2
 800268a:	2b00      	cmp	r3, #0
 800268c:	d00a      	beq.n	80026a4 <HAL_UART_IRQHandler+0xd0>
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	f003 0301 	and.w	r3, r3, #1
 8002694:	2b00      	cmp	r3, #0
 8002696:	d005      	beq.n	80026a4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269c:	f043 0204 	orr.w	r2, r3, #4
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80026a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a6:	f003 0308 	and.w	r3, r3, #8
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d00f      	beq.n	80026ce <HAL_UART_IRQHandler+0xfa>
 80026ae:	6a3b      	ldr	r3, [r7, #32]
 80026b0:	f003 0320 	and.w	r3, r3, #32
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d104      	bne.n	80026c2 <HAL_UART_IRQHandler+0xee>
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	f003 0301 	and.w	r3, r3, #1
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d005      	beq.n	80026ce <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c6:	f043 0208 	orr.w	r2, r3, #8
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	f000 811e 	beq.w	8002914 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80026d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026da:	f003 0320 	and.w	r3, r3, #32
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d007      	beq.n	80026f2 <HAL_UART_IRQHandler+0x11e>
 80026e2:	6a3b      	ldr	r3, [r7, #32]
 80026e4:	f003 0320 	and.w	r3, r3, #32
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d002      	beq.n	80026f2 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f000 fa32 	bl	8002b56 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	695b      	ldr	r3, [r3, #20]
 80026f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	bf14      	ite	ne
 8002700:	2301      	movne	r3, #1
 8002702:	2300      	moveq	r3, #0
 8002704:	b2db      	uxtb	r3, r3
 8002706:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270c:	f003 0308 	and.w	r3, r3, #8
 8002710:	2b00      	cmp	r3, #0
 8002712:	d102      	bne.n	800271a <HAL_UART_IRQHandler+0x146>
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d031      	beq.n	800277e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f000 f974 	bl	8002a08 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	695b      	ldr	r3, [r3, #20]
 8002726:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800272a:	2b00      	cmp	r3, #0
 800272c:	d023      	beq.n	8002776 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	695a      	ldr	r2, [r3, #20]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800273c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002742:	2b00      	cmp	r3, #0
 8002744:	d013      	beq.n	800276e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800274a:	4a76      	ldr	r2, [pc, #472]	; (8002924 <HAL_UART_IRQHandler+0x350>)
 800274c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002752:	4618      	mov	r0, r3
 8002754:	f7fe fc28 	bl	8000fa8 <HAL_DMA_Abort_IT>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d016      	beq.n	800278c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002762:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002768:	4610      	mov	r0, r2
 800276a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800276c:	e00e      	b.n	800278c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f000 f8ec 	bl	800294c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002774:	e00a      	b.n	800278c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f000 f8e8 	bl	800294c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800277c:	e006      	b.n	800278c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f000 f8e4 	bl	800294c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2200      	movs	r2, #0
 8002788:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800278a:	e0c3      	b.n	8002914 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800278c:	bf00      	nop
    return;
 800278e:	e0c1      	b.n	8002914 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002794:	2b01      	cmp	r3, #1
 8002796:	f040 80a1 	bne.w	80028dc <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800279a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279c:	f003 0310 	and.w	r3, r3, #16
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	f000 809b 	beq.w	80028dc <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80027a6:	6a3b      	ldr	r3, [r7, #32]
 80027a8:	f003 0310 	and.w	r3, r3, #16
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	f000 8095 	beq.w	80028dc <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80027b2:	2300      	movs	r3, #0
 80027b4:	60fb      	str	r3, [r7, #12]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	60fb      	str	r3, [r7, #12]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	60fb      	str	r3, [r7, #12]
 80027c6:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	695b      	ldr	r3, [r3, #20]
 80027ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d04e      	beq.n	8002874 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80027e0:	8a3b      	ldrh	r3, [r7, #16]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	f000 8098 	beq.w	8002918 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80027ec:	8a3a      	ldrh	r2, [r7, #16]
 80027ee:	429a      	cmp	r2, r3
 80027f0:	f080 8092 	bcs.w	8002918 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	8a3a      	ldrh	r2, [r7, #16]
 80027f8:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027fe:	699b      	ldr	r3, [r3, #24]
 8002800:	2b20      	cmp	r3, #32
 8002802:	d02b      	beq.n	800285c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	68da      	ldr	r2, [r3, #12]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002812:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	695a      	ldr	r2, [r3, #20]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f022 0201 	bic.w	r2, r2, #1
 8002822:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	695a      	ldr	r2, [r3, #20]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002832:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2220      	movs	r2, #32
 8002838:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2200      	movs	r2, #0
 8002840:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	68da      	ldr	r2, [r3, #12]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f022 0210 	bic.w	r2, r2, #16
 8002850:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002856:	4618      	mov	r0, r3
 8002858:	f7fe fb6b 	bl	8000f32 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002864:	b29b      	uxth	r3, r3
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	b29b      	uxth	r3, r3
 800286a:	4619      	mov	r1, r3
 800286c:	6878      	ldr	r0, [r7, #4]
 800286e:	f000 f876 	bl	800295e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002872:	e051      	b.n	8002918 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800287c:	b29b      	uxth	r3, r3
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002886:	b29b      	uxth	r3, r3
 8002888:	2b00      	cmp	r3, #0
 800288a:	d047      	beq.n	800291c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 800288c:	8a7b      	ldrh	r3, [r7, #18]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d044      	beq.n	800291c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	68da      	ldr	r2, [r3, #12]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80028a0:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	695a      	ldr	r2, [r3, #20]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f022 0201 	bic.w	r2, r2, #1
 80028b0:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2220      	movs	r2, #32
 80028b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2200      	movs	r2, #0
 80028be:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	68da      	ldr	r2, [r3, #12]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f022 0210 	bic.w	r2, r2, #16
 80028ce:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80028d0:	8a7b      	ldrh	r3, [r7, #18]
 80028d2:	4619      	mov	r1, r3
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	f000 f842 	bl	800295e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80028da:	e01f      	b.n	800291c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80028dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d008      	beq.n	80028f8 <HAL_UART_IRQHandler+0x324>
 80028e6:	6a3b      	ldr	r3, [r7, #32]
 80028e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d003      	beq.n	80028f8 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	f000 f8c9 	bl	8002a88 <UART_Transmit_IT>
    return;
 80028f6:	e012      	b.n	800291e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80028f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d00d      	beq.n	800291e <HAL_UART_IRQHandler+0x34a>
 8002902:	6a3b      	ldr	r3, [r7, #32]
 8002904:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002908:	2b00      	cmp	r3, #0
 800290a:	d008      	beq.n	800291e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f000 f90a 	bl	8002b26 <UART_EndTransmit_IT>
    return;
 8002912:	e004      	b.n	800291e <HAL_UART_IRQHandler+0x34a>
    return;
 8002914:	bf00      	nop
 8002916:	e002      	b.n	800291e <HAL_UART_IRQHandler+0x34a>
      return;
 8002918:	bf00      	nop
 800291a:	e000      	b.n	800291e <HAL_UART_IRQHandler+0x34a>
      return;
 800291c:	bf00      	nop
  }
}
 800291e:	3728      	adds	r7, #40	; 0x28
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	08002a61 	.word	0x08002a61

08002928 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002928:	b480      	push	{r7}
 800292a:	b083      	sub	sp, #12
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002930:	bf00      	nop
 8002932:	370c      	adds	r7, #12
 8002934:	46bd      	mov	sp, r7
 8002936:	bc80      	pop	{r7}
 8002938:	4770      	bx	lr

0800293a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800293a:	b480      	push	{r7}
 800293c:	b083      	sub	sp, #12
 800293e:	af00      	add	r7, sp, #0
 8002940:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002942:	bf00      	nop
 8002944:	370c      	adds	r7, #12
 8002946:	46bd      	mov	sp, r7
 8002948:	bc80      	pop	{r7}
 800294a:	4770      	bx	lr

0800294c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002954:	bf00      	nop
 8002956:	370c      	adds	r7, #12
 8002958:	46bd      	mov	sp, r7
 800295a:	bc80      	pop	{r7}
 800295c:	4770      	bx	lr

0800295e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800295e:	b480      	push	{r7}
 8002960:	b083      	sub	sp, #12
 8002962:	af00      	add	r7, sp, #0
 8002964:	6078      	str	r0, [r7, #4]
 8002966:	460b      	mov	r3, r1
 8002968:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800296a:	bf00      	nop
 800296c:	370c      	adds	r7, #12
 800296e:	46bd      	mov	sp, r7
 8002970:	bc80      	pop	{r7}
 8002972:	4770      	bx	lr

08002974 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b084      	sub	sp, #16
 8002978:	af00      	add	r7, sp, #0
 800297a:	60f8      	str	r0, [r7, #12]
 800297c:	60b9      	str	r1, [r7, #8]
 800297e:	603b      	str	r3, [r7, #0]
 8002980:	4613      	mov	r3, r2
 8002982:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002984:	e02c      	b.n	80029e0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002986:	69bb      	ldr	r3, [r7, #24]
 8002988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800298c:	d028      	beq.n	80029e0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800298e:	69bb      	ldr	r3, [r7, #24]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d007      	beq.n	80029a4 <UART_WaitOnFlagUntilTimeout+0x30>
 8002994:	f7fe f9b6 	bl	8000d04 <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	69ba      	ldr	r2, [r7, #24]
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d21d      	bcs.n	80029e0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	68da      	ldr	r2, [r3, #12]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80029b2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	695a      	ldr	r2, [r3, #20]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f022 0201 	bic.w	r2, r2, #1
 80029c2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2220      	movs	r2, #32
 80029c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2220      	movs	r2, #32
 80029d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2200      	movs	r2, #0
 80029d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80029dc:	2303      	movs	r3, #3
 80029de:	e00f      	b.n	8002a00 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	4013      	ands	r3, r2
 80029ea:	68ba      	ldr	r2, [r7, #8]
 80029ec:	429a      	cmp	r2, r3
 80029ee:	bf0c      	ite	eq
 80029f0:	2301      	moveq	r3, #1
 80029f2:	2300      	movne	r3, #0
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	461a      	mov	r2, r3
 80029f8:	79fb      	ldrb	r3, [r7, #7]
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d0c3      	beq.n	8002986 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80029fe:	2300      	movs	r3, #0
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3710      	adds	r7, #16
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}

08002a08 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	68da      	ldr	r2, [r3, #12]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002a1e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	695a      	ldr	r2, [r3, #20]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f022 0201 	bic.w	r2, r2, #1
 8002a2e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d107      	bne.n	8002a48 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	68da      	ldr	r2, [r3, #12]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f022 0210 	bic.w	r2, r2, #16
 8002a46:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2220      	movs	r2, #32
 8002a4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2200      	movs	r2, #0
 8002a54:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002a56:	bf00      	nop
 8002a58:	370c      	adds	r7, #12
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bc80      	pop	{r7}
 8002a5e:	4770      	bx	lr

08002a60 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b084      	sub	sp, #16
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2200      	movs	r2, #0
 8002a72:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2200      	movs	r2, #0
 8002a78:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002a7a:	68f8      	ldr	r0, [r7, #12]
 8002a7c:	f7ff ff66 	bl	800294c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002a80:	bf00      	nop
 8002a82:	3710      	adds	r7, #16
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b085      	sub	sp, #20
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	2b21      	cmp	r3, #33	; 0x21
 8002a9a:	d13e      	bne.n	8002b1a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002aa4:	d114      	bne.n	8002ad0 <UART_Transmit_IT+0x48>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	691b      	ldr	r3, [r3, #16]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d110      	bne.n	8002ad0 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6a1b      	ldr	r3, [r3, #32]
 8002ab2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	881b      	ldrh	r3, [r3, #0]
 8002ab8:	461a      	mov	r2, r3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ac2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6a1b      	ldr	r3, [r3, #32]
 8002ac8:	1c9a      	adds	r2, r3, #2
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	621a      	str	r2, [r3, #32]
 8002ace:	e008      	b.n	8002ae2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6a1b      	ldr	r3, [r3, #32]
 8002ad4:	1c59      	adds	r1, r3, #1
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	6211      	str	r1, [r2, #32]
 8002ada:	781a      	ldrb	r2, [r3, #0]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	3b01      	subs	r3, #1
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	4619      	mov	r1, r3
 8002af0:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d10f      	bne.n	8002b16 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	68da      	ldr	r2, [r3, #12]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b04:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	68da      	ldr	r2, [r3, #12]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b14:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002b16:	2300      	movs	r3, #0
 8002b18:	e000      	b.n	8002b1c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002b1a:	2302      	movs	r3, #2
  }
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3714      	adds	r7, #20
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bc80      	pop	{r7}
 8002b24:	4770      	bx	lr

08002b26 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002b26:	b580      	push	{r7, lr}
 8002b28:	b082      	sub	sp, #8
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	68da      	ldr	r2, [r3, #12]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b3c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2220      	movs	r2, #32
 8002b42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f7ff feee 	bl	8002928 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002b4c:	2300      	movs	r3, #0
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3708      	adds	r7, #8
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}

08002b56 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002b56:	b580      	push	{r7, lr}
 8002b58:	b086      	sub	sp, #24
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	2b22      	cmp	r3, #34	; 0x22
 8002b68:	f040 8099 	bne.w	8002c9e <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b74:	d117      	bne.n	8002ba6 <UART_Receive_IT+0x50>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	691b      	ldr	r3, [r3, #16]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d113      	bne.n	8002ba6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b86:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b94:	b29a      	uxth	r2, r3
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b9e:	1c9a      	adds	r2, r3, #2
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	629a      	str	r2, [r3, #40]	; 0x28
 8002ba4:	e026      	b.n	8002bf4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002baa:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8002bac:	2300      	movs	r3, #0
 8002bae:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bb8:	d007      	beq.n	8002bca <UART_Receive_IT+0x74>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d10a      	bne.n	8002bd8 <UART_Receive_IT+0x82>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	691b      	ldr	r3, [r3, #16]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d106      	bne.n	8002bd8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	b2da      	uxtb	r2, r3
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	701a      	strb	r2, [r3, #0]
 8002bd6:	e008      	b.n	8002bea <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002be4:	b2da      	uxtb	r2, r3
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bee:	1c5a      	adds	r2, r3, #1
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	3b01      	subs	r3, #1
 8002bfc:	b29b      	uxth	r3, r3
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	4619      	mov	r1, r3
 8002c02:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d148      	bne.n	8002c9a <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	68da      	ldr	r2, [r3, #12]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f022 0220 	bic.w	r2, r2, #32
 8002c16:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	68da      	ldr	r2, [r3, #12]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c26:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	695a      	ldr	r2, [r3, #20]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f022 0201 	bic.w	r2, r2, #1
 8002c36:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2220      	movs	r2, #32
 8002c3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d123      	bne.n	8002c90 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	68da      	ldr	r2, [r3, #12]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f022 0210 	bic.w	r2, r2, #16
 8002c5c:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0310 	and.w	r3, r3, #16
 8002c68:	2b10      	cmp	r3, #16
 8002c6a:	d10a      	bne.n	8002c82 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	60fb      	str	r3, [r7, #12]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	60fb      	str	r3, [r7, #12]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	60fb      	str	r3, [r7, #12]
 8002c80:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002c86:	4619      	mov	r1, r3
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	f7ff fe68 	bl	800295e <HAL_UARTEx_RxEventCallback>
 8002c8e:	e002      	b.n	8002c96 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	f7ff fe52 	bl	800293a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002c96:	2300      	movs	r3, #0
 8002c98:	e002      	b.n	8002ca0 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	e000      	b.n	8002ca0 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002c9e:	2302      	movs	r3, #2
  }
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3718      	adds	r7, #24
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}

08002ca8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b084      	sub	sp, #16
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	691b      	ldr	r3, [r3, #16]
 8002cb6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	68da      	ldr	r2, [r3, #12]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	430a      	orrs	r2, r1
 8002cc4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	689a      	ldr	r2, [r3, #8]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	691b      	ldr	r3, [r3, #16]
 8002cce:	431a      	orrs	r2, r3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	695b      	ldr	r3, [r3, #20]
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	68db      	ldr	r3, [r3, #12]
 8002cde:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002ce2:	f023 030c 	bic.w	r3, r3, #12
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	6812      	ldr	r2, [r2, #0]
 8002cea:	68b9      	ldr	r1, [r7, #8]
 8002cec:	430b      	orrs	r3, r1
 8002cee:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	695b      	ldr	r3, [r3, #20]
 8002cf6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	699a      	ldr	r2, [r3, #24]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	430a      	orrs	r2, r1
 8002d04:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a2c      	ldr	r2, [pc, #176]	; (8002dbc <UART_SetConfig+0x114>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d103      	bne.n	8002d18 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002d10:	f7fe ff6a 	bl	8001be8 <HAL_RCC_GetPCLK2Freq>
 8002d14:	60f8      	str	r0, [r7, #12]
 8002d16:	e002      	b.n	8002d1e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002d18:	f7fe ff52 	bl	8001bc0 <HAL_RCC_GetPCLK1Freq>
 8002d1c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d1e:	68fa      	ldr	r2, [r7, #12]
 8002d20:	4613      	mov	r3, r2
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	4413      	add	r3, r2
 8002d26:	009a      	lsls	r2, r3, #2
 8002d28:	441a      	add	r2, r3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d34:	4a22      	ldr	r2, [pc, #136]	; (8002dc0 <UART_SetConfig+0x118>)
 8002d36:	fba2 2303 	umull	r2, r3, r2, r3
 8002d3a:	095b      	lsrs	r3, r3, #5
 8002d3c:	0119      	lsls	r1, r3, #4
 8002d3e:	68fa      	ldr	r2, [r7, #12]
 8002d40:	4613      	mov	r3, r2
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	4413      	add	r3, r2
 8002d46:	009a      	lsls	r2, r3, #2
 8002d48:	441a      	add	r2, r3
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d54:	4b1a      	ldr	r3, [pc, #104]	; (8002dc0 <UART_SetConfig+0x118>)
 8002d56:	fba3 0302 	umull	r0, r3, r3, r2
 8002d5a:	095b      	lsrs	r3, r3, #5
 8002d5c:	2064      	movs	r0, #100	; 0x64
 8002d5e:	fb00 f303 	mul.w	r3, r0, r3
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	011b      	lsls	r3, r3, #4
 8002d66:	3332      	adds	r3, #50	; 0x32
 8002d68:	4a15      	ldr	r2, [pc, #84]	; (8002dc0 <UART_SetConfig+0x118>)
 8002d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d6e:	095b      	lsrs	r3, r3, #5
 8002d70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d74:	4419      	add	r1, r3
 8002d76:	68fa      	ldr	r2, [r7, #12]
 8002d78:	4613      	mov	r3, r2
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	4413      	add	r3, r2
 8002d7e:	009a      	lsls	r2, r3, #2
 8002d80:	441a      	add	r2, r3
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d8c:	4b0c      	ldr	r3, [pc, #48]	; (8002dc0 <UART_SetConfig+0x118>)
 8002d8e:	fba3 0302 	umull	r0, r3, r3, r2
 8002d92:	095b      	lsrs	r3, r3, #5
 8002d94:	2064      	movs	r0, #100	; 0x64
 8002d96:	fb00 f303 	mul.w	r3, r0, r3
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	011b      	lsls	r3, r3, #4
 8002d9e:	3332      	adds	r3, #50	; 0x32
 8002da0:	4a07      	ldr	r2, [pc, #28]	; (8002dc0 <UART_SetConfig+0x118>)
 8002da2:	fba2 2303 	umull	r2, r3, r2, r3
 8002da6:	095b      	lsrs	r3, r3, #5
 8002da8:	f003 020f 	and.w	r2, r3, #15
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	440a      	add	r2, r1
 8002db2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002db4:	bf00      	nop
 8002db6:	3710      	adds	r7, #16
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	40013800 	.word	0x40013800
 8002dc0:	51eb851f 	.word	0x51eb851f

08002dc4 <__errno>:
 8002dc4:	4b01      	ldr	r3, [pc, #4]	; (8002dcc <__errno+0x8>)
 8002dc6:	6818      	ldr	r0, [r3, #0]
 8002dc8:	4770      	bx	lr
 8002dca:	bf00      	nop
 8002dcc:	2000000c 	.word	0x2000000c

08002dd0 <__libc_init_array>:
 8002dd0:	b570      	push	{r4, r5, r6, lr}
 8002dd2:	2600      	movs	r6, #0
 8002dd4:	4d0c      	ldr	r5, [pc, #48]	; (8002e08 <__libc_init_array+0x38>)
 8002dd6:	4c0d      	ldr	r4, [pc, #52]	; (8002e0c <__libc_init_array+0x3c>)
 8002dd8:	1b64      	subs	r4, r4, r5
 8002dda:	10a4      	asrs	r4, r4, #2
 8002ddc:	42a6      	cmp	r6, r4
 8002dde:	d109      	bne.n	8002df4 <__libc_init_array+0x24>
 8002de0:	f000 fc6c 	bl	80036bc <_init>
 8002de4:	2600      	movs	r6, #0
 8002de6:	4d0a      	ldr	r5, [pc, #40]	; (8002e10 <__libc_init_array+0x40>)
 8002de8:	4c0a      	ldr	r4, [pc, #40]	; (8002e14 <__libc_init_array+0x44>)
 8002dea:	1b64      	subs	r4, r4, r5
 8002dec:	10a4      	asrs	r4, r4, #2
 8002dee:	42a6      	cmp	r6, r4
 8002df0:	d105      	bne.n	8002dfe <__libc_init_array+0x2e>
 8002df2:	bd70      	pop	{r4, r5, r6, pc}
 8002df4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002df8:	4798      	blx	r3
 8002dfa:	3601      	adds	r6, #1
 8002dfc:	e7ee      	b.n	8002ddc <__libc_init_array+0xc>
 8002dfe:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e02:	4798      	blx	r3
 8002e04:	3601      	adds	r6, #1
 8002e06:	e7f2      	b.n	8002dee <__libc_init_array+0x1e>
 8002e08:	0800375c 	.word	0x0800375c
 8002e0c:	0800375c 	.word	0x0800375c
 8002e10:	0800375c 	.word	0x0800375c
 8002e14:	08003760 	.word	0x08003760

08002e18 <malloc>:
 8002e18:	4b02      	ldr	r3, [pc, #8]	; (8002e24 <malloc+0xc>)
 8002e1a:	4601      	mov	r1, r0
 8002e1c:	6818      	ldr	r0, [r3, #0]
 8002e1e:	f000 b85f 	b.w	8002ee0 <_malloc_r>
 8002e22:	bf00      	nop
 8002e24:	2000000c 	.word	0x2000000c

08002e28 <free>:
 8002e28:	4b02      	ldr	r3, [pc, #8]	; (8002e34 <free+0xc>)
 8002e2a:	4601      	mov	r1, r0
 8002e2c:	6818      	ldr	r0, [r3, #0]
 8002e2e:	f000 b80b 	b.w	8002e48 <_free_r>
 8002e32:	bf00      	nop
 8002e34:	2000000c 	.word	0x2000000c

08002e38 <memset>:
 8002e38:	4603      	mov	r3, r0
 8002e3a:	4402      	add	r2, r0
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d100      	bne.n	8002e42 <memset+0xa>
 8002e40:	4770      	bx	lr
 8002e42:	f803 1b01 	strb.w	r1, [r3], #1
 8002e46:	e7f9      	b.n	8002e3c <memset+0x4>

08002e48 <_free_r>:
 8002e48:	b538      	push	{r3, r4, r5, lr}
 8002e4a:	4605      	mov	r5, r0
 8002e4c:	2900      	cmp	r1, #0
 8002e4e:	d043      	beq.n	8002ed8 <_free_r+0x90>
 8002e50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002e54:	1f0c      	subs	r4, r1, #4
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	bfb8      	it	lt
 8002e5a:	18e4      	addlt	r4, r4, r3
 8002e5c:	f000 f8ca 	bl	8002ff4 <__malloc_lock>
 8002e60:	4a1e      	ldr	r2, [pc, #120]	; (8002edc <_free_r+0x94>)
 8002e62:	6813      	ldr	r3, [r2, #0]
 8002e64:	4610      	mov	r0, r2
 8002e66:	b933      	cbnz	r3, 8002e76 <_free_r+0x2e>
 8002e68:	6063      	str	r3, [r4, #4]
 8002e6a:	6014      	str	r4, [r2, #0]
 8002e6c:	4628      	mov	r0, r5
 8002e6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002e72:	f000 b8c5 	b.w	8003000 <__malloc_unlock>
 8002e76:	42a3      	cmp	r3, r4
 8002e78:	d90a      	bls.n	8002e90 <_free_r+0x48>
 8002e7a:	6821      	ldr	r1, [r4, #0]
 8002e7c:	1862      	adds	r2, r4, r1
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	bf01      	itttt	eq
 8002e82:	681a      	ldreq	r2, [r3, #0]
 8002e84:	685b      	ldreq	r3, [r3, #4]
 8002e86:	1852      	addeq	r2, r2, r1
 8002e88:	6022      	streq	r2, [r4, #0]
 8002e8a:	6063      	str	r3, [r4, #4]
 8002e8c:	6004      	str	r4, [r0, #0]
 8002e8e:	e7ed      	b.n	8002e6c <_free_r+0x24>
 8002e90:	461a      	mov	r2, r3
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	b10b      	cbz	r3, 8002e9a <_free_r+0x52>
 8002e96:	42a3      	cmp	r3, r4
 8002e98:	d9fa      	bls.n	8002e90 <_free_r+0x48>
 8002e9a:	6811      	ldr	r1, [r2, #0]
 8002e9c:	1850      	adds	r0, r2, r1
 8002e9e:	42a0      	cmp	r0, r4
 8002ea0:	d10b      	bne.n	8002eba <_free_r+0x72>
 8002ea2:	6820      	ldr	r0, [r4, #0]
 8002ea4:	4401      	add	r1, r0
 8002ea6:	1850      	adds	r0, r2, r1
 8002ea8:	4283      	cmp	r3, r0
 8002eaa:	6011      	str	r1, [r2, #0]
 8002eac:	d1de      	bne.n	8002e6c <_free_r+0x24>
 8002eae:	6818      	ldr	r0, [r3, #0]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	4401      	add	r1, r0
 8002eb4:	6011      	str	r1, [r2, #0]
 8002eb6:	6053      	str	r3, [r2, #4]
 8002eb8:	e7d8      	b.n	8002e6c <_free_r+0x24>
 8002eba:	d902      	bls.n	8002ec2 <_free_r+0x7a>
 8002ebc:	230c      	movs	r3, #12
 8002ebe:	602b      	str	r3, [r5, #0]
 8002ec0:	e7d4      	b.n	8002e6c <_free_r+0x24>
 8002ec2:	6820      	ldr	r0, [r4, #0]
 8002ec4:	1821      	adds	r1, r4, r0
 8002ec6:	428b      	cmp	r3, r1
 8002ec8:	bf01      	itttt	eq
 8002eca:	6819      	ldreq	r1, [r3, #0]
 8002ecc:	685b      	ldreq	r3, [r3, #4]
 8002ece:	1809      	addeq	r1, r1, r0
 8002ed0:	6021      	streq	r1, [r4, #0]
 8002ed2:	6063      	str	r3, [r4, #4]
 8002ed4:	6054      	str	r4, [r2, #4]
 8002ed6:	e7c9      	b.n	8002e6c <_free_r+0x24>
 8002ed8:	bd38      	pop	{r3, r4, r5, pc}
 8002eda:	bf00      	nop
 8002edc:	200000b0 	.word	0x200000b0

08002ee0 <_malloc_r>:
 8002ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ee2:	1ccd      	adds	r5, r1, #3
 8002ee4:	f025 0503 	bic.w	r5, r5, #3
 8002ee8:	3508      	adds	r5, #8
 8002eea:	2d0c      	cmp	r5, #12
 8002eec:	bf38      	it	cc
 8002eee:	250c      	movcc	r5, #12
 8002ef0:	2d00      	cmp	r5, #0
 8002ef2:	4606      	mov	r6, r0
 8002ef4:	db01      	blt.n	8002efa <_malloc_r+0x1a>
 8002ef6:	42a9      	cmp	r1, r5
 8002ef8:	d903      	bls.n	8002f02 <_malloc_r+0x22>
 8002efa:	230c      	movs	r3, #12
 8002efc:	6033      	str	r3, [r6, #0]
 8002efe:	2000      	movs	r0, #0
 8002f00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f02:	f000 f877 	bl	8002ff4 <__malloc_lock>
 8002f06:	4921      	ldr	r1, [pc, #132]	; (8002f8c <_malloc_r+0xac>)
 8002f08:	680a      	ldr	r2, [r1, #0]
 8002f0a:	4614      	mov	r4, r2
 8002f0c:	b99c      	cbnz	r4, 8002f36 <_malloc_r+0x56>
 8002f0e:	4f20      	ldr	r7, [pc, #128]	; (8002f90 <_malloc_r+0xb0>)
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	b923      	cbnz	r3, 8002f1e <_malloc_r+0x3e>
 8002f14:	4621      	mov	r1, r4
 8002f16:	4630      	mov	r0, r6
 8002f18:	f000 f83c 	bl	8002f94 <_sbrk_r>
 8002f1c:	6038      	str	r0, [r7, #0]
 8002f1e:	4629      	mov	r1, r5
 8002f20:	4630      	mov	r0, r6
 8002f22:	f000 f837 	bl	8002f94 <_sbrk_r>
 8002f26:	1c43      	adds	r3, r0, #1
 8002f28:	d123      	bne.n	8002f72 <_malloc_r+0x92>
 8002f2a:	230c      	movs	r3, #12
 8002f2c:	4630      	mov	r0, r6
 8002f2e:	6033      	str	r3, [r6, #0]
 8002f30:	f000 f866 	bl	8003000 <__malloc_unlock>
 8002f34:	e7e3      	b.n	8002efe <_malloc_r+0x1e>
 8002f36:	6823      	ldr	r3, [r4, #0]
 8002f38:	1b5b      	subs	r3, r3, r5
 8002f3a:	d417      	bmi.n	8002f6c <_malloc_r+0x8c>
 8002f3c:	2b0b      	cmp	r3, #11
 8002f3e:	d903      	bls.n	8002f48 <_malloc_r+0x68>
 8002f40:	6023      	str	r3, [r4, #0]
 8002f42:	441c      	add	r4, r3
 8002f44:	6025      	str	r5, [r4, #0]
 8002f46:	e004      	b.n	8002f52 <_malloc_r+0x72>
 8002f48:	6863      	ldr	r3, [r4, #4]
 8002f4a:	42a2      	cmp	r2, r4
 8002f4c:	bf0c      	ite	eq
 8002f4e:	600b      	streq	r3, [r1, #0]
 8002f50:	6053      	strne	r3, [r2, #4]
 8002f52:	4630      	mov	r0, r6
 8002f54:	f000 f854 	bl	8003000 <__malloc_unlock>
 8002f58:	f104 000b 	add.w	r0, r4, #11
 8002f5c:	1d23      	adds	r3, r4, #4
 8002f5e:	f020 0007 	bic.w	r0, r0, #7
 8002f62:	1ac2      	subs	r2, r0, r3
 8002f64:	d0cc      	beq.n	8002f00 <_malloc_r+0x20>
 8002f66:	1a1b      	subs	r3, r3, r0
 8002f68:	50a3      	str	r3, [r4, r2]
 8002f6a:	e7c9      	b.n	8002f00 <_malloc_r+0x20>
 8002f6c:	4622      	mov	r2, r4
 8002f6e:	6864      	ldr	r4, [r4, #4]
 8002f70:	e7cc      	b.n	8002f0c <_malloc_r+0x2c>
 8002f72:	1cc4      	adds	r4, r0, #3
 8002f74:	f024 0403 	bic.w	r4, r4, #3
 8002f78:	42a0      	cmp	r0, r4
 8002f7a:	d0e3      	beq.n	8002f44 <_malloc_r+0x64>
 8002f7c:	1a21      	subs	r1, r4, r0
 8002f7e:	4630      	mov	r0, r6
 8002f80:	f000 f808 	bl	8002f94 <_sbrk_r>
 8002f84:	3001      	adds	r0, #1
 8002f86:	d1dd      	bne.n	8002f44 <_malloc_r+0x64>
 8002f88:	e7cf      	b.n	8002f2a <_malloc_r+0x4a>
 8002f8a:	bf00      	nop
 8002f8c:	200000b0 	.word	0x200000b0
 8002f90:	200000b4 	.word	0x200000b4

08002f94 <_sbrk_r>:
 8002f94:	b538      	push	{r3, r4, r5, lr}
 8002f96:	2300      	movs	r3, #0
 8002f98:	4d05      	ldr	r5, [pc, #20]	; (8002fb0 <_sbrk_r+0x1c>)
 8002f9a:	4604      	mov	r4, r0
 8002f9c:	4608      	mov	r0, r1
 8002f9e:	602b      	str	r3, [r5, #0]
 8002fa0:	f7fd fdf6 	bl	8000b90 <_sbrk>
 8002fa4:	1c43      	adds	r3, r0, #1
 8002fa6:	d102      	bne.n	8002fae <_sbrk_r+0x1a>
 8002fa8:	682b      	ldr	r3, [r5, #0]
 8002faa:	b103      	cbz	r3, 8002fae <_sbrk_r+0x1a>
 8002fac:	6023      	str	r3, [r4, #0]
 8002fae:	bd38      	pop	{r3, r4, r5, pc}
 8002fb0:	20000190 	.word	0x20000190

08002fb4 <siprintf>:
 8002fb4:	b40e      	push	{r1, r2, r3}
 8002fb6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002fba:	b500      	push	{lr}
 8002fbc:	b09c      	sub	sp, #112	; 0x70
 8002fbe:	ab1d      	add	r3, sp, #116	; 0x74
 8002fc0:	9002      	str	r0, [sp, #8]
 8002fc2:	9006      	str	r0, [sp, #24]
 8002fc4:	9107      	str	r1, [sp, #28]
 8002fc6:	9104      	str	r1, [sp, #16]
 8002fc8:	4808      	ldr	r0, [pc, #32]	; (8002fec <siprintf+0x38>)
 8002fca:	4909      	ldr	r1, [pc, #36]	; (8002ff0 <siprintf+0x3c>)
 8002fcc:	f853 2b04 	ldr.w	r2, [r3], #4
 8002fd0:	9105      	str	r1, [sp, #20]
 8002fd2:	6800      	ldr	r0, [r0, #0]
 8002fd4:	a902      	add	r1, sp, #8
 8002fd6:	9301      	str	r3, [sp, #4]
 8002fd8:	f000 f874 	bl	80030c4 <_svfiprintf_r>
 8002fdc:	2200      	movs	r2, #0
 8002fde:	9b02      	ldr	r3, [sp, #8]
 8002fe0:	701a      	strb	r2, [r3, #0]
 8002fe2:	b01c      	add	sp, #112	; 0x70
 8002fe4:	f85d eb04 	ldr.w	lr, [sp], #4
 8002fe8:	b003      	add	sp, #12
 8002fea:	4770      	bx	lr
 8002fec:	2000000c 	.word	0x2000000c
 8002ff0:	ffff0208 	.word	0xffff0208

08002ff4 <__malloc_lock>:
 8002ff4:	4801      	ldr	r0, [pc, #4]	; (8002ffc <__malloc_lock+0x8>)
 8002ff6:	f000 bafb 	b.w	80035f0 <__retarget_lock_acquire_recursive>
 8002ffa:	bf00      	nop
 8002ffc:	20000198 	.word	0x20000198

08003000 <__malloc_unlock>:
 8003000:	4801      	ldr	r0, [pc, #4]	; (8003008 <__malloc_unlock+0x8>)
 8003002:	f000 baf6 	b.w	80035f2 <__retarget_lock_release_recursive>
 8003006:	bf00      	nop
 8003008:	20000198 	.word	0x20000198

0800300c <__ssputs_r>:
 800300c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003010:	688e      	ldr	r6, [r1, #8]
 8003012:	4682      	mov	sl, r0
 8003014:	429e      	cmp	r6, r3
 8003016:	460c      	mov	r4, r1
 8003018:	4690      	mov	r8, r2
 800301a:	461f      	mov	r7, r3
 800301c:	d838      	bhi.n	8003090 <__ssputs_r+0x84>
 800301e:	898a      	ldrh	r2, [r1, #12]
 8003020:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003024:	d032      	beq.n	800308c <__ssputs_r+0x80>
 8003026:	6825      	ldr	r5, [r4, #0]
 8003028:	6909      	ldr	r1, [r1, #16]
 800302a:	3301      	adds	r3, #1
 800302c:	eba5 0901 	sub.w	r9, r5, r1
 8003030:	6965      	ldr	r5, [r4, #20]
 8003032:	444b      	add	r3, r9
 8003034:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003038:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800303c:	106d      	asrs	r5, r5, #1
 800303e:	429d      	cmp	r5, r3
 8003040:	bf38      	it	cc
 8003042:	461d      	movcc	r5, r3
 8003044:	0553      	lsls	r3, r2, #21
 8003046:	d531      	bpl.n	80030ac <__ssputs_r+0xa0>
 8003048:	4629      	mov	r1, r5
 800304a:	f7ff ff49 	bl	8002ee0 <_malloc_r>
 800304e:	4606      	mov	r6, r0
 8003050:	b950      	cbnz	r0, 8003068 <__ssputs_r+0x5c>
 8003052:	230c      	movs	r3, #12
 8003054:	f04f 30ff 	mov.w	r0, #4294967295
 8003058:	f8ca 3000 	str.w	r3, [sl]
 800305c:	89a3      	ldrh	r3, [r4, #12]
 800305e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003062:	81a3      	strh	r3, [r4, #12]
 8003064:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003068:	464a      	mov	r2, r9
 800306a:	6921      	ldr	r1, [r4, #16]
 800306c:	f000 fad0 	bl	8003610 <memcpy>
 8003070:	89a3      	ldrh	r3, [r4, #12]
 8003072:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003076:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800307a:	81a3      	strh	r3, [r4, #12]
 800307c:	6126      	str	r6, [r4, #16]
 800307e:	444e      	add	r6, r9
 8003080:	6026      	str	r6, [r4, #0]
 8003082:	463e      	mov	r6, r7
 8003084:	6165      	str	r5, [r4, #20]
 8003086:	eba5 0509 	sub.w	r5, r5, r9
 800308a:	60a5      	str	r5, [r4, #8]
 800308c:	42be      	cmp	r6, r7
 800308e:	d900      	bls.n	8003092 <__ssputs_r+0x86>
 8003090:	463e      	mov	r6, r7
 8003092:	4632      	mov	r2, r6
 8003094:	4641      	mov	r1, r8
 8003096:	6820      	ldr	r0, [r4, #0]
 8003098:	f000 fac8 	bl	800362c <memmove>
 800309c:	68a3      	ldr	r3, [r4, #8]
 800309e:	6822      	ldr	r2, [r4, #0]
 80030a0:	1b9b      	subs	r3, r3, r6
 80030a2:	4432      	add	r2, r6
 80030a4:	2000      	movs	r0, #0
 80030a6:	60a3      	str	r3, [r4, #8]
 80030a8:	6022      	str	r2, [r4, #0]
 80030aa:	e7db      	b.n	8003064 <__ssputs_r+0x58>
 80030ac:	462a      	mov	r2, r5
 80030ae:	f000 fad7 	bl	8003660 <_realloc_r>
 80030b2:	4606      	mov	r6, r0
 80030b4:	2800      	cmp	r0, #0
 80030b6:	d1e1      	bne.n	800307c <__ssputs_r+0x70>
 80030b8:	4650      	mov	r0, sl
 80030ba:	6921      	ldr	r1, [r4, #16]
 80030bc:	f7ff fec4 	bl	8002e48 <_free_r>
 80030c0:	e7c7      	b.n	8003052 <__ssputs_r+0x46>
	...

080030c4 <_svfiprintf_r>:
 80030c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030c8:	4698      	mov	r8, r3
 80030ca:	898b      	ldrh	r3, [r1, #12]
 80030cc:	4607      	mov	r7, r0
 80030ce:	061b      	lsls	r3, r3, #24
 80030d0:	460d      	mov	r5, r1
 80030d2:	4614      	mov	r4, r2
 80030d4:	b09d      	sub	sp, #116	; 0x74
 80030d6:	d50e      	bpl.n	80030f6 <_svfiprintf_r+0x32>
 80030d8:	690b      	ldr	r3, [r1, #16]
 80030da:	b963      	cbnz	r3, 80030f6 <_svfiprintf_r+0x32>
 80030dc:	2140      	movs	r1, #64	; 0x40
 80030de:	f7ff feff 	bl	8002ee0 <_malloc_r>
 80030e2:	6028      	str	r0, [r5, #0]
 80030e4:	6128      	str	r0, [r5, #16]
 80030e6:	b920      	cbnz	r0, 80030f2 <_svfiprintf_r+0x2e>
 80030e8:	230c      	movs	r3, #12
 80030ea:	603b      	str	r3, [r7, #0]
 80030ec:	f04f 30ff 	mov.w	r0, #4294967295
 80030f0:	e0d1      	b.n	8003296 <_svfiprintf_r+0x1d2>
 80030f2:	2340      	movs	r3, #64	; 0x40
 80030f4:	616b      	str	r3, [r5, #20]
 80030f6:	2300      	movs	r3, #0
 80030f8:	9309      	str	r3, [sp, #36]	; 0x24
 80030fa:	2320      	movs	r3, #32
 80030fc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003100:	2330      	movs	r3, #48	; 0x30
 8003102:	f04f 0901 	mov.w	r9, #1
 8003106:	f8cd 800c 	str.w	r8, [sp, #12]
 800310a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80032b0 <_svfiprintf_r+0x1ec>
 800310e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003112:	4623      	mov	r3, r4
 8003114:	469a      	mov	sl, r3
 8003116:	f813 2b01 	ldrb.w	r2, [r3], #1
 800311a:	b10a      	cbz	r2, 8003120 <_svfiprintf_r+0x5c>
 800311c:	2a25      	cmp	r2, #37	; 0x25
 800311e:	d1f9      	bne.n	8003114 <_svfiprintf_r+0x50>
 8003120:	ebba 0b04 	subs.w	fp, sl, r4
 8003124:	d00b      	beq.n	800313e <_svfiprintf_r+0x7a>
 8003126:	465b      	mov	r3, fp
 8003128:	4622      	mov	r2, r4
 800312a:	4629      	mov	r1, r5
 800312c:	4638      	mov	r0, r7
 800312e:	f7ff ff6d 	bl	800300c <__ssputs_r>
 8003132:	3001      	adds	r0, #1
 8003134:	f000 80aa 	beq.w	800328c <_svfiprintf_r+0x1c8>
 8003138:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800313a:	445a      	add	r2, fp
 800313c:	9209      	str	r2, [sp, #36]	; 0x24
 800313e:	f89a 3000 	ldrb.w	r3, [sl]
 8003142:	2b00      	cmp	r3, #0
 8003144:	f000 80a2 	beq.w	800328c <_svfiprintf_r+0x1c8>
 8003148:	2300      	movs	r3, #0
 800314a:	f04f 32ff 	mov.w	r2, #4294967295
 800314e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003152:	f10a 0a01 	add.w	sl, sl, #1
 8003156:	9304      	str	r3, [sp, #16]
 8003158:	9307      	str	r3, [sp, #28]
 800315a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800315e:	931a      	str	r3, [sp, #104]	; 0x68
 8003160:	4654      	mov	r4, sl
 8003162:	2205      	movs	r2, #5
 8003164:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003168:	4851      	ldr	r0, [pc, #324]	; (80032b0 <_svfiprintf_r+0x1ec>)
 800316a:	f000 fa43 	bl	80035f4 <memchr>
 800316e:	9a04      	ldr	r2, [sp, #16]
 8003170:	b9d8      	cbnz	r0, 80031aa <_svfiprintf_r+0xe6>
 8003172:	06d0      	lsls	r0, r2, #27
 8003174:	bf44      	itt	mi
 8003176:	2320      	movmi	r3, #32
 8003178:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800317c:	0711      	lsls	r1, r2, #28
 800317e:	bf44      	itt	mi
 8003180:	232b      	movmi	r3, #43	; 0x2b
 8003182:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003186:	f89a 3000 	ldrb.w	r3, [sl]
 800318a:	2b2a      	cmp	r3, #42	; 0x2a
 800318c:	d015      	beq.n	80031ba <_svfiprintf_r+0xf6>
 800318e:	4654      	mov	r4, sl
 8003190:	2000      	movs	r0, #0
 8003192:	f04f 0c0a 	mov.w	ip, #10
 8003196:	9a07      	ldr	r2, [sp, #28]
 8003198:	4621      	mov	r1, r4
 800319a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800319e:	3b30      	subs	r3, #48	; 0x30
 80031a0:	2b09      	cmp	r3, #9
 80031a2:	d94e      	bls.n	8003242 <_svfiprintf_r+0x17e>
 80031a4:	b1b0      	cbz	r0, 80031d4 <_svfiprintf_r+0x110>
 80031a6:	9207      	str	r2, [sp, #28]
 80031a8:	e014      	b.n	80031d4 <_svfiprintf_r+0x110>
 80031aa:	eba0 0308 	sub.w	r3, r0, r8
 80031ae:	fa09 f303 	lsl.w	r3, r9, r3
 80031b2:	4313      	orrs	r3, r2
 80031b4:	46a2      	mov	sl, r4
 80031b6:	9304      	str	r3, [sp, #16]
 80031b8:	e7d2      	b.n	8003160 <_svfiprintf_r+0x9c>
 80031ba:	9b03      	ldr	r3, [sp, #12]
 80031bc:	1d19      	adds	r1, r3, #4
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	9103      	str	r1, [sp, #12]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	bfbb      	ittet	lt
 80031c6:	425b      	neglt	r3, r3
 80031c8:	f042 0202 	orrlt.w	r2, r2, #2
 80031cc:	9307      	strge	r3, [sp, #28]
 80031ce:	9307      	strlt	r3, [sp, #28]
 80031d0:	bfb8      	it	lt
 80031d2:	9204      	strlt	r2, [sp, #16]
 80031d4:	7823      	ldrb	r3, [r4, #0]
 80031d6:	2b2e      	cmp	r3, #46	; 0x2e
 80031d8:	d10c      	bne.n	80031f4 <_svfiprintf_r+0x130>
 80031da:	7863      	ldrb	r3, [r4, #1]
 80031dc:	2b2a      	cmp	r3, #42	; 0x2a
 80031de:	d135      	bne.n	800324c <_svfiprintf_r+0x188>
 80031e0:	9b03      	ldr	r3, [sp, #12]
 80031e2:	3402      	adds	r4, #2
 80031e4:	1d1a      	adds	r2, r3, #4
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	9203      	str	r2, [sp, #12]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	bfb8      	it	lt
 80031ee:	f04f 33ff 	movlt.w	r3, #4294967295
 80031f2:	9305      	str	r3, [sp, #20]
 80031f4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80032c0 <_svfiprintf_r+0x1fc>
 80031f8:	2203      	movs	r2, #3
 80031fa:	4650      	mov	r0, sl
 80031fc:	7821      	ldrb	r1, [r4, #0]
 80031fe:	f000 f9f9 	bl	80035f4 <memchr>
 8003202:	b140      	cbz	r0, 8003216 <_svfiprintf_r+0x152>
 8003204:	2340      	movs	r3, #64	; 0x40
 8003206:	eba0 000a 	sub.w	r0, r0, sl
 800320a:	fa03 f000 	lsl.w	r0, r3, r0
 800320e:	9b04      	ldr	r3, [sp, #16]
 8003210:	3401      	adds	r4, #1
 8003212:	4303      	orrs	r3, r0
 8003214:	9304      	str	r3, [sp, #16]
 8003216:	f814 1b01 	ldrb.w	r1, [r4], #1
 800321a:	2206      	movs	r2, #6
 800321c:	4825      	ldr	r0, [pc, #148]	; (80032b4 <_svfiprintf_r+0x1f0>)
 800321e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003222:	f000 f9e7 	bl	80035f4 <memchr>
 8003226:	2800      	cmp	r0, #0
 8003228:	d038      	beq.n	800329c <_svfiprintf_r+0x1d8>
 800322a:	4b23      	ldr	r3, [pc, #140]	; (80032b8 <_svfiprintf_r+0x1f4>)
 800322c:	bb1b      	cbnz	r3, 8003276 <_svfiprintf_r+0x1b2>
 800322e:	9b03      	ldr	r3, [sp, #12]
 8003230:	3307      	adds	r3, #7
 8003232:	f023 0307 	bic.w	r3, r3, #7
 8003236:	3308      	adds	r3, #8
 8003238:	9303      	str	r3, [sp, #12]
 800323a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800323c:	4433      	add	r3, r6
 800323e:	9309      	str	r3, [sp, #36]	; 0x24
 8003240:	e767      	b.n	8003112 <_svfiprintf_r+0x4e>
 8003242:	460c      	mov	r4, r1
 8003244:	2001      	movs	r0, #1
 8003246:	fb0c 3202 	mla	r2, ip, r2, r3
 800324a:	e7a5      	b.n	8003198 <_svfiprintf_r+0xd4>
 800324c:	2300      	movs	r3, #0
 800324e:	f04f 0c0a 	mov.w	ip, #10
 8003252:	4619      	mov	r1, r3
 8003254:	3401      	adds	r4, #1
 8003256:	9305      	str	r3, [sp, #20]
 8003258:	4620      	mov	r0, r4
 800325a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800325e:	3a30      	subs	r2, #48	; 0x30
 8003260:	2a09      	cmp	r2, #9
 8003262:	d903      	bls.n	800326c <_svfiprintf_r+0x1a8>
 8003264:	2b00      	cmp	r3, #0
 8003266:	d0c5      	beq.n	80031f4 <_svfiprintf_r+0x130>
 8003268:	9105      	str	r1, [sp, #20]
 800326a:	e7c3      	b.n	80031f4 <_svfiprintf_r+0x130>
 800326c:	4604      	mov	r4, r0
 800326e:	2301      	movs	r3, #1
 8003270:	fb0c 2101 	mla	r1, ip, r1, r2
 8003274:	e7f0      	b.n	8003258 <_svfiprintf_r+0x194>
 8003276:	ab03      	add	r3, sp, #12
 8003278:	9300      	str	r3, [sp, #0]
 800327a:	462a      	mov	r2, r5
 800327c:	4638      	mov	r0, r7
 800327e:	4b0f      	ldr	r3, [pc, #60]	; (80032bc <_svfiprintf_r+0x1f8>)
 8003280:	a904      	add	r1, sp, #16
 8003282:	f3af 8000 	nop.w
 8003286:	1c42      	adds	r2, r0, #1
 8003288:	4606      	mov	r6, r0
 800328a:	d1d6      	bne.n	800323a <_svfiprintf_r+0x176>
 800328c:	89ab      	ldrh	r3, [r5, #12]
 800328e:	065b      	lsls	r3, r3, #25
 8003290:	f53f af2c 	bmi.w	80030ec <_svfiprintf_r+0x28>
 8003294:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003296:	b01d      	add	sp, #116	; 0x74
 8003298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800329c:	ab03      	add	r3, sp, #12
 800329e:	9300      	str	r3, [sp, #0]
 80032a0:	462a      	mov	r2, r5
 80032a2:	4638      	mov	r0, r7
 80032a4:	4b05      	ldr	r3, [pc, #20]	; (80032bc <_svfiprintf_r+0x1f8>)
 80032a6:	a904      	add	r1, sp, #16
 80032a8:	f000 f87c 	bl	80033a4 <_printf_i>
 80032ac:	e7eb      	b.n	8003286 <_svfiprintf_r+0x1c2>
 80032ae:	bf00      	nop
 80032b0:	08003728 	.word	0x08003728
 80032b4:	08003732 	.word	0x08003732
 80032b8:	00000000 	.word	0x00000000
 80032bc:	0800300d 	.word	0x0800300d
 80032c0:	0800372e 	.word	0x0800372e

080032c4 <_printf_common>:
 80032c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80032c8:	4616      	mov	r6, r2
 80032ca:	4699      	mov	r9, r3
 80032cc:	688a      	ldr	r2, [r1, #8]
 80032ce:	690b      	ldr	r3, [r1, #16]
 80032d0:	4607      	mov	r7, r0
 80032d2:	4293      	cmp	r3, r2
 80032d4:	bfb8      	it	lt
 80032d6:	4613      	movlt	r3, r2
 80032d8:	6033      	str	r3, [r6, #0]
 80032da:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80032de:	460c      	mov	r4, r1
 80032e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80032e4:	b10a      	cbz	r2, 80032ea <_printf_common+0x26>
 80032e6:	3301      	adds	r3, #1
 80032e8:	6033      	str	r3, [r6, #0]
 80032ea:	6823      	ldr	r3, [r4, #0]
 80032ec:	0699      	lsls	r1, r3, #26
 80032ee:	bf42      	ittt	mi
 80032f0:	6833      	ldrmi	r3, [r6, #0]
 80032f2:	3302      	addmi	r3, #2
 80032f4:	6033      	strmi	r3, [r6, #0]
 80032f6:	6825      	ldr	r5, [r4, #0]
 80032f8:	f015 0506 	ands.w	r5, r5, #6
 80032fc:	d106      	bne.n	800330c <_printf_common+0x48>
 80032fe:	f104 0a19 	add.w	sl, r4, #25
 8003302:	68e3      	ldr	r3, [r4, #12]
 8003304:	6832      	ldr	r2, [r6, #0]
 8003306:	1a9b      	subs	r3, r3, r2
 8003308:	42ab      	cmp	r3, r5
 800330a:	dc28      	bgt.n	800335e <_printf_common+0x9a>
 800330c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003310:	1e13      	subs	r3, r2, #0
 8003312:	6822      	ldr	r2, [r4, #0]
 8003314:	bf18      	it	ne
 8003316:	2301      	movne	r3, #1
 8003318:	0692      	lsls	r2, r2, #26
 800331a:	d42d      	bmi.n	8003378 <_printf_common+0xb4>
 800331c:	4649      	mov	r1, r9
 800331e:	4638      	mov	r0, r7
 8003320:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003324:	47c0      	blx	r8
 8003326:	3001      	adds	r0, #1
 8003328:	d020      	beq.n	800336c <_printf_common+0xa8>
 800332a:	6823      	ldr	r3, [r4, #0]
 800332c:	68e5      	ldr	r5, [r4, #12]
 800332e:	f003 0306 	and.w	r3, r3, #6
 8003332:	2b04      	cmp	r3, #4
 8003334:	bf18      	it	ne
 8003336:	2500      	movne	r5, #0
 8003338:	6832      	ldr	r2, [r6, #0]
 800333a:	f04f 0600 	mov.w	r6, #0
 800333e:	68a3      	ldr	r3, [r4, #8]
 8003340:	bf08      	it	eq
 8003342:	1aad      	subeq	r5, r5, r2
 8003344:	6922      	ldr	r2, [r4, #16]
 8003346:	bf08      	it	eq
 8003348:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800334c:	4293      	cmp	r3, r2
 800334e:	bfc4      	itt	gt
 8003350:	1a9b      	subgt	r3, r3, r2
 8003352:	18ed      	addgt	r5, r5, r3
 8003354:	341a      	adds	r4, #26
 8003356:	42b5      	cmp	r5, r6
 8003358:	d11a      	bne.n	8003390 <_printf_common+0xcc>
 800335a:	2000      	movs	r0, #0
 800335c:	e008      	b.n	8003370 <_printf_common+0xac>
 800335e:	2301      	movs	r3, #1
 8003360:	4652      	mov	r2, sl
 8003362:	4649      	mov	r1, r9
 8003364:	4638      	mov	r0, r7
 8003366:	47c0      	blx	r8
 8003368:	3001      	adds	r0, #1
 800336a:	d103      	bne.n	8003374 <_printf_common+0xb0>
 800336c:	f04f 30ff 	mov.w	r0, #4294967295
 8003370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003374:	3501      	adds	r5, #1
 8003376:	e7c4      	b.n	8003302 <_printf_common+0x3e>
 8003378:	2030      	movs	r0, #48	; 0x30
 800337a:	18e1      	adds	r1, r4, r3
 800337c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003380:	1c5a      	adds	r2, r3, #1
 8003382:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003386:	4422      	add	r2, r4
 8003388:	3302      	adds	r3, #2
 800338a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800338e:	e7c5      	b.n	800331c <_printf_common+0x58>
 8003390:	2301      	movs	r3, #1
 8003392:	4622      	mov	r2, r4
 8003394:	4649      	mov	r1, r9
 8003396:	4638      	mov	r0, r7
 8003398:	47c0      	blx	r8
 800339a:	3001      	adds	r0, #1
 800339c:	d0e6      	beq.n	800336c <_printf_common+0xa8>
 800339e:	3601      	adds	r6, #1
 80033a0:	e7d9      	b.n	8003356 <_printf_common+0x92>
	...

080033a4 <_printf_i>:
 80033a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80033a8:	460c      	mov	r4, r1
 80033aa:	7e27      	ldrb	r7, [r4, #24]
 80033ac:	4691      	mov	r9, r2
 80033ae:	2f78      	cmp	r7, #120	; 0x78
 80033b0:	4680      	mov	r8, r0
 80033b2:	469a      	mov	sl, r3
 80033b4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80033b6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80033ba:	d807      	bhi.n	80033cc <_printf_i+0x28>
 80033bc:	2f62      	cmp	r7, #98	; 0x62
 80033be:	d80a      	bhi.n	80033d6 <_printf_i+0x32>
 80033c0:	2f00      	cmp	r7, #0
 80033c2:	f000 80d9 	beq.w	8003578 <_printf_i+0x1d4>
 80033c6:	2f58      	cmp	r7, #88	; 0x58
 80033c8:	f000 80a4 	beq.w	8003514 <_printf_i+0x170>
 80033cc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80033d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80033d4:	e03a      	b.n	800344c <_printf_i+0xa8>
 80033d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80033da:	2b15      	cmp	r3, #21
 80033dc:	d8f6      	bhi.n	80033cc <_printf_i+0x28>
 80033de:	a001      	add	r0, pc, #4	; (adr r0, 80033e4 <_printf_i+0x40>)
 80033e0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80033e4:	0800343d 	.word	0x0800343d
 80033e8:	08003451 	.word	0x08003451
 80033ec:	080033cd 	.word	0x080033cd
 80033f0:	080033cd 	.word	0x080033cd
 80033f4:	080033cd 	.word	0x080033cd
 80033f8:	080033cd 	.word	0x080033cd
 80033fc:	08003451 	.word	0x08003451
 8003400:	080033cd 	.word	0x080033cd
 8003404:	080033cd 	.word	0x080033cd
 8003408:	080033cd 	.word	0x080033cd
 800340c:	080033cd 	.word	0x080033cd
 8003410:	0800355f 	.word	0x0800355f
 8003414:	08003481 	.word	0x08003481
 8003418:	08003541 	.word	0x08003541
 800341c:	080033cd 	.word	0x080033cd
 8003420:	080033cd 	.word	0x080033cd
 8003424:	08003581 	.word	0x08003581
 8003428:	080033cd 	.word	0x080033cd
 800342c:	08003481 	.word	0x08003481
 8003430:	080033cd 	.word	0x080033cd
 8003434:	080033cd 	.word	0x080033cd
 8003438:	08003549 	.word	0x08003549
 800343c:	680b      	ldr	r3, [r1, #0]
 800343e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003442:	1d1a      	adds	r2, r3, #4
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	600a      	str	r2, [r1, #0]
 8003448:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800344c:	2301      	movs	r3, #1
 800344e:	e0a4      	b.n	800359a <_printf_i+0x1f6>
 8003450:	6825      	ldr	r5, [r4, #0]
 8003452:	6808      	ldr	r0, [r1, #0]
 8003454:	062e      	lsls	r6, r5, #24
 8003456:	f100 0304 	add.w	r3, r0, #4
 800345a:	d50a      	bpl.n	8003472 <_printf_i+0xce>
 800345c:	6805      	ldr	r5, [r0, #0]
 800345e:	600b      	str	r3, [r1, #0]
 8003460:	2d00      	cmp	r5, #0
 8003462:	da03      	bge.n	800346c <_printf_i+0xc8>
 8003464:	232d      	movs	r3, #45	; 0x2d
 8003466:	426d      	negs	r5, r5
 8003468:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800346c:	230a      	movs	r3, #10
 800346e:	485e      	ldr	r0, [pc, #376]	; (80035e8 <_printf_i+0x244>)
 8003470:	e019      	b.n	80034a6 <_printf_i+0x102>
 8003472:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003476:	6805      	ldr	r5, [r0, #0]
 8003478:	600b      	str	r3, [r1, #0]
 800347a:	bf18      	it	ne
 800347c:	b22d      	sxthne	r5, r5
 800347e:	e7ef      	b.n	8003460 <_printf_i+0xbc>
 8003480:	680b      	ldr	r3, [r1, #0]
 8003482:	6825      	ldr	r5, [r4, #0]
 8003484:	1d18      	adds	r0, r3, #4
 8003486:	6008      	str	r0, [r1, #0]
 8003488:	0628      	lsls	r0, r5, #24
 800348a:	d501      	bpl.n	8003490 <_printf_i+0xec>
 800348c:	681d      	ldr	r5, [r3, #0]
 800348e:	e002      	b.n	8003496 <_printf_i+0xf2>
 8003490:	0669      	lsls	r1, r5, #25
 8003492:	d5fb      	bpl.n	800348c <_printf_i+0xe8>
 8003494:	881d      	ldrh	r5, [r3, #0]
 8003496:	2f6f      	cmp	r7, #111	; 0x6f
 8003498:	bf0c      	ite	eq
 800349a:	2308      	moveq	r3, #8
 800349c:	230a      	movne	r3, #10
 800349e:	4852      	ldr	r0, [pc, #328]	; (80035e8 <_printf_i+0x244>)
 80034a0:	2100      	movs	r1, #0
 80034a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80034a6:	6866      	ldr	r6, [r4, #4]
 80034a8:	2e00      	cmp	r6, #0
 80034aa:	bfa8      	it	ge
 80034ac:	6821      	ldrge	r1, [r4, #0]
 80034ae:	60a6      	str	r6, [r4, #8]
 80034b0:	bfa4      	itt	ge
 80034b2:	f021 0104 	bicge.w	r1, r1, #4
 80034b6:	6021      	strge	r1, [r4, #0]
 80034b8:	b90d      	cbnz	r5, 80034be <_printf_i+0x11a>
 80034ba:	2e00      	cmp	r6, #0
 80034bc:	d04d      	beq.n	800355a <_printf_i+0x1b6>
 80034be:	4616      	mov	r6, r2
 80034c0:	fbb5 f1f3 	udiv	r1, r5, r3
 80034c4:	fb03 5711 	mls	r7, r3, r1, r5
 80034c8:	5dc7      	ldrb	r7, [r0, r7]
 80034ca:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80034ce:	462f      	mov	r7, r5
 80034d0:	42bb      	cmp	r3, r7
 80034d2:	460d      	mov	r5, r1
 80034d4:	d9f4      	bls.n	80034c0 <_printf_i+0x11c>
 80034d6:	2b08      	cmp	r3, #8
 80034d8:	d10b      	bne.n	80034f2 <_printf_i+0x14e>
 80034da:	6823      	ldr	r3, [r4, #0]
 80034dc:	07df      	lsls	r7, r3, #31
 80034de:	d508      	bpl.n	80034f2 <_printf_i+0x14e>
 80034e0:	6923      	ldr	r3, [r4, #16]
 80034e2:	6861      	ldr	r1, [r4, #4]
 80034e4:	4299      	cmp	r1, r3
 80034e6:	bfde      	ittt	le
 80034e8:	2330      	movle	r3, #48	; 0x30
 80034ea:	f806 3c01 	strble.w	r3, [r6, #-1]
 80034ee:	f106 36ff 	addle.w	r6, r6, #4294967295
 80034f2:	1b92      	subs	r2, r2, r6
 80034f4:	6122      	str	r2, [r4, #16]
 80034f6:	464b      	mov	r3, r9
 80034f8:	4621      	mov	r1, r4
 80034fa:	4640      	mov	r0, r8
 80034fc:	f8cd a000 	str.w	sl, [sp]
 8003500:	aa03      	add	r2, sp, #12
 8003502:	f7ff fedf 	bl	80032c4 <_printf_common>
 8003506:	3001      	adds	r0, #1
 8003508:	d14c      	bne.n	80035a4 <_printf_i+0x200>
 800350a:	f04f 30ff 	mov.w	r0, #4294967295
 800350e:	b004      	add	sp, #16
 8003510:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003514:	4834      	ldr	r0, [pc, #208]	; (80035e8 <_printf_i+0x244>)
 8003516:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800351a:	680e      	ldr	r6, [r1, #0]
 800351c:	6823      	ldr	r3, [r4, #0]
 800351e:	f856 5b04 	ldr.w	r5, [r6], #4
 8003522:	061f      	lsls	r7, r3, #24
 8003524:	600e      	str	r6, [r1, #0]
 8003526:	d514      	bpl.n	8003552 <_printf_i+0x1ae>
 8003528:	07d9      	lsls	r1, r3, #31
 800352a:	bf44      	itt	mi
 800352c:	f043 0320 	orrmi.w	r3, r3, #32
 8003530:	6023      	strmi	r3, [r4, #0]
 8003532:	b91d      	cbnz	r5, 800353c <_printf_i+0x198>
 8003534:	6823      	ldr	r3, [r4, #0]
 8003536:	f023 0320 	bic.w	r3, r3, #32
 800353a:	6023      	str	r3, [r4, #0]
 800353c:	2310      	movs	r3, #16
 800353e:	e7af      	b.n	80034a0 <_printf_i+0xfc>
 8003540:	6823      	ldr	r3, [r4, #0]
 8003542:	f043 0320 	orr.w	r3, r3, #32
 8003546:	6023      	str	r3, [r4, #0]
 8003548:	2378      	movs	r3, #120	; 0x78
 800354a:	4828      	ldr	r0, [pc, #160]	; (80035ec <_printf_i+0x248>)
 800354c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003550:	e7e3      	b.n	800351a <_printf_i+0x176>
 8003552:	065e      	lsls	r6, r3, #25
 8003554:	bf48      	it	mi
 8003556:	b2ad      	uxthmi	r5, r5
 8003558:	e7e6      	b.n	8003528 <_printf_i+0x184>
 800355a:	4616      	mov	r6, r2
 800355c:	e7bb      	b.n	80034d6 <_printf_i+0x132>
 800355e:	680b      	ldr	r3, [r1, #0]
 8003560:	6826      	ldr	r6, [r4, #0]
 8003562:	1d1d      	adds	r5, r3, #4
 8003564:	6960      	ldr	r0, [r4, #20]
 8003566:	600d      	str	r5, [r1, #0]
 8003568:	0635      	lsls	r5, r6, #24
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	d501      	bpl.n	8003572 <_printf_i+0x1ce>
 800356e:	6018      	str	r0, [r3, #0]
 8003570:	e002      	b.n	8003578 <_printf_i+0x1d4>
 8003572:	0671      	lsls	r1, r6, #25
 8003574:	d5fb      	bpl.n	800356e <_printf_i+0x1ca>
 8003576:	8018      	strh	r0, [r3, #0]
 8003578:	2300      	movs	r3, #0
 800357a:	4616      	mov	r6, r2
 800357c:	6123      	str	r3, [r4, #16]
 800357e:	e7ba      	b.n	80034f6 <_printf_i+0x152>
 8003580:	680b      	ldr	r3, [r1, #0]
 8003582:	1d1a      	adds	r2, r3, #4
 8003584:	600a      	str	r2, [r1, #0]
 8003586:	681e      	ldr	r6, [r3, #0]
 8003588:	2100      	movs	r1, #0
 800358a:	4630      	mov	r0, r6
 800358c:	6862      	ldr	r2, [r4, #4]
 800358e:	f000 f831 	bl	80035f4 <memchr>
 8003592:	b108      	cbz	r0, 8003598 <_printf_i+0x1f4>
 8003594:	1b80      	subs	r0, r0, r6
 8003596:	6060      	str	r0, [r4, #4]
 8003598:	6863      	ldr	r3, [r4, #4]
 800359a:	6123      	str	r3, [r4, #16]
 800359c:	2300      	movs	r3, #0
 800359e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80035a2:	e7a8      	b.n	80034f6 <_printf_i+0x152>
 80035a4:	4632      	mov	r2, r6
 80035a6:	4649      	mov	r1, r9
 80035a8:	4640      	mov	r0, r8
 80035aa:	6923      	ldr	r3, [r4, #16]
 80035ac:	47d0      	blx	sl
 80035ae:	3001      	adds	r0, #1
 80035b0:	d0ab      	beq.n	800350a <_printf_i+0x166>
 80035b2:	6823      	ldr	r3, [r4, #0]
 80035b4:	079b      	lsls	r3, r3, #30
 80035b6:	d413      	bmi.n	80035e0 <_printf_i+0x23c>
 80035b8:	68e0      	ldr	r0, [r4, #12]
 80035ba:	9b03      	ldr	r3, [sp, #12]
 80035bc:	4298      	cmp	r0, r3
 80035be:	bfb8      	it	lt
 80035c0:	4618      	movlt	r0, r3
 80035c2:	e7a4      	b.n	800350e <_printf_i+0x16a>
 80035c4:	2301      	movs	r3, #1
 80035c6:	4632      	mov	r2, r6
 80035c8:	4649      	mov	r1, r9
 80035ca:	4640      	mov	r0, r8
 80035cc:	47d0      	blx	sl
 80035ce:	3001      	adds	r0, #1
 80035d0:	d09b      	beq.n	800350a <_printf_i+0x166>
 80035d2:	3501      	adds	r5, #1
 80035d4:	68e3      	ldr	r3, [r4, #12]
 80035d6:	9903      	ldr	r1, [sp, #12]
 80035d8:	1a5b      	subs	r3, r3, r1
 80035da:	42ab      	cmp	r3, r5
 80035dc:	dcf2      	bgt.n	80035c4 <_printf_i+0x220>
 80035de:	e7eb      	b.n	80035b8 <_printf_i+0x214>
 80035e0:	2500      	movs	r5, #0
 80035e2:	f104 0619 	add.w	r6, r4, #25
 80035e6:	e7f5      	b.n	80035d4 <_printf_i+0x230>
 80035e8:	08003739 	.word	0x08003739
 80035ec:	0800374a 	.word	0x0800374a

080035f0 <__retarget_lock_acquire_recursive>:
 80035f0:	4770      	bx	lr

080035f2 <__retarget_lock_release_recursive>:
 80035f2:	4770      	bx	lr

080035f4 <memchr>:
 80035f4:	4603      	mov	r3, r0
 80035f6:	b510      	push	{r4, lr}
 80035f8:	b2c9      	uxtb	r1, r1
 80035fa:	4402      	add	r2, r0
 80035fc:	4293      	cmp	r3, r2
 80035fe:	4618      	mov	r0, r3
 8003600:	d101      	bne.n	8003606 <memchr+0x12>
 8003602:	2000      	movs	r0, #0
 8003604:	e003      	b.n	800360e <memchr+0x1a>
 8003606:	7804      	ldrb	r4, [r0, #0]
 8003608:	3301      	adds	r3, #1
 800360a:	428c      	cmp	r4, r1
 800360c:	d1f6      	bne.n	80035fc <memchr+0x8>
 800360e:	bd10      	pop	{r4, pc}

08003610 <memcpy>:
 8003610:	440a      	add	r2, r1
 8003612:	4291      	cmp	r1, r2
 8003614:	f100 33ff 	add.w	r3, r0, #4294967295
 8003618:	d100      	bne.n	800361c <memcpy+0xc>
 800361a:	4770      	bx	lr
 800361c:	b510      	push	{r4, lr}
 800361e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003622:	4291      	cmp	r1, r2
 8003624:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003628:	d1f9      	bne.n	800361e <memcpy+0xe>
 800362a:	bd10      	pop	{r4, pc}

0800362c <memmove>:
 800362c:	4288      	cmp	r0, r1
 800362e:	b510      	push	{r4, lr}
 8003630:	eb01 0402 	add.w	r4, r1, r2
 8003634:	d902      	bls.n	800363c <memmove+0x10>
 8003636:	4284      	cmp	r4, r0
 8003638:	4623      	mov	r3, r4
 800363a:	d807      	bhi.n	800364c <memmove+0x20>
 800363c:	1e43      	subs	r3, r0, #1
 800363e:	42a1      	cmp	r1, r4
 8003640:	d008      	beq.n	8003654 <memmove+0x28>
 8003642:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003646:	f803 2f01 	strb.w	r2, [r3, #1]!
 800364a:	e7f8      	b.n	800363e <memmove+0x12>
 800364c:	4601      	mov	r1, r0
 800364e:	4402      	add	r2, r0
 8003650:	428a      	cmp	r2, r1
 8003652:	d100      	bne.n	8003656 <memmove+0x2a>
 8003654:	bd10      	pop	{r4, pc}
 8003656:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800365a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800365e:	e7f7      	b.n	8003650 <memmove+0x24>

08003660 <_realloc_r>:
 8003660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003662:	4607      	mov	r7, r0
 8003664:	4614      	mov	r4, r2
 8003666:	460e      	mov	r6, r1
 8003668:	b921      	cbnz	r1, 8003674 <_realloc_r+0x14>
 800366a:	4611      	mov	r1, r2
 800366c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003670:	f7ff bc36 	b.w	8002ee0 <_malloc_r>
 8003674:	b922      	cbnz	r2, 8003680 <_realloc_r+0x20>
 8003676:	f7ff fbe7 	bl	8002e48 <_free_r>
 800367a:	4625      	mov	r5, r4
 800367c:	4628      	mov	r0, r5
 800367e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003680:	f000 f814 	bl	80036ac <_malloc_usable_size_r>
 8003684:	42a0      	cmp	r0, r4
 8003686:	d20f      	bcs.n	80036a8 <_realloc_r+0x48>
 8003688:	4621      	mov	r1, r4
 800368a:	4638      	mov	r0, r7
 800368c:	f7ff fc28 	bl	8002ee0 <_malloc_r>
 8003690:	4605      	mov	r5, r0
 8003692:	2800      	cmp	r0, #0
 8003694:	d0f2      	beq.n	800367c <_realloc_r+0x1c>
 8003696:	4631      	mov	r1, r6
 8003698:	4622      	mov	r2, r4
 800369a:	f7ff ffb9 	bl	8003610 <memcpy>
 800369e:	4631      	mov	r1, r6
 80036a0:	4638      	mov	r0, r7
 80036a2:	f7ff fbd1 	bl	8002e48 <_free_r>
 80036a6:	e7e9      	b.n	800367c <_realloc_r+0x1c>
 80036a8:	4635      	mov	r5, r6
 80036aa:	e7e7      	b.n	800367c <_realloc_r+0x1c>

080036ac <_malloc_usable_size_r>:
 80036ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80036b0:	1f18      	subs	r0, r3, #4
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	bfbc      	itt	lt
 80036b6:	580b      	ldrlt	r3, [r1, r0]
 80036b8:	18c0      	addlt	r0, r0, r3
 80036ba:	4770      	bx	lr

080036bc <_init>:
 80036bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036be:	bf00      	nop
 80036c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036c2:	bc08      	pop	{r3}
 80036c4:	469e      	mov	lr, r3
 80036c6:	4770      	bx	lr

080036c8 <_fini>:
 80036c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036ca:	bf00      	nop
 80036cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036ce:	bc08      	pop	{r3}
 80036d0:	469e      	mov	lr, r3
 80036d2:	4770      	bx	lr
